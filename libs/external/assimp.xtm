;;; assimp.xtm

;; Author: Andrew Sorensen
;; Keywords: extempore
;; Required dylibs: libSOIL, libassimp, libGLU

;;; Commentary:

;;; Code:

;; lib-loading config
(sys:load-preload-check 'assimp)

;; lib assimp
(define libassimp
  (let ((platform (sys:platform)))
    (cond ((string=? platform "Linux") (sys:open-dylib "libassimp.so"))
          ((string=? platform "Windows") (sys:open-dylib "libassimp.dll"))
          ((string=? platform "OSX") (sys:open-dylib "libassimp.dylib"))
          (else (print "Unknown platform: " platform)))))

(if (or (eq? #f libassimp)
        (null? libassimp))
    (sys:load-escape "Error loading assimp library"))

(define *xtmlib-assimp-loaded* #t)

;; load SOIL
(sys:load "libs/external/soil.xtm")
;; load shaders
(sys:load "libs/external/shaders.xtm")

;; load texture and returns texture number
;; 16 is for verticle flip
;; 512 is for GL_TEXTURE_RECTANGLE_ARB (otherwise GL_TEXTURE_2D)
;; 4 is for repeat
;; 8 multiply alpha
(bind-func ai_load_ogl_texture
  (lambda (path idx:i32)
    (let ((res (SOIL_load_OGL_texture path 4 idx (+ 4 8 16)))) ; (+ 512 16))))
      (if (= res 0)
	  (begin (printf "failed (%lld) to load %s\n" res path)
                 0)
	  (begin (printf "...tex:> id(%d) loaded path:%s\n" res path)
                 res)))))

;; load texture and returns texture number
;; 16 is for verticle flip
;; 512 is for GL_TEXTURE_RECTANGLE_ARB (otherwise GL_TEXTURE_2D)
;; 4 is for repeat
;; 8 multiply alpha
(bind-func ai_load_ogl_texture_from_buffer
  (lambda (data datalgth idx:i32)
    (printf "load ogl texture\n")
    (let ((res (SOIL_load_OGL_texture_from_memory data datalgth 4 idx (+ 4 8 16)))) ; (+ 512 16))))
      (printf "loaded ogl texture %d\n" res)
      (if (= res 0)
	  (begin (printf "failed (%d) to load embedded texture\n" res)
                 0)
	  (begin (printf "...tex:> id(%d) loaded embedded texture\n" res)
                 res)))))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; ASSIMP LIBRARY
;;
;; You will need to compile the Open Asset Import Library (ASSIMP)
;; You can get source from here http://assimp.sourceforge.net/
;; Make sure libassimp.so (or similar dylib) is accessible!
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(bind-val aiProcess_CalcTangentSpace i32 1)
(bind-val aiProcess_JoinIdenticalVertices i32 2)
(bind-val aiProcess_MakeLeftHanded i32 4)
(bind-val aiProcess_Triangulate i32 8)
(bind-val aiProcess_RemoveComponent i32 16)
(bind-val aiProcess_GenNormals i32 32)
(bind-val aiProcess_GenSmoothNormals i32 64)
(bind-val aiProcess_SplitLargeMeshes i32 128)
(bind-val aiProcess_PreTransformVertices i32 256)
(bind-val aiProcess_LimitBoneWeights i32 512)
(bind-val aiProcess_ValidateDataStructure i32 1024)
(bind-val aiProcess_ImproveCacheLocality i32 2048)
(bind-val aiProcess_RemoveRedundantMaterials i32 4096)
(bind-val aiProcess_FixInfacingNormals i32 8192)
(bind-val aiProcess_SortByPType i32 32768)
(bind-val aiProcess_FindDegenerates i32 65536)
(bind-val aiProcess_FindInvalidData i32 131072)
(bind-val aiProcess_GenUVCoords i32 262144)
(bind-val aiProcess_TransformUVCoords i32 524288)
(bind-val aiProcess_FindInstances i32 1048576)
(bind-val aiProcess_OptimizeMeshes i32 2097152)
(bind-val aiProcess_OptimizeGraph i32 4194304)
(bind-val aiProcess_FlipUVs i32 8388608)
(bind-val aiProcess_FlipWindingOrder i32 16777216)
(bind-val aiProcess_SplitByBoneCount i32 33554432)
(bind-val aiProcess_Debone i32 67108864)

(define  aiProcess_CalcTangentSpace  1)
(define  aiProcess_JoinIdenticalVertices  2)
(define  aiProcess_MakeLeftHanded  4)
(define  aiProcess_Triangulate  8)
(define  aiProcess_RemoveComponent  16)
(define  aiProcess_GenNormals  32)
(define  aiProcess_GenSmoothNormals  64)
(define  aiProcess_SplitLargeMeshes  128)
(define  aiProcess_PreTransformVertices  256)
(define  aiProcess_LimitBoneWeights  512)
(define  aiProcess_ValidateDataStructure  1024)
(define  aiProcess_ImproveCacheLocality  2048)
(define  aiProcess_RemoveRedundantMaterials  4096)
(define  aiProcess_FixInfacingNormals  8192)
(define  aiProcess_SortByPType  32768)
(define  aiProcess_FindDegenerates  65536)
(define  aiProcess_FindInvalidData  131072)
(define  aiProcess_GenUVCoords  262144)
(define  aiProcess_TransformUVCoords  524288)
(define  aiProcess_FindInstances  1048576)
(define  aiProcess_OptimizeMeshes  2097152)
(define  aiProcess_OptimizeGraph  4194304)
(define  aiProcess_FlipUVs  8388608)
(define  aiProcess_FlipWindingOrder  16777216)
(define  aiProcess_SplitByBoneCount  33554432)
(define  aiProcess_Debone 67108864)

(bind-type aiString <size_t,|1024,i8|>)
;(llvm:compile "%aiString = type {i64, |1024xi8|}
(bind-type aiMatrix4x4 <float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float>)
(bind-type aiMatrix3x3 <float,float,float,float,float,float,float,float,float>)
(bind-type aiVector4D <float,float,float,float>)
(bind-type aiVector3D <float,float,float>)
(bind-type aiVector2D <float,float>)
;; r g b a
(bind-type aiColor4D <float,float,float,float>)
(bind-type aiColor3D <float,float,float>)
(bind-type aiQuaternion <float,float,float,float>)
(bind-type aiTexel <i8,i8,i8,i8>) ;; b,g,r,a
;; mTime,mValue
(bind-type aiVectorKey <double,aiVector3D>) ;; good
;; mTime,mValue
(bind-type aiQuatKey <double,aiQuaternion>) ;; good
;; mTime,mValue
(bind-type aiMeshKey <double,i32>) ;; good
;; mName(0),mTransformation(1),mParent(2),mNumChildren(3),mChildren(4),mNumMeshes(5),mMeshes(6),mMetadata(7)
(bind-type aiNode <aiString,aiMatrix4x4,aiNode*,i32,aiNode**,i32,i32*,i8*>) ;; good 1144
;; mNumIndices,mIndicies
(bind-type aiFace <i32,i32*>) ;; good
;; mVertexId,mWeightm
(bind-type aiVertexWeight <i32,float>) ;; good
;; mName,mNumWeights,mWeights,mOffsetMatrix
(bind-type aiBone <aiString,i32,aiVertexWeight*,aiMatrix4x4>) ;; good
;; mVertices,mNormals,mTangents,mBitangents,mColors,mNumVertices
(bind-type aiAnimMesh <aiVector3D*,aiVector3D*,aiVector3D*,aiVector3D*,|8,aiColor4D*|,|8,aiVector3D*|,i32>) ;; good
;; mPrimitiveTypes(0),mNumVertices(1),mNumFaces(2),mVertices(3),mNormals(4),mTangents(5),mBitangents(6),mColors(7),mTextureCoords(8),mNumUVComponents(9),mFaces(10),mNumBones(11),mBones(12),mMaterialIndex(13),mName(14),mNumAnimMeshes(15)
;; NOTE!  for some reason GCC registers aiMesh as 1288 bytes long (LLVM only 1280) so I've padded an i64 on the end.
;;        so don't know what internal alignment problems there might be :(
(bind-type aiMesh <i32,i32,i32,aiVector3D*,aiVector3D*,aiVector3D*,aiVector3D*,|8,aiColor4D*|,|8,aiVector3D*|,|8,i32|,aiFace*,i32,aiBone**,i32,aiString,i32,aiAnimMesh**,i64>) ;; i64 on end is padding
;; mTranslation,mScaling,mRotation
(bind-type aiUVTransform <aiVector2D,aiVector2D,float>) ;; good
;; mKey(0),mSemantic(1),mIndex(2),mDataLength(3),mType(4),mData(5)
(bind-type aiMaterialProperty <aiString,i32,i32,i32,i32,i8*>) ;; good
;; mProperties,mNumProperties,mNumAllocated
(bind-type aiMaterial <aiMaterialProperty**,i32,i32>) ;; good
;; mNodeName,mNumPositionKeys,mPositionKeys,mNumRotationKeys,mRotationKeys,mNumScalingKeys,mScalingKeys,mPreState,mPostState
(bind-type aiNodeAnim <aiString,i32,aiVectorKey*,i32,aiQuatKey*,i32,aiVectorKey*,i32,i32>) ;; good
;; mName,mNumKeys,mKeys
(bind-type aiMeshAnim <aiString,i32,aiMeshKey*>) ;; good
;; mName,mDuration,mTicksPerSecond,mNumChannels,mChannels,mNumMeshChannels,mMeshChannels
(bind-type aiAnimation <aiString,double,double,i32,aiNodeAnim**,i32,aiMeshAnim**>) ;; good
;; mWidth,mHeight,achFormatHint,pcData
(bind-type aiTexture <i32,i32,|4,i8|,aiTexel*>) ;; good
;; mName,mType,mPosition,mDirection,mAttenuationConstant,mAttenuationLinear,mAttenuationQuadratic,mColorDiffuse,mColorSpecular,mColorAmbient,mAngleInnerCone,mAngleOuterCone
(bind-type aiLight <aiString,i32,aiVector3D,aiVector3D,float,float,float,aiColor3D,aiColor3D,aiColor3D,float,float>) ;; good
;; mName,mPosition,mUp,mLookAt,mHorizontalFOV,mClipPlaneNear,mClipPlaneFar,mAspect
(bind-type aiCamera <aiString,aiVector3D,aiVector3D,aiVector3D,float,float,float,float>) ;; good
;; mFlags(0),mRootNode(1),mNumMeshes(2),mMeshes(3),mNumMaterials(4),mMaterials(5),mNumAnimations(6),mAnimations(7),mNumTextures(8),mTextures(9),mNumLights(10),mLights(11),mNumCameras(12),mCameras(13)
(bind-type aiScene <i32,aiNode*,i32,aiMesh**,i32,aiMaterial**,i32,aiAnimation**,i32,aiTexture**,i32,aiLight**,i32,aiCamera**,i8*>) ;; good
(bind-type aiExportFormatDesc <i8*,i8*,i8*>)
;;
;; (bind-type aicontainer <aiScene*,aiVector3D*,aiVector3D*,aiVector3D*>)

(bind-lib libassimp aiImportFile [aiScene*,i8*,i32]*)
(bind-lib libassimp aiExportScene [i32,aiScene*,i8*,i8*,i32]*)
(bind-lib libassimp aiGetExportFormatCount [size_t]*)
(bind-lib libassimp aiGetExportFormatDescription [aiExportFormatDesc*,size_t]*)
(bind-lib libassimp aiReleaseImport [void,aiScene*]*)
(bind-lib libassimp aiIdentityMatrix4 [void,aiMatrix4x4*]*)
(bind-lib libassimp aiMultiplyMatrix4 [void,aiMatrix4x4*,aiMatrix4x4*]*)
(bind-lib libassimp aiTransformVecByMatrix4 [void,aiVector3D*,aiMatrix4x4*]*)
(bind-lib libassimp aiTransposeMatrix4 [void,aiMatrix4x4*]*)
(bind-lib libassimp aiTransposeMatrix3 [void,aiMatrix3x3*]*)
(bind-lib libassimp aiGetMaterialColor [i32,aiMaterial*,i8*,i32,i32,aiColor4D*]*)
(bind-lib libassimp aiGetMaterialString [i32,aiMaterial*,i8*,i32,i32,aiString*]*)
(bind-lib libassimp aiGetMaterialFloatArray [i32,aiMaterial*,i8*,i32,i32,float*,i32*]*)
(bind-lib libassimp aiGetMaterialIntegerArray [i32,aiMaterial*,i8*,i32,i32,i32*,i32*]*)
;; aiReturn (aiMaterial* mat, aiTextureType type, uint index, aiString* path, aiTextureMapping* mapping, uint* uvindex, float* blend, aiTextureOp* op, aiTextureMapMode* mapmode, uint* flags) 
(bind-lib libassimp aiGetMaterialTexture [i32,aiMaterial*,i32,i32,aiString*,i32*,i32*,float*,i32*,i32*,i32*]*)
;; uint (aiMaterial* mat,i32 type)
(bind-lib libassimp aiGetMaterialTextureCount [i32,aiMaterial*,i32]*)

(bind-func aiGetMaterialFloat:[i32,aiMaterial*,i8*,i32,i32,float*]*
  (lambda (mat pkey type index pout)
    (aiGetMaterialFloatArray mat pkey type index pout null)))


(bind-func ai_copy_matrix4
  (lambda (src:aiMatrix4x4* dest:aiMatrix4x4*)
    (tset! dest 0 (tref src 0))
    (tset! dest 1 (tref src 1))
    (tset! dest 2 (tref src 2))
    (tset! dest 3 (tref src 3))
    (tset! dest 4 (tref src 4))
    (tset! dest 5 (tref src 5))
    (tset! dest 6 (tref src 6))
    (tset! dest 7 (tref src 7))
    (tset! dest 8 (tref src 8))
    (tset! dest 9 (tref src 9))
    (tset! dest 10 (tref src 10))
    (tset! dest 11 (tref src 11))
    (tset! dest 12 (tref src 12))
    (tset! dest 13 (tref src 13))
    (tset! dest 14 (tref src 14))
    (tset! dest 15 (tref src 15))
    1))

(bind-func ai_matrix4_to_float
  (lambda (mat1:aiMatrix4x4* mat2:float*)
    (pset! mat2 0 (tref mat1 0))
    (pset! mat2 1 (tref mat1 1))
    (pset! mat2 2 (tref mat1 2))
    (pset! mat2 3 (tref mat1 3))
    (pset! mat2 4 (tref mat1 4))
    (pset! mat2 5 (tref mat1 5))
    (pset! mat2 6 (tref mat1 6))
    (pset! mat2 7 (tref mat1 7))
    (pset! mat2 8 (tref mat1 8))
    (pset! mat2 9 (tref mat1 9))
    (pset! mat2 10 (tref mat1 10))
    (pset! mat2 11 (tref mat1 11))
    (pset! mat2 12 (tref mat1 12))
    (pset! mat2 13 (tref mat1 13))
    (pset! mat2 14 (tref mat1 14))
    (pset! mat2 15 (tref mat1 15))
    void))


(bind-func aisgl_min
  (lambda (a:float b:float)
    (if (< a b) a b)))


(bind-func aisgl_max
  (lambda (a:float b:float)
    (if (> a b) a b)))


(bind-func ai_print_string
  (lambda (str:aiString*)
    (let ((size (tref str 0))
	  (dat (bitcast (tref-ptr str 1) i8*)))
      (printf "%.*s\n" size dat))))


;; (bind-func ai_get_bounding_box_for_node
;;   (lambda (scene:aiScene* nd:aiNode* min:aiVector3D* max:aiVector3D* trafo:aiMatrix4x4*)
;;     (let ((prev:aiMatrix4x4* (stack-alloc))
;; 	  (prevarr (bitcast prev float*))
;;           (n:i32 0)
;;           (nn:i32 0)
;;           (t:i32 0)
;; 	  (minarr (bitcast min float*))
;; 	  (maxarr (bitcast max float*))
;; 	  (trafoarr (bitcast trafo float*)))
;;       (ai_copy_matrix4 trafo prev)
;;       (aiMultiplyMatrix4 trafo (tref-ptr nd 1))
;;       ;(printf "meshes: %lld\n" (tref nd 5))
;;       (dotimes (n (tref nd 5))
;; 	;(printf "n: %lld\n" n)
;; 	(let ((mesh (pref (tref scene 3) (pref (tref nd 6) n)))
;; 	      (verts (tref mesh 3)))
;; 	  ;(printf "verts: %lld\n" (tref mesh 1))
;; 	  (dotimes (t (tref mesh 1))	   
;; 	    (let ((tmp (pref-ptr verts t))
;; 		  (tmparr (bitcast tmp float*)))
;; 	      (aiTransformVecByMatrix4 tmp trafo)
;; 	      (tset! min 0 (aisgl_min (tref min 0) (tref tmp 0)))
;; 	      (tset! min 1 (aisgl_min (tref min 1) (tref tmp 1)))
;; 	      (tset! min 2 (aisgl_min (tref min 2) (tref tmp 2)))
;; 	      (tset! max 0 (aisgl_max (tref max 0) (tref tmp 0)))
;; 	      (tset! max 1 (aisgl_max (tref max 1) (tref tmp 1)))
;; 	      (tset! max 2 (aisgl_max (tref max 2) (tref tmp 2)))))))
      
;;       (dotimes (nn (tref nd 3))
;; 	(let ((mynodes (tref nd 4))
;; 	      (next-node (pref mynodes nn)))
;; 	  ;(printf "node %d:%d\n" nn (tref nd 3))
;; 	  (ai_get_bounding_box_for_node scene next-node min max trafo)))
;;       (ai_copy_matrix4 prev trafo))))


;; (bind-func ai_get_bounding_box
;;   (lambda (scene:aiScene* min:aiVector3D* max:aiVector3D*)
;;     (let ((trafo:aiMatrix4x4* (stack-alloc))
;;           (i 0)
;; 	  (minarr:float* (cast min))
;; 	  (maxarr:float* (cast max)))
;;       (aiIdentityMatrix4 trafo)
;;       (dotimes (i 3)
;; 	(pset! minarr i 123151.0)
;; 	(pset! maxarr i -123151.0))
;;       ;(printf "number of node meshes %d\n" (tref (tref scene 1) 5))
;;       (ai_get_bounding_box_for_node scene (tref scene 1) min max trafo))))


(bind-func aiColor4f
  (lambda (colour:aiColor4D*)
    (glColor4f (tref colour 1) (tref colour 2) (tref colour 3) (tref colour 0))))


(bind-func ai_color4_to_float4
  (lambda (colour:aiColor4D* dat:float*)
    (pset! dat 0 (tref colour 0))
    (pset! dat 1 (tref colour 1))
    (pset! dat 2 (tref colour 2))
    (pset! dat 3 (tref colour 3))
    1))

(bind-func ai_apply_material
  (lambda (mtl:aiMaterial* idx:i32)
    (let ((c1:|4,float|* (salloc))
          (c:float* (cast c1))
	  (diffuse:aiColor4D* (salloc))
	  (specular:aiColor4D* (salloc))
	  (ambient:aiColor4D* (salloc))
	  (emission:aiColor4D* (salloc))
	  (max:i32* (salloc))
	  (wireframe:i32* (salloc))
	  (two_sided:i32* (salloc))
	  (shininess:float* (salloc))
	  (strength:float* (salloc))
	  (name:aiString* (salloc))
	  (texfile:aiString* (salloc)))

      ;; PRINT MATERIAL PARAMS
      ;; mKey(0),mSemantic(1),mIndex(2),mDataLength(3),mType(4),mData(5)
      (aiGetMaterialString mtl "?mat.name" 0 0 name)      
      (printf "material %d name: " (+ idx 1))
      (ai_print_string name)

      ;; (printf "textures: diffuse:%d ambient:%d specular:%d normals:%d unknown:%d\n"
      ;; 	      (aiGetMaterialTextureCount mtl 1)
      ;; 	      (aiGetMaterialTextureCount mtl 3)
      ;; 	      (aiGetMaterialTextureCount mtl 2)
      ;; 	      (aiGetMaterialTextureCount mtl 6)
      ;; 	      (aiGetMaterialTextureCount mtl 12))

      
      (if (= (aiGetMaterialTexture mtl 1 0 texfile null null null null null null) 0)
	  (begin (printf "bind to index:%d texture name: " (+ 1 idx))
		 (ai_print_string texfile)
		 (glBindTexture GL_TEXTURE_2D (+ 1 idx))))

      (pfill! c 0.8 0.8 0.8 1.0)      
      (glMaterialfv GL_FRONT_AND_BACK GL_DIFFUSE c)
      
      (pfill! c 0.0 0.0 0.0 1.0)      
      (glMaterialfv GL_FRONT_AND_BACK GL_SPECULAR c)

      (pfill! c 0.0 0.0 0.0 1.0)      
      (glMaterialfv GL_FRONT_AND_BACK GL_AMBIENT c)

      (pfill! c 0.0 0.0 0.0 1.0)      
      (glMaterialfv GL_FRONT_AND_BACK GL_EMISSION c)

      (if (and (= (begin (pset! max 0 1)
                         (aiGetMaterialIntegerArray mtl "$mat.twosided" 0 0 two_sided max)) 0)
      	       (= (pref two_sided 0) 1))
      	  (glEnable GL_CULL_FACE)
      	  (glDisable GL_CULL_FACE)))))


;; mode is a bit of a dodge
;; it basically returns whatever the
;; last vertex positions mode was
;; GL_POINTS GL_LINES GL_TRIANGLE GL_QUADS or GL_POLYGON
(bind-func ai_build_mesh_vbo
  (lambda (mesh:aiMesh* mode:i32*)
    ;; (printf "... mesh vbo\n")    
    (let ((i:i32 0) (j:i32 0)
          (vbodata:float* null)
          (vbostride:i32 14) ;; 4d+3d+3d+4d in floats
          (positions:i32 0)
          (position_cnt:i32 -1)
          (vertices:aiVector3D* (tref mesh 3))
          (normals:aiVector3D* (tref mesh 4))
          (num_vertices (tref mesh 1))
          (num_faces:i32 (tref mesh 2))
          (faces (tref mesh 10))
          (face:aiFace* null)
          (num_indicies:i32 0)
          (face_mode:i32 0)
          (index:i32 0)
          (indicies:i32* null)
          (colors:aiColor4D* (aref (tref-ptr mesh 7) 0)) ;; only use first 'set' of colors
          (texturecoords:aiVector3D* (aref (tref-ptr mesh 8) 0))) ;; only use first 'set' of texcoords
      ;; precalc the total number of positions required
      ;; this is the total number of faces * the total number of
      ;; indexes per face
      (dotimes (i num_faces)        
        (set! face (pref-ptr faces i))
        (set! positions (+ positions (tref face 0)))
        (set! indicies (tref face 1))
        (dotimes (j (tref face 0))
          (set! index (pref indicies j))
          ;; (printf "index: %d:%d\n" (+ (- positions 3) j) index)
          (if (or (< index 0) (> index num_vertices))
              (printf "Bad Index Value: %d:%d (%d:%d) %d:%d\n" index num_vertices i j (pref indicies (+ j 1)) (pref indicies (+ j 2))))))
      (printf "...mesh:> faces:%d vertices:%d\n" num_faces positions)
      ;; 4d position + 3d normal + 3d coord + 4d colors
      (let ((vbod:float* (halloc (* positions vbostride))))
        (set! vbodata vbod)) ;; (cast (malloc (i32toi64 (* positions vbostride 4))) float*))
      (dotimes (i num_faces)
        (set! face (pref-ptr faces i))
        (set! num_indicies (tref face 0))
        (if (<> num_indicies 3)
            (printf "ERROR: all faces should be triangulated!!!!\n"))
        (set! indicies (tref face 1))
        (dotimes (j num_indicies)
          (set! position_cnt (+ position_cnt 1))
          ;; (set! index position_cnt) ;;(pref indicies j))
          (set! index (pref indicies j))
          ;; (printf "index %d:%d:%d:%d:%p:%p:%p\n" j num_indicies index position_cnt face indicies faces)
          (if (or (< index 0) (> index num_vertices))
              (printf "...Bad Index Value: %d:%d  (%d:%d)  %d:%d\n" index num_vertices i j
                      (pref indicies (+ j 1)) (pref indicies (+ j 2))))
          (pfill! (pref-ptr vbodata (* position_cnt vbostride))
                  (tref (pref-ptr vertices index) 0) ;; x
                  (tref (pref-ptr vertices index) 1) ;; y
                  (tref (pref-ptr vertices index) 2) ;; z
                  1.0 ;; we are a position (i.e. w==1)
                  )
          (if (null? normals)
              (pfill! (pref-ptr vbodata (+ 4 (* position_cnt vbostride))) ;; offset 4
                      0.0 1.0 0.0) ;; normal pointing up Y
              (pfill! (pref-ptr vbodata (+ 4 (* position_cnt vbostride))) ;; offset 4
                      (tref (pref-ptr normals index) 0) ;; x
                      (tref (pref-ptr normals index) 1) ;; y
                      (tref (pref-ptr normals index) 2) ;; z
                      ))
          (if (null? texturecoords)
              (pfill! (pref-ptr vbodata (+ 7 (* position_cnt vbostride))) ;; offset 4+3
                      0.0 1.0 0.0) ;; normal pointing up Y
              (pfill! (pref-ptr vbodata (+ 7 (* position_cnt vbostride)))
                      (tref (pref-ptr texturecoords index) 0) ;; x
                      (tref (pref-ptr texturecoords index) 1) ;; y
                      0.0 ;;(tref (pref-ptr texturecoords index) 2) ;; z
                      ))
          (if (null? colors) ;; if colors is null make vertex color red
              (pfill! (pref-ptr vbodata (+ 10 (* position_cnt vbostride))) ;; offset 4+3+3
                      1.0 0.0 0.0 1.0)
              (pfill! (pref-ptr vbodata (+ 10 (* position_cnt vbostride))) ;; offset 4+3+3
                      (tref (pref-ptr colors index) 0) ;; r
                      (tref (pref-ptr colors index) 1) ;; g
                      (tref (pref-ptr colors index) 2) ;; b
                      (tref (pref-ptr colors index) 3) ;; a
                      ))))
      (if (<> (+ 1 position_cnt) positions)
          (printf "Error: positions:%d <> position_cnt:%d" positions (+ position_cnt 1)))
      (pset! mode 0 GL_TRIANGLES) ;;  face_mode)
      ;; return vbo
      (let ((vbo (create_vbo (* positions vbostride 4) (cast vbodata i8*) GL_STATIC_DRAW)))
        (glBindBuffer GL_ARRAY_BUFFER (tref vbo 0))        
        (glBufferData GL_ARRAY_BUFFER (tref vbo 1) (tref vbo 2) GL_STATIC_DRAW)
        (glBindBuffer GL_ARRAY_BUFFER 0)
        vbo))))
 

(bind-func ai_build_mesh
  (lambda (scene:aiScene* mesh:aiMesh* aimesh:xtm_mesh* dir:i8*)
    ;; (printf "\tBuild Mesh\n")
    (let ((facemode:i32* (salloc)) 
          (vbo:E_vbo* null)
          (color:aiColor4D* (salloc))
          (val:float* (salloc))
          (diffuse:float* (halloc 4))
          (ambient:float* (halloc 4))
          (specular:float* (halloc 4))
          (emissive:float* (halloc 4))
          (material_index (tref mesh 13))
          (material (pref (tref scene 5) material_index))
          (texid 0)
          (texfile:aiString* (salloc))          
	  (name:aiString* (tref-ptr mesh 14)))
      (set! vbo (ai_build_mesh_vbo mesh facemode))
      (tset! aimesh 0 vbo)
      (if (= (aiGetMaterialTexture material 1 0 texfile null null null null null null) 0)
          (let ((s1 (cast (tref-ptr texfile 1) i8*))
                (lgth (+ (strlen dir) (tref texfile 0) 1))
                (s2 (salloc lgth)))
            (if (= (pref s1 0) 42)
                (let ((texidx:i32 (atoi (pref-ptr s1 1)))
                      (texture:aiTexture* (pref (tref scene 9) texidx))
                      (achformat (tref texture 2))
                      (texwidth (tref texture 0))
                      (texheight (tref texture 1))
                      (texdata (cast (tref texture 3) i8*))
                      (datasize (if (= texheight 0) texwidth (* 4 texwidth texheight))))
                  ;;(printf "tidx:%d of num:%d w:%d h:%d size:%d\n" texidx (tref scene 8) texwidth texheight datasize)
                  (set! texid (ai_load_ogl_texture_from_buffer texdata datasize 0)))
                (begin 
                  (memset s2 0 lgth)
                  (memcpy s2 dir (strlen dir))
                  (memcpy (pref-ptr s2 (strlen dir)) s1 (tref texfile 0))
                  (set! texid (ai_load_ogl_texture s2 0))))))
      (tset! aimesh 1 texid)
      (if (= (aiGetMaterialColor material "$clr.diffuse" 0 0 color) 0)
          (ai_color4_to_float4 color diffuse))
      (tset! aimesh 2 diffuse)
      (if (= (aiGetMaterialColor material "$clr.ambient" 0 0 color) 0)          
          (ai_color4_to_float4 color ambient))
      (tset! aimesh 3 ambient)      
      (if (= (aiGetMaterialColor material "$clr.specular" 0 0 color) 0)
          (ai_color4_to_float4 color specular))
      (tset! aimesh 4 specular)            
      (if (= (aiGetMaterialColor material "$clr.emissive" 0 0 color) 0)
          (ai_color4_to_float4 color emissive))
      (tset! aimesh 5 emissive)
      (if (= (aiGetMaterialFloat material "$mat.shininess" 0 0 val) 0)
          (begin (tset! aimesh 6 (pref val 0)) 1)
          (begin (tset! aimesh 6 0.0) 1))
      (if (= (aiGetMaterialFloat material "$mat.opacity" 0 0 val) 0)
          (begin (tset! aimesh 7 (pref val 0)) 1)
          (begin (tset! aimesh 7 0.0) 1))
      (tset! aimesh 8 (pref facemode 0))
      void)))



;; returns the scenes top level node as xtm_node*
(bind-func ai_build_node
  (lambda (scene:aiScene* node:aiNode* _node:xtm_node* parent:xtm_node* dir:i8*)
    (let ((i:i32 0)
          (ain:aiString* (tref-ptr node 0))
          (namelgth (tref ain 0))
          (name:i8* (halloc (+ 1 namelgth)))
          (numchildren:i32 (tref node 3))
          (children:aiNode** (tref node 4))          
          (_children:xtm_node* (halloc (+ 1 numchildren)))
          (nummeshes:i32 (tref node 5))
          (meshes:aiMesh** (tref scene 3))          
          (_meshes:xtm_mesh* (halloc (+ 1 nummeshes)))
          (transmat:float* (halloc 16)))
      (memset name 0 (+ namelgth 1))
      (memcpy name (cast (tref-ptr ain 1) i8*) namelgth)
      (printf "Node:%s\n" name)
      ;;(printf "Build node:%s:%p children(%d)  meshes(%d)\n" name _node numchildren nummeshes)
      (tset! _node 0 name)
      (ai_matrix4_to_float (tref-ptr node 1) transmat)
      (tset! _node 1 transmat)
      (tset! _node 2 parent)
      (tset! _node 3 numchildren)
      (dotimes (i numchildren)
        (ai_build_node scene (pref children i) (pref-ptr _children i) _node dir))
      (tset! _node 4 _children)
      (tset! _node 5 nummeshes)
      (dotimes (i nummeshes)
        (ai_build_mesh scene (pref meshes (pref (tref node 6) i)) (pref-ptr _meshes i) dir))
      (tset! _node 6 _meshes)
      void)))


;; returns the scenes top level node as xtm_node*
(bind-func ai_build_scene  
  (lambda (scene:aiScene* dir:i8*)
    (printf "embedded textures: %d\n" (tref scene 8))
    (let ((root:xtm_node* (halloc)))
      ;; (printf "\nNew Scene ... %p\n" scene)
      (ai_build_node scene (tref scene 1) root null dir)
      root)))

;; where post is any post processing required
;; if value is 0 then use default
;; of (+ aiProcess_FindDegenerates aiProcess_Triangulate)
;; if value > 0 then use post exactly as defined
;; which means the user must add AT LEAST aiProcess_Triangulate
;;
(bind-func assimp_load_model_a
  (lambda (dir file post)
    (let ((lgth (+ (strlen dir) (strlen file) 1))
          (scene:aiScene* null)
          (path:i8* (salloc lgth)))
      (memset path 0 lgth)
      (memcpy path dir (strlen dir))
      (memcpy (pref-ptr path (strlen dir)) file (strlen file))
      (if (> post 0)
          (set! scene (aiImportFile path post))
          (set! scene (aiImportFile path (+ aiProcess_FindDegenerates aiProcess_PreTransformVertices aiProcess_OptimizeMeshes aiProcess_OptimizeGraph aiProcess_Triangulate))))
      ;;(set! scene (aiImportFile path 498379))
      (let ((root:xtm_node*
             (if (null? scene)
                 (begin (printf "Bad Asset! %s\n" path) (cast null xtm_node*))
                 (ai_build_scene scene dir))))
        (if (not (null? scene))
            (begin ;; (printf "delete scene: %p\n" scene)
                   (aiReleaseImport scene)))
        root))))

(bind-func assimp_load_model_b
  (lambda (dir file)
    (assimp_load_model_a dir file 0)))

(bind-poly assimp_load_model assimp_load_model_a)
(bind-poly assimp_load_model assimp_load_model_b)

;; poly has no binding for scheme
(define assimp_load_model
  (lambda (dir file . args)
    (if (null? args)
        (assimp_load_model_b dir file)
        (assimp_load_model_a dir file (car args)))))

(bind-func assimp_draw_node
  (lambda (node:xtm_node* shader:i32 model:float* view:float* projection:float* lights:i32 light:float*)
    (let ((i:i32 0)
          (children (tref node 4))
          (meshes (tref node 6))
          (transmat:float* (tref node 1))
          (m2:float* (salloc 16))
          (m:float* (salloc 16)))
      ;; (printf "draw node: %s\n" (tref node 0))
      ;;(mprint transmat 4 4 1)      
      ;;(mprintf model 4 4 1)
      (if (null? transmat)
          (begin (memcpy (cast m i8*) (cast model i8*) (* 4 16)) 1)
          (begin
            (mtrans transmat 4 4 m2)
            (mmul m2 4 4 model 4 4 m)
            1))
      (shader_update_matrices_lvs shader m view projection lights light)
      ;; first draw meshes
      (dotimes (i (tref node 5))
        (xtm_draw_mesh (pref-ptr meshes i) shader))
      ;; then draw other children recursively
      (dotimes (i (tref node 3))
        (assimp_draw_node (pref-ptr children i) shader model view projection lights light))
      void)))


(bind-func assimp_draw_model
  (lambda (scene:xtm_node* shader:i32 model view projection lights light)
    (assimp_draw_node scene shader model view projection lights light)
    void))


(bind-func ai_load_textures
  (lambda (scene:aiScene*)
    (let ((materials (tref scene 5))
	  (num-of-mats (tref scene 4))
          (i:i32 0))
      (dotimes (i num-of-mats) 
	(let ((mtl (pref materials i))
	      (name:aiString* (salloc))
	      (texfile:aiString* (salloc)))
	  (if (= (aiGetMaterialTexture mtl 1 0 texfile null null null null null null) 0)
	      (begin (aiGetMaterialString mtl "?mat.name" 0 0 name)      
		     (printf "load texture for material %d name: " (+ 1 i))
		     (ai_print_string name)
		     (printf "textures: diffuse:%d specular:%d ambient:%d emissive:%d hight:%d normals:%d shininess:%d opacity:%d displacement:%d lightmap:%d reflect:%d unknown:%d\n"
			     (aiGetMaterialTextureCount mtl 1)
			     (aiGetMaterialTextureCount mtl 2)			     
			     (aiGetMaterialTextureCount mtl 3)
			     (aiGetMaterialTextureCount mtl 4)
			     (aiGetMaterialTextureCount mtl 5)			     
			     (aiGetMaterialTextureCount mtl 6)
			     (aiGetMaterialTextureCount mtl 7)
			     (aiGetMaterialTextureCount mtl 8)
			     (aiGetMaterialTextureCount mtl 9)			     
			     (aiGetMaterialTextureCount mtl 10)
			     (aiGetMaterialTextureCount mtl 11)			     
			     (aiGetMaterialTextureCount mtl 12))		     
		     (printf "texture name: ")
		     (ai_print_string texfile)
		     (ai_load_ogl_texture (bitcast (tref-ptr texfile 1) i8*) (+ 1 i)))))))))


(bind-func ai_print_export_formats
  (lambda ()
    (let ((i 0)
          (desc:aiExportFormatDesc* null)
          (cnt (aiGetExportFormatCount)))
      (printf "**************************\n")      
      (dotimes (i cnt)
        (set! desc (aiGetExportFormatDescription i))
        (printf "------\nid(%s):ext(%s)\n%s\n" (tref desc 0) (tref desc 2) (tref desc 1)))
      (printf "**************************\n")
      void)))

(bind-func ai_convert
  (lambda (fin fout format:i8* aiprocess)
    (printf "Convert 3D File to %s\n" format)
    (let ((scene (aiImportFile fin aiprocess)))
      (printf "Scene successfully imported\n" scene)
      (aiExportScene scene format fout aiprocess)
      (printf "\n Done exporting scene\n")
      void)))
