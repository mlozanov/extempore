;;; instruments.xtm -- instruments (external)

;; Author: Andrew Sorensen, Ben Swift
;; Keywords: extempore
;; Required dylibs: libsndfile

;;; Commentary:

;; This is for instruments which rely on external (that is, C)
;; libraries.
;;
;; The main external instrument is the sampler, which depends on
;; libsndfile to read the samples from the disk into its sample
;; buffers. But over time other instruments which depend on external
;; libraries will be added in here too.

;;; Code:

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; SAMPLER
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(load "libs/core/audio_dsp.xtm")
(load "libs/external/sndfile.xtm")

;; helper function for adding sample data to sampler
;; this assumes stereo files at the moment!!
;; passing 0 for length means read to end of file.
;;
;; for example:
;; ;; this reads the whole file into index 60
;; (set-sampler-data sampler "/tmp/piano-C.aif" 60 0 0)
;; ;; this reads 5000 frames starting 1000 frames into the file
;; (set-sampler-data sampler "/tmp/piano-C.aif" 60 1000 5000)
(bind-func set_sample_data_
  (lambda (inst:[double,double,double,double*]* fname index offset lgth)
    (let ((info:sf_info* (zalloc))
	  (audiofile (sf_open fname 16 info))
	  (channels (i32toi64 (tref info 2)))
	  (num (if (= 0 lgth)
		   (* (- (tref info 0) offset) channels)
		   (* lgth channels))))
      (if (<> null audiofile)
	  (let ((adat:double* (halloc (* num 2)))
		(samples:|128,double*|* (inst.samples))
		(samples_channels:|128,i64|* (inst.samples_channels))
		(samples_length:|128,i64|* (inst.samples_length))
		(samples_read (read_audio_data fname adat (* offset channels) num))
		(olddat (if (<> 0 (pref samples_length index))
			    (bitcast (pref samples index) i8*)
			    null)))
            (printf "%lld samples read" samples_read)
	    (pset! samples_length index (/ samples_read channels)) ;num)
	    (pset! samples_channels index channels)
	    (pset! samples index adat)
	    ;; the following line is a problem on windows and needs to be fixed!
                                        ; (free_after_delay olddat (* 10.0 44100.0)))
	    (printf "%s:\t%lld(channels) %lld(frames):%f(k)\t\tinto index:%lld\n"
                    fname channels (/ samples_read channels)
                    (/ (i64tod (* num 8)) 1024.) index)
	    (sf_close audiofile)
	    1)
	  (begin (printf "%s\n" (sf_strerror audiofile))
		 0)))))

;; passing a length of 0 will read the whole file
(define-macro (set-sampler-index inst fname index offset lgth)
  `(let ((native (llvm:get-native-closure ,(symbol->string inst))))
     (if (cptr? native)
         (set_sample_data_ native
                           ,fname
                           (real->integer ,index)
                           (real->integer ,offset)
                           (real->integer ,lgth)))))


;; helper functions for setting an individual samples offset
;; i.e. set sample index 60 to start at 40000 samples into the audio buffer
(bind-func set_sample_offset_
  (lambda (sampler:[double,double,double,double*]* index:i64 offset:i64)
    (let ((offsets:|128,i64|* (sampler.samples_offsets)))
      (pset! offsets index offset)
      1)))


;; (set-sample-offset sampler 60 50000)
;; this would offset the sample at index 60 by 50000 samples
(define-macro (set-sample-offset inst index offset)
  `(let ((native (llvm:get-native-closure ,(symbol->string inst))))
     (if (cptr? native)
	 (set_sample_offset_ native
			     (real->integer ,index)
			     (real->integer ,offset)))))

;; linear sampler
;;
;; faster but noisy
(bind-func sampler_note_linear_c
  (lambda (samples:|128,double*|* samples_length:|128,i64|* samples_offsets:|128,i64|* index)
    (let ((idx_freq (midi2frq (i64tod index)))
	  (phase (i64tod (pref samples_offsets index)))) ;; phase unit is audio frames
      (lambda (time:double chan:double freq:double amp:double)
	(let ((rate (/ freq idx_freq))
	      (pos (if (< chan 1.0) ;; only increment once per frame
		       (set! phase (+ phase rate))
		       phase))
	      (posi (dtoi64 (floor pos)))
	      (posx (+ (* posi 2) (dtoi64 chan)))
	      (lgth (- (pref samples_length index) 10))
	      (dat (pref samples index)))
	  (* amp (if (> posi lgth) 0.0 (pref dat posx))))))))



;; ;; hermite sampler (stereo version)
;; ;;
;; ;; slower but less noisy (default)
;; (bind-func sampler_note_hermite_c
;;   (lambda (samples:|128,double*|* samples_length:|128,i64|* samples_offsets:|128,i64|* index)
;;     (let ((idx_freq (midi2frq (i64tod index)))
;; 	  (phase (i64tod (pref samples_offsets index)))) ;; phase unit is audio frames
;;       (lambda (time:double chan:double freq:double amp:double)
;; 	(let ((rate (/ freq idx_freq))
;; 	      (pos (if (< chan 1.0) ;; only increment once per frame
;; 		       (set! phase (+ phase rate))
;; 		       phase))
;; 	      (posi (dtoi64 (floor pos)))
;; 	      (posx (+ (* posi 2) (dtoi64 chan)))
;; 	      (length (- (pref samples_length index) 10))
;; 	      (dat (pref samples index)))
;; 	  (if (< (fabs (- rate 1.0)) 0.01)
;; 	      (if (> posi length) 0.0 (* amp (pref dat posx)))
;; 	      (let ((y1 (if (or (> posi length) (< posi 1)) 0.0 (pref dat (- posx 2)))) ; assume stereo
;; 		    (x0 (if (> posi length) 0.0 (pref dat posx)))
;; 		    (x1 (if (> (+ posi 1) length) 0.0 (pref dat (+ posx 2)))) ; assume stereo
;; 		    (x2 (if (> (+ posi 2) length) 0.0 (pref dat (+ posx 4))))) ; assume stereo
;; 		(* amp (hermite_interp (modulo pos 1.0) y1 x0 x1 x2)))))))))


;; hermite sampler  (multi-channels version)
;;
;; slower but less noisy (default)
(bind-func sampler_note_hermite_c
  (lambda (samples:|128,double*|* samples_length:|128,i64|* samples_offsets:|128,i64|* samples_channels:|128,i64|* index)
    (let ((idx_freq (midi2frq (i64tod index)))
	  (channels (pref samples_channels index))
	  (phase (i64tod (pref samples_offsets index)))) ;; phase unit is audio frames
      (lambda (time:double chan:double freq:double amp:double)
	(let ((rate (/ freq idx_freq))
	      (pos (if (< chan 1.0) ;; only increment once per frame
		       (set! phase (+ phase rate))
		       phase))
	      (posi (dtoi64 (floor pos)))
	      (posx (+ (* posi channels) (if (< (dtoi64 chan) channels) (dtoi64 chan) 0)))
	      (lgth (- (pref samples_length index) 10))
	      (dat (pref samples index)))
	  (if (< (fabs (- rate 1.0)) 0.01)
	      (if (> posi lgth) 0.0 (* amp (pref dat posx)))
	      (let ((y1 (if (or (> posi lgth) (< posi 1)) 0.0 (pref dat (- posx channels))))
		    (x0 (if (> posi lgth) 0.0 (pref dat posx)))
		    (x1 (if (> (+ posi 1) lgth) 0.0 (pref dat (+ posx channels))))
		    (x2 (if (> (+ posi 2) lgth) 0.0 (pref dat (+ posx (* 2 channels))))))
		(* amp (hermite_interp (modulo pos 1.0) y1 x0 x1 x2)))))))))


(bind-func sampler_fx 400000
           (let ((reverbl (reverb_c 80.0))
                 (reverbr (reverb_c 79.0))
                 (pan .5)
                 (pan_ pan)
                 (wet .25)
                 (wet_ wet))
             ;; some reverb?
             (reverbl.wet wet)
             (reverbr.wet wet)
             (lambda (in:double time:double chan:double dat:double*)
               (if (<> wet wet_)
                   (begin (reverbl.wet wet)
                          (reverbr.wet wet)
                          (set! wet_ wet)))
               (if (< pan pan_)
                   (set! pan_ (- pan_ .001))
                   (set! pan_ (+ pan_ .001)))
               (if (< chan 1.0)
                   (reverbl (* 1.5 (* pan_ in)))
                   (reverbr (* 1.5 (* (- 1.0 pan_) in)))))))


;; make sampler instrument
(define-macro (define-sampler name note_kernel effect_kernel)
  `(bind-func ,name
     (let ((poly:i64 48)
           (samples:|128,double*|* (zalloc)) ;; 128 samples
           (samples_length:|128,i64|* (zalloc)) ;; 128 samples
           (samples_channels:|128,i64|* (zalloc)) ;; 128 samples
           (samples_offsets:|128,i64|* (zalloc)) ;; 128 samples
           (notes:[double,double,double,double]** (zalloc poly))
           (attack:double 200.0)
           (decay:double 200.0)
           (release:double 1000.0)
           (sustain:double 1.0) ;; amplitude of the sustain
           (gain:double 2.0)
           (kk:i64 0) (ii:i64 0)
           ;;(active:i64 0)
           (note_starts:double* (zalloc poly))
           (new_note (lambda (start freq dur amp)
                       (let ((free_note:i64 -1)
                             (idx (dtoi64 (floor (frq2midi freq))))
                             (closest 1000000)
                             (i:i64 0) (iii:i64 0) (idxi:i64 0)
                             (new_idx idx))
                         (dotimes (i poly) ;; check for free poly spot
                           (if (> (pref note_starts i) 9999999999998.0)
                               (set! free_note i)))
                         ;; (if (= 0 active)
                         ;;     (begin (dotimes (iii poly)
                         ;; 	       (pset! note_starts iii 9999999999999.0))
                         ;; 	     (set! free_note -1)))
                         (if (> free_note -1) ;; if we found a free poly spot assign a note
                             (begin (dotimes (idxi 128)
                                      (let ((v (llabs (- idx idxi))))
                                        (if (and (<> (aref samples_length idxi) 0)
                                                 (< v closest))
                                            (begin (set! new_idx idxi)
                                                   (set! closest v) 0))))
                                    (let ((note_zone (push_zone (* 1024 10))))
                                      (pset! notes free_note
                                             (note_c start freq amp dur
                                                        attack decay release sustain
                                                        note_starts free_note
                                                        (,note_kernel samples samples_length samples_offsets samples_channels new_idx)
                                                        note_zone))
                                      (pset! note_starts free_note start)
                                      (pop_zone))
                                    1)
                             0)))))
       (dotimes (kk 128)
	 (aset! samples_offsets kk 0)
	 (aset! samples_length kk 0))
       (dotimes (ii poly) ;; sets all notes to inactive
	 (pset! note_starts ii 9999999999999.0))
       (lambda (in:double time:double chan:double dat:double*)
	 (let ((out:double 0.0)
	       (k:i64 0))
	   (dotimes (k poly) ;; sum all active notesx
	     (if (< (pref note_starts k) time)
		 (set! out (+ out (* 0.3 ((pref notes k) in time chan))))))
	   (* gain (,effect_kernel out time chan dat)))))))


;; load-sampler now requires you to supply your own function for
;; parsing the sample metadata from the sample names

;; the supplied function (parser) takes one argument: a list of the
;; files in the directory (the sample name) and
;; return a list of four-element lists: filename, midi note number,
;; sample offset and sample length (or 0 for the whole sample).

;; As an example, if the directory contains the files:
;; ("A1.wav" "B1.wav" "C2.wav" ...)

;; the parser function should return the list
;; (("A1.wav" 33 0 0)
;;  ("B1.wav" 35 0 0)
;;  ("C2.wav" 36 0 0))

;; must be stereo samples of type wav aif or ogg
(define-macro (load-sampler sampler path parser)
  `(let ((file-list (sys:directory-list ,path)))
     (for-each (lambda (samp-data)
                 (if samp-data
                     (set-sampler-index ,sampler
                                        (if (string=? (sys:platform) "Windows")
                                            (car samp-data)
                                            (string-append ,path "/" (car samp-data)))
                                        (cadr samp-data)
                                        (caddr samp-data)
                                        (cadddr samp-data))))
	       (,parser file-list))))

;; as a start, here are a couple of parser functions which might be useful:

(define note-name-to-midi-number
  (lambda (name)
    (let ((result (regex:matched name "([ABCDEFG])([#b])?(-?[0-9])")))
        (if (null? result)
            #f
            (let ((offset (+ 12 (* (string->number (cadddr result)) 12)))
                  (pc (case (modulo (- (modulo (char->integer (car (string->list (cadr result)))) 16) 3) 7)
                        ((0) 0) ((1) 2) ((2) 4) ((3) 5) ((4) 7) ((5) 9) ((6) 11))))
              (+ offset pc
                 (cond ((string=? (caddr result) "#") 1)
                       ((string=? (caddr result) "b") -1)
                       (else 0))))))))

;; this will match e.g. 60.aiff (where 60 is the midi note number)
(define parse-sample-names-1
  (lambda (file-list)
    (map (lambda (fname)
           (let ((result (regex:matched fname "([0-9]*)\.(wav|aif|aiff|ogg)$")))
             (if (null? result)
                 (begin (println 'Error: 'cannot 'parse 'filename: fname)
                        #f)
                 (list fname                          ; filename    
                       (string->number (cadr result)) ; midi note number
                       0                              ; offset
                       0))))                          ; length (0 for whole sample)
         file-list)))

;; this will match e.g. Eb3.aiff (representing E flat 3)
(define parse-sample-names-2
  (lambda (file-list)
    (map (lambda (fname)
           (let ((result (regex:matched fname "^.*([ABCDEFG][#b]?[0-9]).*\.(wav|aif|aiff|ogg)$")))
             (if (null? result)
                 (begin (println 'Error: 'cannot 'parse 'filename: fname)
                        #f)
                 (list fname                                    ; filename                   
                       (note-name-to-midi-number (cadr result)) ; midi note number           
                       0                                        ; offset                     
                       0))))                                    ; length (0 for whole sample)
         file-list)))

;; for the MIS piano samples (mf loudness only), avaliable from
;; http://theremin.music.uiowa.edu/MISpiano.html
(define parse-MIS-piano-mf
  (lambda (file-list)
    (map (lambda (samp-data)
           (if (and samp-data
                    (regex:match? (car samp-data) ".*\.mf\..*"))
               samp-data
               #f))
         (parse-sample-names-2 file-list))))

(define parse-MIS-piano-ff
  (lambda (file-list)
    (map (lambda (samp-data)
           (if (and samp-data
                    (regex:match? (car samp-data) ".*\.ff\..*"))
               samp-data
               #f))
         (parse-sample-names-2 file-list))))

;; for NI Akoustik piano samples
;; Stein-R(A-1)-V(077)-dB(3129)-T(ML)-M(22)-P(1956-04-01).WAV
(define parse-NI-piano-pp
  (lambda (file-list)
    (let loop ((unparsed-files file-list)
               (samp-data-list '())
               (loaded-notes '()))
      (if (null? unparsed-files)
          samp-data-list
          (let ((result (regex:matched (car unparsed-files)
                                       ".*-R\\(([ABCDEFG][#b]?-?[0-9])\\)-.*-M\\(([0-9]*)\\)-.*")))
            (if (null? result)
                (loop (cdr unparsed-files) samp-data-list loaded-notes)
                (if (member (cadr result) loaded-notes)
                    (loop (cdr unparsed-files) samp-data-list loaded-notes)
                    (loop (cdr unparsed-files)
                          (cons (list (car unparsed-files)
                                      (+ 12 (note-name-to-midi-number (cadr result)))
                                      0 0)
                                samp-data-list)
                          (cons (cadr result) loaded-notes)))))))))

;; General MIDI drum note numbers

(define *gm-kick* 35)
(define *gm-kick-2* 36)
(define *gm-side-stick* 37)
(define *gm-snare* 38)
(define *gm-hand-clap* 39)
(define *gm-snare-2* 40)
(define *gm-low-floor-tom* 41)
(define *gm-closed-hi-hat* 42)
(define *gm-hi-floor-tom* 43)
(define *gm-pedal-hi-hat* 44)
(define *gm-low-tom* 45)
(define *gm-open-hi-hat* 46)
(define *gm-low-mid-tom* 47)
(define *gm-hi-mid-tom* 48)
(define *gm-crash* 49)
(define *gm-hi-tom* 50)
(define *gm-ride* 51)
(define *gm-chinese* 52)
(define *gm-ride-bell* 53)
(define *gm-tambourine* 54)
(define *gm-splash* 55)
(define *gm-cowbell* 56)
(define *gm-crash-2* 57)
(define *gm-vibraslap* 58)
(define *gm-ride-2* 59)
(define *gm-hi-bongo* 60)
(define *gm-low-bongo* 61)
(define *gm-mute-hi-conga* 62)
(define *gm-hi-conga* 63)
(define *gm-low-conga* 64)
(define *gm-hi-timbale* 65)
(define *gm-low-timbale* 66)
(define *gm-hi-agogo* 67)
(define *gm-low-agogo* 68)
(define *gm-cabasa* 69)
(define *gm-maracas* 70)
(define *gm-short-whistle* 71)
(define *gm-long-whistle* 72)
(define *gm-short-guiro* 73)
(define *gm-long-guiro* 74)
(define *gm-claves* 75)
(define *gm-hi-wood-block* 76)
(define *gm-low-wood-block* 77)
(define *gm-mute-cuica* 78)
(define *gm-open-cuica* 79)
(define *gm-mute-triangle* 80)
(define *gm-open-triangle* 81)
(define *gm-mute-surdo* 86)
(define *gm-open-surdo* 87)

(define *gm-drum-map-alist*
  '(("kick" . 35)
    ("kick-2" . 36)
    ("side-stick" . 37)
    ("snare" . 38)
    ("hand-clap" . 39)
    ("snare-2" . 40)
    ("low-floor-tom" . 41)
    ("closed-hi-hat" . 42)
    ("hi-floor-tom" . 43)
    ("pedal-hi-hat" . 44)
    ("low-tom" . 45)
    ("open-hi-hat" . 46)
    ("low-mid-tom" . 47)
    ("hi-mid-tom" . 48)
    ("crash" . 49)
    ("hi-tom" . 50)
    ("ride" . 51)
    ("chinese" . 52)
    ("ride-bell" . 53)
    ("tambourine" . 54)
    ("splash" . 55)
    ("cowbell" . 56)
    ("crash-2" . 57)
    ("vibraslap" . 58)
    ("ride-2" . 59)
    ("hi-bongo" . 60)
    ("low-bongo" . 61)
    ("mute-hi-conga" . 62)
    ("hi-conga" . 63)
    ("low-conga" . 64)
    ("hi-timbale" . 65)
    ("low-timbale" . 66)
    ("hi-agogo" . 67)
    ("low-agogo" . 68)
    ("cabasa" . 69)
    ("maracas" . 70)
    ("short-whistle" . 71)
    ("long-whistle" . 72)
    ("short-guiro" . 73)
    ("long-guiro" . 74)
    ("claves" . 75)
    ("hi-wood-block" . 76)
    ("low-wood-block" . 77)
    ("mute-cuica" . 78)
    ("open-cuica" . 79)
    ("mute-triangle" . 80)
    ("open-triangle" . 81)
    ("mute-surdo" . 86)
    ("open-surdo" . 87)))
