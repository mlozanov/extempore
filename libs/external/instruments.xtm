;;; instruments.xtm -- instruments (external)

;; Author: Andrew Sorensen, Ben Swift
;; Keywords: extempore
;; Required dylibs: libsndfile

;;; Commentary:

;; This is for instruments which rely on external (that is, C)
;; libraries.
;;
;; The main external instrument is the sampler, which depends on
;; libsndfile to read the samples from the disk into its sample
;; buffers. But over time other instruments which depend on external
;; libraries will be added in here too.

;;; Code:

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; SAMPLER
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(load "libs/core/audio_dsp.xtm")
(load "libs/external/sndfile.xtm")

;; helper function for adding sample data to sampler
;; this assumes stereo files at the moment!!
;; passing 0 for length means read to end of file.
;;
;; for example:
;; ;; this reads the whole file into index 60
;; (set-sampler-data sampler "/tmp/piano-C.aif" 60 0 0)
;; ;; this reads 5000 frames starting 1000 frames into the file
;; (set-sampler-data sampler "/tmp/piano-C.aif" 60 1000 5000)
(bind-func set-sample-data_
  (lambda (inst:[double,double,double,double*]* fname index offset lgth)
    (let ((info:sf_info* (zalloc))
	  (audiofile (sf_open fname 16 info))
	  (channels (i32toi64 (tref info 2)))
	  (num (if (= 0 lgth)
		   (* (- (tref info 0) offset) channels)
		   (* lgth channels))))
      (if (<> null audiofile)
	  (let ((adat:double* (halloc (* num 2)))
		(samples:|128,double*|* (inst.samples))
		(samples-channels:|128,i64|* (inst.samples-channels))
		(samples-length:|128,i64|* (inst.samples-length))
		(samples-read (read-audio-data fname adat (* offset channels) num))
		(olddat (if (<> 0 (pref samples-length index))
			    (bitcast (pref samples index) i8*)
			    null)))
            (printf "%lld samples read" samples-read)
	    (pset! samples-length index (/ samples-read channels)) ;num)
	    (pset! samples-channels index channels)
	    (pset! samples index adat)
	    ;; the following line is a problem on windows and needs to be fixed!
                                        ; (free_after_delay olddat (* 10.0 44100.0)))
	    (printf "%s:\t%lld(channels) %lld(frames):%f(k)\t\tinto index:%lld\n"
                    fname channels (/ samples-read channels)
                    (/ (i64tod (* num 8)) 1024.) index)
	    (sf_close audiofile)
	    1)
	  (begin (printf "%s\n" (sf_strerror audiofile))
		 0)))))

;; passing a length of 0 will read the whole file
(define-macro (set-sampler-index inst fname index offset lgth)
  `(let ((native (llvm:get-native-closure ,(symbol->string inst))))
     (if (cptr? native)
         (set-sample-data_ native
                           ,fname
                           (real->integer ,index)
                           (real->integer ,offset)
                           (real->integer ,lgth)))))


;; helper functions for setting an individual samples offset
;; i.e. set sample index 60 to start at 40000 samples into the audio buffer
(bind-func set-sample-offset_
  (lambda (sampler:[double,double,double,double*]* index:i64 offset:i64)
    (let ((offsets:|128,i64|* (sampler.samples-offsets)))
      (pset! offsets index offset)
      1)))


;; (set-sample-offset sampler 60 50000)
;; this would offset the sample at index 60 by 50000 samples
(define-macro (set-sample-offset inst index offset)
  `(let ((native (llvm:get-native-closure ,(symbol->string inst))))
     (if (cptr? native)
	 (set-sample-offset_ native
			     (real->integer ,index)
			     (real->integer ,offset)))))

;; linear sampler
;;
;; faster but noisy
(bind-func sampler-note-linear
  (lambda (samples:|128,double*|* samples-length:|128,i64|* samples-offsets:|128,i64|* index)
    (let ((idx-freq (midi2frq (i64tod index)))
	  (phase (i64tod (pref samples-offsets index)))) ;; phase unit is audio frames
      (lambda (time:double chan:double freq:double amp:double)
	(let ((rate (/ freq idx-freq))
	      (pos (if (< chan 1.0) ;; only increment once per frame
		       (set! phase (+ phase rate))
		       phase))
	      (posi (dtoi64 (floor pos)))
	      (posx (+ (* posi 2) (dtoi64 chan)))
	      (lgth (- (pref samples-length index) 10))
	      (dat (pref samples index)))
	  (* amp (if (> posi lgth) 0.0 (pref dat posx))))))))



;; ;; hermite sampler (stereo version)
;; ;;
;; ;; slower but less noisy (default)
;; (bind-func sampler-note-hermite
;;   (lambda (samples:|128,double*|* samples-length:|128,i64|* samples-offsets:|128,i64|* index)
;;     (let ((idx-freq (midi2frq (i64tod index)))
;; 	  (phase (i64tod (pref samples-offsets index)))) ;; phase unit is audio frames
;;       (lambda (time:double chan:double freq:double amp:double)
;; 	(let ((rate (/ freq idx-freq))
;; 	      (pos (if (< chan 1.0) ;; only increment once per frame
;; 		       (set! phase (+ phase rate))
;; 		       phase))
;; 	      (posi (dtoi64 (floor pos)))
;; 	      (posx (+ (* posi 2) (dtoi64 chan)))
;; 	      (length (- (pref samples-length index) 10))
;; 	      (dat (pref samples index)))
;; 	  (if (< (fabs (- rate 1.0)) 0.01)
;; 	      (if (> posi length) 0.0 (* amp (pref dat posx)))
;; 	      (let ((y1 (if (or (> posi length) (< posi 1)) 0.0 (pref dat (- posx 2)))) ; assume stereo
;; 		    (x0 (if (> posi length) 0.0 (pref dat posx)))
;; 		    (x1 (if (> (+ posi 1) length) 0.0 (pref dat (+ posx 2)))) ; assume stereo
;; 		    (x2 (if (> (+ posi 2) length) 0.0 (pref dat (+ posx 4))))) ; assume stereo
;; 		(* amp (hermite-interp (modulo pos 1.0) y1 x0 x1 x2)))))))))


;; hermite sampler  (multi-channels version)
;;
;; slower but less noisy (default)
(bind-func sampler-note-hermite
  (lambda (samples:|128,double*|* samples-length:|128,i64|* samples-offsets:|128,i64|* samples-channels:|128,i64|* index)
    (let ((idx-freq (midi2frq (i64tod index)))
	  (channels (pref samples-channels index))
	  (phase (i64tod (pref samples-offsets index)))) ;; phase unit is audio frames
      (lambda (time:double chan:double freq:double amp:double)
	(let ((rate (/ freq idx-freq))
	      (pos (if (< chan 1.0) ;; only increment once per frame
		       (set! phase (+ phase rate))
		       phase))
	      (posi (dtoi64 (floor pos)))
	      (posx (+ (* posi channels) (if (< (dtoi64 chan) channels) (dtoi64 chan) 0)))
	      (lgth (- (pref samples-length index) 10))
	      (dat (pref samples index)))
	  (if (< (fabs (- rate 1.0)) 0.01)
	      (if (> posi lgth) 0.0 (* amp (pref dat posx)))
	      (let ((y1 (if (or (> posi lgth) (< posi 1)) 0.0 (pref dat (- posx channels))))
		    (x0 (if (> posi lgth) 0.0 (pref dat posx)))
		    (x1 (if (> (+ posi 1) lgth) 0.0 (pref dat (+ posx channels))))
		    (x2 (if (> (+ posi 2) lgth) 0.0 (pref dat (+ posx (* 2 channels))))))
		(* amp (hermite-interp (modulo pos 1.0) y1 x0 x1 x2)))))))))


(bind-func sampler-fx 400000
           (let ((reverbl (make-reverb 80.0))
                 (reverbr (make-reverb 79.0))
                 (pan .5)
                 (pan_ pan)
                 (wet .25)
                 (wet_ wet))
             ;; some reverb?
             (reverbl.wet wet)
             (reverbr.wet wet)
             (lambda (in:double time:double chan:double dat:double*)
               (if (<> wet wet_)
                   (begin (reverbl.wet wet)
                          (reverbr.wet wet)
                          (set! wet_ wet)))
               (if (< pan pan_)
                   (set! pan_ (- pan_ .001))
                   (set! pan_ (+ pan_ .001)))
               (if (< chan 1.0)
                   (reverbl (* 1.5 (* pan_ in)))
                   (reverbr (* 1.5 (* (- 1.0 pan_) in)))))))


;; make sampler instrument
(define-macro (define-sampler name note-kernel effect-kernel)
  `(bind-func ,name
     (let ((poly:i64 48)
           (samples:|128,double*|* (zalloc)) ;; 128 samples
           (samples-length:|128,i64|* (zalloc)) ;; 128 samples
           (samples-channels:|128,i64|* (zalloc)) ;; 128 samples
           (samples-offsets:|128,i64|* (zalloc)) ;; 128 samples
           (notes:[double,double,double,double]** (zalloc poly))
           (attack:double 200.0)
           (decay:double 200.0)
           (release:double 1000.0)
           (sustain:double 1.0) ;; amplitude of the sustain
           (gain:double 2.0)
           (kk:i64 0) (ii:i64 0)
           ;;(active:i64 0)
           (note-starts:double* (zalloc poly))
           (new-note (lambda (start freq dur amp)
                       (let ((free-note:i64 -1)
                             (idx (dtoi64 (floor (frq2midi freq))))
                             (closest 1000000)
                             (i:i64 0) (iii:i64 0) (idxi:i64 0)
                             (new-idx idx))
                         (dotimes (i poly) ;; check for free poly spot
                           (if (> (pref note-starts i) 9999999999998.0)
                               (set! free-note i)))
                         ;; (if (= 0 active)
                         ;;     (begin (dotimes (iii poly)
                         ;; 	       (pset! note-starts iii 9999999999999.0))
                         ;; 	     (set! free-note -1)))
                         (if (> free-note -1) ;; if we found a free poly spot assign a note
                             (begin (dotimes (idxi 128)
                                      (let ((v (llabs (- idx idxi))))
                                        (if (and (<> (aref samples-length idxi) 0)
                                                 (< v closest))
                                            (begin (set! new-idx idxi)
                                                   (set! closest v) 0))))
                                    (let ((note_zone (push_zone (* 1024 10))))
                                      (pset! notes free-note
                                             (make-note start freq amp dur
                                                        attack decay release sustain
                                                        note-starts free-note
                                                        (,note-kernel samples samples-length samples-offsets samples-channels new-idx)
                                                        note_zone))
                                      (pset! note-starts free-note start)
                                      (pop_zone))
                                    1)
                             0)))))
       (dotimes (kk 128)
	 (aset! samples-offsets kk 0)
	 (aset! samples-length kk 0))
       (dotimes (ii poly) ;; sets all notes to inactive
	 (pset! note-starts ii 9999999999999.0))
       (lambda (in:double time:double chan:double dat:double*)
	 (let ((out:double 0.0)
	       (k:i64 0))
	   (dotimes (k poly) ;; sum all active notesx
	     (if (< (pref note-starts k) time)
		 (set! out (+ out (* 0.3 ((pref notes k) in time chan))))))
	   (* gain (,effect-kernel out time chan dat)))))))


;; load-sampler now requires you to supply your own function for parsing
;; the midi note numbers out of the sample names in the directory

;; the supplied function should take one argument (the sample name) and
;; return a list with two elements: first element is the sample name, and
;; the second element is the midi note number.  If no suitable number can
;; be parsed from the sample name the function should return false.

;; as a start, here are a couple of parser functions which might be useful:

;; this will match e.g. 60.aiff (where 60 is the midi note number)
(define parse-sample-name-1
  (lambda (fname)
    (let ((result (regex:matched fname "([0-9]*)\.(wav|aif|aiff|ogg)$")))
      (if (null? result)
          (begin (println "Error: cannot parse filename: " fname)
                 #f)
          (list fname (string->number (cadr result)))))))

;; this will match e.g. Eb3.aiff (representing E flat 3)
(define parse-sample-name-2
  (lambda (fname)
    (let ((result (regex:matched fname "^.*([ABCDEFG])([#b])?([0-9]).*\.(wav|aif|aiff|ogg)$")))
        (if (null? result)
            (begin (println "Error: cannot parse filename: " fname)
                   #f)
            (let ((offset (+ 12 (* (string->number (cadddr result)) 12)))
                  (pc (case (modulo (- (modulo (char->integer (car (string->list (cadr result)))) 16) 3) 7)
                        ((0) 0) ((1) 2) ((2) 4) ((3) 5) ((4) 7) ((5) 9) ((6) 11))))
              (list fname (+ offset pc
                             (cond ((string=? (caddr result) "#") 1)
                                   ((string=? (caddr result) "b") -1)
                                   (else 0)))))))))

;; for the MIS piano samples (mf loudness only), avaliable from
;; http://theremin.music.uiowa.edu/MISpiano.html
(define parse-MIS-piano-mf
  (lambda (fname)
    (let ((result (parse-sample-name-2 fname)))
      (and result
           (and (regex:match? (car result) ".*\.mf\..*")
                result)))))

;; for NI Akoustik piano samples
;; Stein-R(A-1)-V(077)-dB(3129)-T(ML)-M(22)-P(1956-04-01).WAV

;; insert NI parser function here

;; must be stereo samples of type wav aif or ogg
(define-macro (load-sampler sampler path parser offset length)
  `(let* ((file-list (sys:directory-list ,path))
          (offset-list ,(if (number? offset)
                            `(make-list (length file-list) ,offset)
                            offset))
          (length-list ,(if (number? length)
                            `(make-list (length file-list) ,length)
                            length)))
     (for-each (lambda (f o l)
                 (let ((result (,parser f)))
                   (if result
                       (set-sampler-index ,sampler
                                          (if (string=? (sys:platform) "Windows")
                                              (car result)
                                              (string-append ,path "/" (car result)))
                                          (cadr result) o l))))
	       file-list
               offset-list
               length-list)))
