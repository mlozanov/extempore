;;; shaders.xtm -- GL shaders

;; Author: Andrew Sorensen
;; Keywords: extempore
;; Required dylibs: openGL

;;; Commentary:

;; 

;;; Code:


;; if not primary process
(if (not (ipc:get-process-name "primary"))
    (sys:load-escape "Please load xtm libraries into the primary process"))
;; if already loaded then break!
(if (defined? 'xtmlib_shaders_loaded)
    (sys:load-escape "Shaders already loaded")) ;; break to top level

(sys:load "libs/external/opengl.xtm")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; GLOBAL to let other libraries know that
;; math.xtm has already been loaded
;; 
(define xtmlibs_shaders_loaded #t)

;; draw a quad
;; tw and th are framebuffer width and height
(bind-func gl_draw_shader_quad
  (lambda (x y w h r tw th)
    (let ((hx (* -0.5 w))
	  (hy (* -0.5 h))
	  (xx (+ x (* .5 w)))
	  (yy (+ y (* .5 h))))
      (glPushMatrix)
      (glTranslated xx yy 0.0)
      (glRotated r 0.0 0.0 1.0)
      (glBegin GL_QUADS)
      (glTexCoord2d 0.0 0.0)
      (glVertex2d hx hy)
      (glTexCoord2d 0.0 th)
      (glVertex2d hx (+ hy h))
      (glTexCoord2d tw th)
      (glVertex2d (+ hx w) (+ hy h))
      (glTexCoord2d tw 0.0)
      (glVertex2d (+ hx w) hy)
      (glTexCoord2d 0.0 0.0)
      (glEnd)
      (glPopMatrix)
      void)))


;; matrix should be float* 5x5
(bind-func shader_set_grid_offsets
  (lambda (matrix:float* width:float height:float factor:float)
    (let ((xinc:float (/ factor width))
	  (yinc:float (/ factor height))
	  (i 0) (j 0))
      (dotimes (i 5) ;; columns
	(dotimes (j 5) ;; rows
	  (pset! matrix (+ (* (+ (* i 5) j) 2) 0)
		 (+ (* -2.0 xinc)
		    (* (i32tof i) xinc)))
	  (pset! matrix (+ (* (+ (* i 5) j) 2) 1)
		 (+ (* -2.0 xinc)
		    (* (i32tof i) yinc)))))
      void)))


;; matrix should be float* 5x5
(bind-func shader_setup_convolution_filter
  (lambda (matrix:float* shader offset)
    (shader_set_grid_offsets matrix 1.0 1.0 offset) ;(* 2.0 (dtof (cos (* 2222.2 (i64tod (now)))))))
    (glUniform2fv (glGetUniformLocation shader "texoffset") 25 matrix)
    (glUniform1i (glGetUniformLocation shader "tex1") 0)))


(bind-func shader_update_camera
  (lambda (shader:i32 position target)
    (let ((direction:float* (salloc 8))
          (tmp:float* (pref-ptr direction 4)))
      (vsub position target 3 tmp)
      (vnorm tmp 3 direction)
      (pset! direction 3 0.0)
      (glUniform4fv (glGetUniformLocation shader "CameraPos") 1 position)
      (glUniform4fv (glGetUniformLocation shader "CameraDir") 1 direction)
      void)))

(bind-func shader_update_light
  (lambda (shader:i32 position target angle power:float ambient diffuse specular)
    ;(vprint position 4)
    ;(vprint target 4)
    (glUniform1f (glGetUniformLocation shader "ConstantAttenuation") 1.0)
    (glUniform1f (glGetUniformLocation shader "LinearAttenuation") 0.0)
    (glUniform1f (glGetUniformLocation shader "QuadraticAttenuation") 0.0)
    (glUniform1f (glGetUniformLocation shader "SpotExponent") power)
    (glUniform1f (glGetUniformLocation shader "SpotAngle") (- 1.0 (/ angle 180.0)))    
    (glUniform4fv (glGetUniformLocation shader "LightPos") 1 position)
    (glUniform4fv (glGetUniformLocation shader "LightAmbient") 1 ambient)
    (glUniform4fv (glGetUniformLocation shader "LightSpecular") 1 specular)
    (glUniform4fv (glGetUniformLocation shader "LightDiffuse") 1 diffuse)
    (let ((direction:float* (salloc 4))
          (tmp:float* (salloc 4)))
      (vsub target position 3 tmp)
      (vnorm tmp 3 direction)
      (pset! direction 3 0.0)
      (glUniform4fv (glGetUniformLocation shader "SpotDir") 1 direction))
    void))

;; when working with OpenGL
;; extempore's mmul is pre mutipled (not post as in GLSL)
;; so the same matrix mul is post in GLSL and pre in XTM (i.e. here!)
(bind-func shader_update_matrices
  (lambda (id:i32 m v p)
    (let ((mv (salloc 48))
          (mvp (pref-ptr mv 16))
          (mn (pref-ptr mv 32)))
      (mmul m 4 4 v 4 4 mv) ;; final mv set
      (mtrans mv 4 4 mn) ;; using mn as a temporary here!!
      (minv mn 4 mvp) ;; using mvp as a temporary      
      (mat4_to_mat3 mvp mn)  ;; final mn set
      (mmul mv 4 4 p 4 4 mvp) ;; final mvp set
      (glUniformMatrix4fv (glGetUniformLocation id "ModelMatrix") 1 GL_FALSE m)
      (glUniformMatrix4fv (glGetUniformLocation id "ViewMatrix") 1 GL_FALSE v)
      (glUniformMatrix4fv (glGetUniformLocation id "ProjectionMatrix") 1 GL_FALSE p)
      (glUniformMatrix3fv (glGetUniformLocation id "NormalMatrix") 1 GL_FALSE mn)      
      (glUniformMatrix4fv (glGetUniformLocation id "ModelViewMatrix") 1 GL_FALSE mv)
      (glUniformMatrix4fv (glGetUniformLocation id "ModelViewProjectionMatrix") 1 GL_FALSE mvp)
      void)))

;; when working with OpenGL
;; extempore's mmul is pre mutipled (not post as in GLSL)
;; so the same matrix mul is post in GLSL and pre in XTM (i.e. here!)
(bind-func shader_update_matrices_lv
  (let ((biasmc:float* (alloc 16))
        (biasmr:float* (alloc 16)))
    (pfill! biasmc
            0.5 0.0 0.0 0.0
            0.0 0.5 0.0 0.0
            0.0 0.0 0.5 0.0
            0.5 0.5 0.5 1.0)    
    (pfill! biasmr
            0.5 0.0 0.0 0.5
            0.0 0.5 0.0 0.5
            0.0 0.0 0.5 0.5
            0.0 0.0 0.0 1.0)   
    (lambda (id:i32 m:float* v p:float* lv:float*) ;; lv light view
      (let ((mlv:float* (salloc 16))
            (mlvp:float* (salloc 16))
            (mlvpb:float* (salloc 16)))
        (mmul m 4 4 lv 4 4 mlv)
        (mmul mlv 4 4 p 4 4 mlvp)
        (mmul mlvp 4 4 biasmc 4 4 mlvpb)
        (glUniformMatrix4fv (glGetUniformLocation id "LightModelViewProjectionMatrix") 1 GL_FALSE mlvpb))
      (let ((mv (salloc 48))
            (mvp (pref-ptr mv 16))
            (mn (pref-ptr mv 32)))
        (mmul m 4 4 v 4 4 mv) ;; final mv set
        (mtrans mv 4 4 mn) ;; using mn as a temporary here!!
        (minv mn 4 mvp) ;; using mvp as a temporary      
        (mat4_to_mat3 mvp mn)  ;; final mn set
        (mmul mv 4 4 p 4 4 mvp) ;; final mvp set
        (glUniformMatrix4fv (glGetUniformLocation id "ModelMatrix") 1 GL_FALSE m)
        (glUniformMatrix4fv (glGetUniformLocation id "ViewMatrix") 1 GL_FALSE v)
        (glUniformMatrix4fv (glGetUniformLocation id "ProjectionMatrix") 1 GL_FALSE p)
        (glUniformMatrix3fv (glGetUniformLocation id "NormalMatrix") 1 GL_FALSE mn)      
        (glUniformMatrix4fv (glGetUniformLocation id "ModelViewMatrix") 1 GL_FALSE mv)
        (glUniformMatrix4fv (glGetUniformLocation id "ModelViewProjectionMatrix") 1 GL_FALSE mvp)
        void))))



(bind-func shader_update_material
  (lambda (id:i32 ambient:float* diffuse:float* specular:float* shininess:float)
    (glUniform4fv (glGetUniformLocation id "MaterialAmbient") 1 ambient)
    (glUniform4fv (glGetUniformLocation id "MaterialDiffuse") 1 diffuse)
    (glUniform4fv (glGetUniformLocation id "MaterialSpecular") 1 specular)
    (glUniform1f (glGetUniformLocation id "MaterialShininess") shininess)
    void))


;; vert shader
(define passthrough-vert
"// VERTEX SHADER
// #version 330

varying vec2 TexCoord;
 
void main() {   
   // pass through texture coordinate
   //TexCoord =  gl_TextureMatrix[0].st * gl_MultiTexCoord0.st;   
   TexCoord = gl_MultiTexCoord0.st;
   gl_FrontColor = gl_Color;
   //gl_Position = gl_ModelViewProjectionMatrix * gl_Vertex; //this same as line below
   gl_Position = ftransform();
}")


;; frag shader
(define passthrough-frag
"//  FRAGMENT SHADER
// #version 330
#extension GL_ARB_texture_rectangle : enable

uniform sampler2DRect tex1;
uniform float     time;

varying vec2 TexCoord;

void main() {
   gl_FragColor = texture2DRect(tex1,TexCoord);
}")


;; frag shader
(define greyscale-frag
"//  FRAGMENT SHADER
// #version 330

#extension GL_ARB_texture_rectangle : enable

uniform sampler2DRect tex1;
uniform float     time;

varying vec2 TexCoord;

void main() {
   float alpha = texture2DRect(tex1,TexCoord).a;
   float grey = dot(texture2DRect(tex1,TexCoord).rgb, vec3(0.299, 0.587, 0.114));
   gl_FragColor = vec4(vec3(grey),alpha);
}")


;; sepia
(define sepia-frag
"//  FRAGMENT SHADER
// #version 330

#extension GL_ARB_texture_rectangle : enable

uniform sampler2DRect tex1;
uniform float     time;

varying vec2 TexCoord;

void main() {
   float alpha = texture2DRect(tex1,TexCoord).a;
   float grey = dot(texture2DRect(tex1,TexCoord).rgb, vec3(0.299, 0.587, 0.114));
   gl_FragColor = vec4(grey*vec3(1.2,1.0,0.8),alpha);
}")


(define invert-frag
"//  FRAGMENT SHADER
// #version 330

#extension GL_ARB_texture_rectangle : enable

uniform sampler2DRect tex1;
uniform float     time;

varying vec2 TexCoord;

void main() {
   float alpha = texture2DRect(tex1,TexCoord).a;
   vec4 colour = texture2DRect(tex1,TexCoord);
   gl_FragColor = vec4(1.0 - colour.rgb,alpha);
}")


(define gaussian-frag
"//  FRAGMENT SHADER
// #version 330

#extension GL_ARB_texture_rectangle : enable

uniform sampler2DRect tex1;
uniform float     time;
uniform vec2      texoffset[25];

varying vec2 TexCoord;

void main() {
   vec4 sample[25];
   for (int i = 0; i < 25; i++)
   {
      // Sample a grid around and including our texel
      sample[i] = texture2DRect(tex1, TexCoord + texoffset[i]);
   }
 
   gl_FragColor = ((1.0  * (sample[0] + sample[4]  + sample[20] + sample[24])) +
	           (4.0  * (sample[1] + sample[3]  + sample[5]  + sample[9] + sample[15] + sample[19] + sample[21] + sample[23])) +
	           (7.0  * (sample[2] + sample[10] + sample[14] + sample[22])) +
	           (16.0 * (sample[6] + sample[8]  + sample[16] + sample[18])) +
	           (26.0 * (sample[7] + sample[11] + sample[13] + sample[17])) +
	           (41.0 * sample[12])
	           ) / 273.0;
   //gl_FragColor = vec4(1.0,0.0,0.0,1.0);
}")


;;  Blur (median filter)
(define blur-frag
"//  FRAGMENT SHADER
// #version 330

#extension GL_ARB_texture_rectangle : enable

uniform sampler2DRect tex1;
uniform float     time;
uniform vec2      texoffset[25];

varying vec2 TexCoord;

void main() {
   gl_FragColor = vec4(0.0);
 
   for (int i = 0; i < 25; i++)
   {
      // Sample a grid around and including our texel
      gl_FragColor += texture2DRect(tex1, TexCoord + texoffset[i]);
   }
 
   gl_FragColor /= 25.0;
}")


;;  sharpen
(define sharpen-frag
"//  FRAGMENT SHADER
// #version 330

#extension GL_ARB_texture_rectangle : enable

uniform sampler2DRect tex1;
uniform float     time;
uniform vec2      texoffset[25];

varying vec2 TexCoord;

void main() {
    vec4 sample[25];
 
    for (int i = 0; i < 25; i++)
    {
       // Sample a grid around and including our texel
       sample[i] = texture2DRect(tex1, TexCoord + texoffset[i]);
    }
  
    gl_FragColor = 25.0 * sample[12];
 
    for (int i = 0; i < 25; i++)
    {
       if (i != 12)
          gl_FragColor -= sample[i];
    }
}")

(define dilate-frag
"//  FRAGMENT SHADER
// #version 330

#extension GL_ARB_texture_rectangle : enable

uniform sampler2DRect tex1;
uniform float     time;
uniform vec2      texoffset[25];

varying vec2 TexCoord;

void main() {  
   vec4 sample[25];
   vec4 maxValue = vec4(0.0);
 
   for (int i = 0; i < 25; i++)
   {
      // Sample a grid around and including our texel
      sample[i] = texture2DRect(tex1, TexCoord + texoffset[i]);
 
      // Keep the maximum value		
      maxValue = max(sample[i], maxValue);
   }
 
   gl_FragColor = maxValue;
}")


(define erode-frag
"//  FRAGMENT SHADER
// #version 330

#extension GL_ARB_texture_rectangle : enable

uniform sampler2DRect tex1;
uniform float     time;
uniform vec2      texoffset[25];

varying vec2 TexCoord;

void main() {
    vec4 sample[25];
    vec4 minValue = vec4(1.0);
 
    for (int i = 0; i < 25; i++)
    {
        // Sample a grid around and including our texel
        sample[i] = texture2DRect(tex1, TexCoord + texoffset[i]);
 
        // Keep the minimum value		
        minValue = min(sample[i], minValue);
    }
    gl_FragColor = minValue;
}")


(define edge-frag
"//  FRAGMENT SHADER
// #version 330

#extension GL_ARB_texture_rectangle : enable

uniform sampler2DRect tex1;
uniform float     time;
uniform vec2      texoffset[25];

varying vec2 TexCoord;

void main() {
    vec4 sample[25];
 
    for (int i = 0; i < 25; i++)
    {
       // Sample a grid around and including our texel
       sample[i] = texture2DRect(tex1, TexCoord + texoffset[i]);
    }

    gl_FragColor = 24.0 * sample[12];
 
    for (int i = 0; i < 25; i++)
    {
	if (i != 12)
	   gl_FragColor -= sample[i];
    }
}")


(define blend-frag
"//  FRAGMENT SHADER
// #version 330

#extension GL_ARB_texture_rectangle : enable

uniform sampler2DRect baseBuf;
uniform sampler2DRect blendBuf;
uniform float       time;
uniform float       opacity;

varying vec2 TexCoord;

void main() {
    vec4 base = texture2DRect(baseBuf, TexCoord);
    vec4 blend = texture2DRect(blendBuf, TexCoord);

    vec4 result = blend + base;
         result = clamp(result, 0.0, 1.0);

    gl_FragColor = mix(base, result, opacity);
}")


;; vert shader
(define particles-vert
"// VERTEX SHADER
// GLSL 1.2 compatible

//varying vec2 TexCoord;

attribute vec2 myVertex;
attribute vec4 myColour;
attribute float mySize;
attribute vec2 myVelocity;
attribute float myState;

void main() {
   gl_PointSize = mySize;
   if(myState > 0.0) {
     gl_FrontColor = myColour;
   }else{
     gl_FrontColor = vec4(0.0,0.0,0.0,0.0);
   }
   gl_Position = gl_ProjectionMatrix * gl_ModelViewMatrix * vec4(myVertex.xy,0.0,1.0);
   //TexCoord = gl_MultiTexCoord0.st;
}")

(define particles-frag
"//  FRAGMENT SHADER
// #version 330

#version 120

#extension GL_ARB_texture_rectangle : disable

uniform sampler2D tex1;

//varying vec2 TexCoord;

void main() {
   gl_FragColor = texture2D(tex1,gl_PointCoord)*gl_Color;
   //gl_FragColor = gl_Color;
}")


(define green-frag
"//  FRAGMENT SHADER
// #version 330

#extension GL_ARB_texture_rectangle : enable

uniform sampler2DRect tex_back;
uniform sampler2DRect tex_front;
uniform vec4 color;
uniform float width;
uniform float height;
uniform float scale_front;
uniform int flipx;
uniform int flipy;

varying vec2 TexCoord;

void main() {
    vec4 base = texture2DRect(tex_back, TexCoord);
    float x = (flipx==0) ? TexCoord.x : width-TexCoord.x;
    float y = (flipy==0) ? TexCoord.y : height-TexCoord.y;
    vec4 blend = texture2DRect(tex_front, vec2(x*scale_front,y*scale_front));

    if(color == blend) {
      gl_FragColor = base;
    }else{
      gl_FragColor = blend;
    }
}")


(define dof-frag
"
#extension GL_ARB_texture_rectangle : enable

uniform sampler2DRect dBuf;
uniform sampler2DRect cBuf;
//uniform vec2 frameBufSize;
uniform float blur;
uniform float fp;  // focal point
uniform int show_depth;
uniform float dfact; // depth factor (shorten or make longer)
uniform float near;
uniform float far;

varying vec2 TexCoord;

// const float near = 0.1;
// const float far = 1000.0;
const vec2 frameBufSize = vec2(1.0,1.0);

vec4 blurKawase( const sampler2DRect tex, const vec2 texCoord, const vec2 texSize, const float iteration ) {
	// Function assumes that tex is using bilinear hardware filtering
	
	vec2 dUV = (iteration + 0.5) / texSize;
	
	vec4 col = texture2DRect( tex, texCoord + vec2( -dUV.x, dUV.y ) );	// Top left
	col += texture2DRect( tex, texCoord + dUV );		        // Top right
	col += texture2DRect( tex, texCoord + vec2( dUV.x, -dUV.y ) );      // Bottom right
	col += texture2DRect( tex, texCoord - dUV );		        // Bottom left
	
	return col * 0.25;
}

void main( void ) {
        // get z depth from dBuf tex 
	float depth = texture2DRect(dBuf,TexCoord).x;	

        // scale depth buffer
        depth *= far-near;
        depth = (far+near)-depth;
        depth = abs(depth - fp); // fp focal point

        // show_depth is true display depth buffer
        if (show_depth == 1) {
          gl_FragColor = vec4(depth,depth,depth,1.0);  
        } else { // else apply depth blur
          gl_FragColor = blurKawase( cBuf, TexCoord, frameBufSize, depth * blur);
        }
}
")


(define light-vert
  "
//#version 120
#version 120
varying vec3 N, L, E, V;
varying float D;
uniform vec4 LightPos;
uniform vec4 CameraPos;

uniform mat4 ModelMatrix;
uniform mat4 ViewMatrix;
uniform mat4 ProjectionMatrix;
uniform mat3 NormalMatrix;
uniform mat4 ModelViewMatrix;
uniform mat4 ModelViewProjectionMatrix;

void main()
{
  gl_Position = ModelViewProjectionMatrix * gl_Vertex;
  vec4 vPosition = ModelViewMatrix * gl_Vertex;
  //gl_Position = ProjectionMatrix * ViewMatrix * ModelMatrix * gl_Vertex;
  //vec4 vPosition = ViewMatrix * ModelMatrix * gl_Vertex;
  N = NormalMatrix * gl_Normal; //normal
  L = (LightPos - (ModelMatrix * gl_Vertex)).xyz; // vector from source to light
  if(LightPos.w == 0.0) L = LightPos.xyz; // i.e. if LightPos is already a direction vector
  D = length(L); // distance from source to light
  V = vPosition.xyz; // vertex (3d)
  E = (CameraPos - vPosition).xyz; // vector from source to eye
}
")

(define light-frag
  "
#version 120
varying vec3 N, L, E, V;
varying float D;
uniform vec4 LightAmbient;
uniform vec4 LightDiffuse;
uniform vec4 LightSpecular;
uniform float ConstantAttenuation;
uniform float LinearAttenuation;
uniform float QuadraticAttenuation;
uniform float SpotAngle;
uniform vec4 SpotDir;
uniform float SpotExponent;
uniform vec4 CameraDir;
uniform float MaterialShininess;
uniform vec4 MaterialAmbient;
uniform vec4 MaterialDiffuse;
uniform vec4 MaterialSpecular;

uniform mat4 ModelMatrix;
uniform mat4 ViewMatrix;
uniform mat4 ProjectionMatrix;
uniform mat4 NormalMatrix;
uniform mat4 ModelViewMatrix;
uniform mat4 ModelViewProjectionMatrix;

void main()
{
  vec4 ambient,diffuse,specular;
  vec3 HV;
  float pf; // powerfactor
  float nDotHV, nDotLL;
  float attenuation, spotDot, spotAttenuation;

  vec3 NN = normalize(N); // surface normal
  vec3 LL = normalize(L); // light vector
  vec3 EE = normalize(E); // eye vector
  vec3 VV = normalize(V); // vertex 3d
  vec4 Color = vec4(0.0,0.0,0.0,0.0);

  attenuation = 1.0 / (ConstantAttenuation + (LinearAttenuation * D) + (QuadraticAttenuation * D * D));

  spotDot = dot(-LL, normalize(SpotDir.xyz));

  if(spotDot < SpotAngle)
    spotAttenuation = 0.0;
  else
    spotAttenuation = pow(spotDot, SpotExponent);  

  attenuation *= spotAttenuation;

  HV = normalize(LL+EE); // half vector
  nDotLL = max(0.0, dot(NN,LL));
  nDotHV = max(0.0, dot(NN,HV));

  if(nDotLL==0.0)
    pf = 0.0;
  else
    pf = pow(nDotHV, MaterialShininess);

  ambient = LightAmbient * MaterialAmbient * attenuation;
  diffuse = LightDiffuse * MaterialDiffuse * nDotLL * attenuation;
  specular = LightSpecular * MaterialSpecular * pf * attenuation;

  gl_FragColor = vec4((ambient + diffuse + specular).xyz,1.0);
}
")

(define simple-vert
  "
uniform mat4 ModelMatrix;
uniform mat4 ViewMatrix;
uniform mat4 ProjectionMatrix;
uniform mat3 NormalMatrix;
uniform mat4 ModelViewMatrix;
uniform mat4 ModelViewProjectionMatrix;

void main() {   
   gl_Position = ModelViewProjectionMatrix * gl_Vertex;
}
")

(define simple-vert-xtm
  "
uniform mat4 ModelMatrix;
uniform mat4 ViewMatrix;
uniform mat4 ProjectionMatrix;
uniform mat3 NormalMatrix;
uniform mat4 ModelViewMatrix;
uniform mat4 ModelViewProjectionMatrix;

attribute vec4 xtmVertex;
attribute vec3 xtmNormal;
attribute vec3 xtmUVW;
attribute vec4 xtmColor;

void main() {   
   gl_Position = ModelViewProjectionMatrix * xtmVertex;
}
")

(define simple-frag
  "

void main() {
   gl_FragColor = vec4(1.0,0.0,0.0,1.0);
}
")

(define quad-vert
  "
#version 120

uniform mat4 ModelMatrix;
uniform mat4 ViewMatrix;
uniform mat4 ProjectionMatrix;
uniform mat3 NormalMatrix;
uniform mat4 ModelViewMatrix;
uniform mat4 ModelViewProjectionMatrix;

varying vec2 TexCoord;
 
void main() {   
   TexCoord = gl_MultiTexCoord0.st;
   gl_FrontColor = gl_Color;
   gl_Position = ModelViewProjectionMatrix * gl_Vertex;
}
")

(define quad-frag
  "
uniform sampler2D tex1;
varying vec2 TexCoord;

void main() {
   gl_FragColor = texture2D(tex1,TexCoord);
}
")

(define light-and-shade-vert-xtm
  "
#version 120

attribute vec4 xtmVertex;
attribute vec3 xtmNormal;
attribute vec3 xtmUVW;
attribute vec4 xtmColor;

varying vec3 N, L, E, V;
varying float D;

uniform vec4 LightPos;
uniform vec4 CameraPos;

uniform mat4 ModelMatrix;
uniform mat4 ViewMatrix;
uniform mat4 ProjectionMatrix;
uniform mat3 NormalMatrix;
uniform mat4 ModelViewMatrix;
uniform mat4 ModelViewProjectionMatrix;

uniform mat4 LightModelViewProjectionMatrix;

varying vec4 lightVertexPosition;
varying vec3 UVWCoord;
varying vec4 Color;


void main()
{
  gl_Position = ModelViewProjectionMatrix * xtmVertex;
  vec4 vPosition = ModelViewMatrix * xtmVertex;
  N = NormalMatrix * xtmNormal; //normal
  L = (LightPos - (ModelMatrix * xtmVertex)).xyz; // vector from source to light
  if(LightPos.w == 0.0) L = LightPos.xyz; // i.e. if LightPos is already a direction vector
  D = length(L); // distance from source to light
  V = vPosition.xyz; // vertex (3d)
  E = (CameraPos - vPosition).xyz; // vector from source to eye
  UVWCoord = xtmUVW;
  Color = xtmColor;
  lightVertexPosition = LightModelViewProjectionMatrix * xtmVertex;
}
")


(define light-and-shade-frag
  "
//#version 120
varying vec3 N, L, E, V;
varying float D;
uniform vec4 LightAmbient;
uniform vec4 LightDiffuse;
uniform vec4 LightSpecular;
uniform float ConstantAttenuation;
uniform float LinearAttenuation;
uniform float QuadraticAttenuation;
uniform float SpotAngle;
uniform vec4 SpotDir;
uniform float SpotExponent;
uniform vec4 CameraDir;
uniform float MaterialShininess;
uniform vec4 MaterialAmbient;
uniform vec4 MaterialDiffuse;
uniform vec4 MaterialSpecular;

uniform mat4 ModelMatrix;
uniform mat4 ViewMatrix;
uniform mat4 ProjectionMatrix;
uniform mat4 NormalMatrix;
uniform mat4 ModelViewMatrix;
uniform mat4 ModelViewProjectionMatrix;

uniform sampler2D shadowMap;
uniform sampler2D tex1;
uniform float IsTextured; 

varying vec4 lightVertexPosition;
varying vec3 UVWCoord;
varying vec4 Color;

void main()
{
  vec4 ambient,diffuse,specular;
  vec3 HV;
  float pf; // powerfactor
  float nDotHV, nDotLL;
  float attenuation, spotDot, spotAttenuation;
  vec4 TexColor; // texture color
  
  vec3 NN = normalize(N); // surface normal
  vec3 LL = normalize(L); // light vector
  vec3 EE = normalize(E); // eye vector
  vec3 VV = normalize(V); // vertex 3d

  attenuation = 1.0 / (ConstantAttenuation + (LinearAttenuation * D) + (QuadraticAttenuation * D * D));

  spotDot = dot(-LL, normalize(SpotDir.xyz));

  if(spotDot < SpotAngle)
    spotAttenuation = 0.0;

else
    spotAttenuation = pow(spotDot, SpotExponent);  

  attenuation *= spotAttenuation;

  HV = normalize(LL+EE); // half vector
  nDotLL = max(0.0, dot(NN,LL));
  nDotHV = max(0.0, dot(NN,HV));

  if(nDotLL==0.0)
    pf = 0.0;
  else
    pf = pow(nDotHV, MaterialShininess);

  ambient = LightAmbient * MaterialAmbient * attenuation;
  diffuse = LightDiffuse * MaterialDiffuse * nDotLL * attenuation;
  specular = LightSpecular * MaterialSpecular * pf * attenuation;

  //calc shadows
  float shadowValue = 0.0;
  vec4 lightVertexPosition2 = lightVertexPosition;
  lightVertexPosition2 /= lightVertexPosition2.w;

  // softer shadowing by adding dither
  for(float x=-0.0004; x<=0.0004; x+=0.0002) {
    for(float y=-0.0004; y<=0.0004; y+=0.0002) {
      if(texture2D(shadowMap,lightVertexPosition2.xy+vec2(x,y)).r >= lightVertexPosition2.z)
        shadowValue+=1.0;
    }
  }
  shadowValue/=16.0;

  if(IsTextured>0.5) {
     vec4 texcolor = LightDiffuse * texture2D(tex1,UVWCoord.xy) * nDotLL * attenuation;
     gl_FragColor = vec4((texcolor.xyz*shadowValue),1.0);
  } else {
     gl_FragColor = vec4(((ambient + diffuse + specular).xyz*shadowValue),1.0);
  }
}
")
