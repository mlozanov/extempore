;;; sndfile.xtm -- working with audio files

;; Author: Andrew Sorensen
;; Keywords: extempore
;; Required dylibs: libsndfile

;;; Commentary:

;; 

;;; Code:

;; load the libsndfile dynamic library
(define libsndfile
  (let ((platform (sys:platform)))
    (cond ((string=? platform "Linux") (sys:open-dylib "libsndfile.so"))
          ((string=? platform "Windows") (sys:open-dylib "libsndfile.dll"))
          ((string=? platform "OSX") (sys:open-dylib "libsndfile.dylib"))
          (else (print "Unknown platform: " platform)))))

(bind-type sf_info <i64,i32,i32,i32,i32,i32>)
(bind-type sf_format_info <i32,i8*,i8*>)

(bind-lib libsndfile sf_open [i8*,i8*,i32,sf_info*]*)
(bind-lib libsndfile sf_close [i32,i8*]*)
(bind-lib libsndfile sf_seek [i64,i8*,i64,i32]*)
(bind-lib libsndfile sf_write_sync [void,i8*]*)
(bind-lib libsndfile sf_read_double [i64,i8*,double*,i64]*)
(bind-lib libsndfile sf_write_double [i64,i8*,double*,i64]*)
(bind-lib libsndfile sf_strerror [i8*,i8*]*)

;; struct accessor macros

(bind-func sf_frames
  (lambda (info:sf_info*)
    (tref info 0)))

(bind-func sf_samplerate
  (lambda (info:sf_info*)
    (i32toi64 (tref info 1))))

(bind-func sf_channels
  (lambda (info:sf_info*)
    (i32toi64 (tref info 2))))

(bind-func sf_format
  (lambda (info:sf_info*)
    (i32toi64 (tref info 3))))

(bind-func sf_sections
  (lambda (info:sf_info*)
    (i32toi64 (tref info 4))))

(bind-func sf_seekable
  (lambda (info:sf_info*)
    (i32toi64 (tref info 5))))

;; size of audio data in file (in bytes)
(bind-func print_audio_file_info
  (lambda (fname)
    (let ((info:sf_info* (zalloc))
	  (audiofile (sf_open fname 16 info))
	  (channels (i32toi64 (tref info 2))))
      (printf "---------------\n")
      (printf "filename:    %s\n" fname)
      (printf "samplerate:  %d\n" (tref info 1))
      (printf "channels:    %d\n" (tref info 2))
      (printf "frames:      %lld\n" (tref info 0))
      (printf "seconds:     %f\n"
      	      (/ (i64tod (/ (tref info 0) (i32toi64 (tref info 2))))
      		 (i32tod (tref info 1))))
      (sf_close audiofile))))

;; an audio buffer reader
(bind-func read_audio_data
  (lambda (fname dat offset num)
    (let ((info:sf_info* (zalloc))
	  (audiofile (sf_open fname 16 info))
	  (channels (i32toi64 (tref info 2)))
	  (num_to_read (* num channels))
	  (num_to_offset (* offset channels))
	  (cnt (sf_seek audiofile num_to_offset 0))
	  (samples_read (sf_read_double audiofile dat num_to_read)))
      (if (<> null audiofile)
          (begin
            (printf "---------------\n")
            (printf "file name:     %s\n" fname)
            (printf "samplerate:    %d\n" (tref info 1))
            (printf "channels:      %d\n" (tref info 2))
            (printf "samples read:  %lld\n" samples_read))
          (printf "errors:  %s\n" (sf_strerror audiofile)))
      samples_read)))

;; an audio buffer reader (closure version)
(bind-func make_audio_closure
  (lambda (fname offset num)
    (let ((info:sf_info* (zalloc))
          (audio_file (sf_open fname 16 info))
	  (channels (sf_channels info))
          (buffer_len (* channels (sf_frames info)))
	  (audio_dat (zalloc buffer_len))
	  (num_to_read (if (= 0 num) buffer_len (* num channels)))
	  (num_to_offset (* offset channels))
	  (cnt (sf_seek audio_file num_to_offset 0))
	  (samples_read (sf_read_double audio_file audio_dat num_to_read))
          (playhead 0))
      (if (<> null audio_file)
          (begin
            (printf "---------------\n")
            (printf "file name:     %s\n" fname)
            (printf "samplerate:    %d\n" (sf_samplerate info))
            (printf "channels:      %d\n" channels)
            (printf "samples read:  %lld\n" samples_read)
            (lambda ()
              (let ((ph playhead))
                channels
                (set! playhead (modulo (+ playhead 1) samples_read))
                (pref-ptr audio_dat ph))))
          (begin (printf "errors:  %s\n" (sf_strerror audio_file))
                 (lambda ()
                   (printf "Error: audio_closure wasn't initialised properly.")
                   audio_dat))))))

;; write out an audio buffer
(bind-func write_audio_data
  (lambda (fname frames channels:i32 dat)
    (let ((info:sf_info* (zalloc)))
      (tset! info 0 frames)
      (tset! info 1 (dtoi32 SAMPLERATE))
      (tset! info 2 channels)
      (tset! info 3 (+ 131072 2)) ;; + 6 for 32 bit float (+ 2 for 16 bit signed)
      (let ((audiofile (sf_open fname 32 info))
	    (samples_written (sf_write_double audiofile
                                              dat
                                              (* (i32toi64 channels) frames))))
	(if (null? audiofile)
	    (printf "error writing file: %s\n" (sf_strerror audiofile)))
	(sf_write_sync audiofile)
	(sf_close audiofile)
	samples_written))))
