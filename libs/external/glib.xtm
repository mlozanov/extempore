;;; glib.xtm -- GNOME GLib bindings

;; Author: Andrew Sorensen
;; Keywords: extempore
;; Required dylibs: libglib

;;; Commentary:

;; This binding file is incomplete, it will be added to over time.

;;; Code:

(define gliblib
  (sys:open-dylib (if (string=? "Linux" (sys:platform))
		      "libglib-2.0.so"
		      (if (string=? "Windows" (sys:platform))
			  "libglib-2.0-0.dll"
			  "libglib-2.0.dylib"))))

(if (or (eq? #f gliblib)
	(not gliblib)) 
    (print-error "Could not load 'glib' dynamic library"))

;; (define giolib
;;   (sys:open-dylib (if (string=? "Linux" (sys:platform))
;; 		      "libgio-2.0.so"
;; 		      (if (string=? "Windows" (sys:platform))
;; 			  "libgio-2.0-0.dll"
;; 			  "libgio-2.0.dylib"))))

;; (if (or (eq? #f giolib)
;; 	(not giolib)) 
;;     (print-error "Could not load 'gio' dynamic library"))


(define gobjectlib
  (sys:open-dylib (if (string=? "Linux" (sys:platform))
		      "libgobject-2.0.so"
		      (if (string=? "Windows" (sys:platform))
			  "libgobject-2.0-0.dll"
			  "libgobject-2.0.dylib"))))

(if (or (eq? #f gobjectlib)
	(not gobjectlib)) 
    (print-error "Could not load 'gio' dynamic library"))


;; some GLib type aliases
;; note that some of these differ from GLib's actual implementation!
(bind-alias GHashFunc i8*)
(bind-alias GEqualFunc i8*)
(bind-alias GHashTable i8*) ;; GHashTable in GLib is actually an opaque struct (not pointer to struct)
(bind-alias GRegex i8*) ;; GRegex in GLib is actually an opaque struct (not pointer to struct)
(bind-alias GMatchInfo i8*) ;; GMatchInfo in GLib is actually an opaque struct (not pointer to struct)
(bind-alias GDir i8) ;; GDir is an opaque struct
(bind-alias gconstpointer i8*)
(bind-alias gpointer i8*)
(bind-alias gchar i8)
(bind-alias guint i32)
(bind-alias gdouble double)
(bind-alias gulong i64)
(bind-alias gfloat float)
(bind-alias gssize i64)
(bind-alias gsize i64)
(bind-alias gint64 i64)
(bind-alias guint64 i64)
(bind-alias guint16 |2,i8|)
(bind-alias guint32 i32)
(bind-alias gint i32)
(bind-alias gboolean i1) ;; WARNING GLib defines this as i32
(bind-alias GQuark i32)
(bind-alias GRegexMatchFlags i32)
;(bind-alias GObject i8) ;; opaque struct
(bind-alias GObjectClass i8) ;; opaque struct
(bind-alias GObjectConstructParam i8) ;; opaque struct
(bind-alias GType i64)
(bind-type GArray <gchar*,guint>)
(bind-type GByteArray <i8*,guint>)
(bind-type GPtrArray <gpointer*,guint>)
(bind-alias GMutex i8) ;; opaque struct
(if (= 64 (sys:pointer-size))
    (bind-alias gsize i64)
    (bind-alias gsize i32))
;(bind-alias GValue i8) ;; opaque struct
(bind-alias GMainLoop i8) ;; opaque struct
(bind-alias GCallback [void]*) ;; callback
(bind-alias GFreeFunc [void,gpointer]*)
(bind-alias GData i8) ;; opaque
;; some types
(bind-type GTypeClass <GType>)
(bind-type GTypeInstance <GTypeClass*>)
(bind-type GTypeInterface <GType,GType>)
(bind-type GObject <GTypeInstance,guint,GData*>)
(bind-type GList <gpointer,GList*,GList*>)
(bind-type GString <gchar*,gsize,gsize>)
(bind-type GError <GQuark,gint,gchar*>)
(bind-type GValue <GType,|2,i64|>)


;; misc stuff
(if (string=? "Windows" (sys:platform))
    (begin
      (bind-lib gliblib g_get_user_name_utf8 [gchar*]*)
      (bind-lib gliblib g_get_real_name_utf8 [gchar*]*)
      (bind-lib gliblib g_get_host_name [gchar*]*)
      (bind-lib gliblib g_get_home_dir_utf8 [gchar*]*)
      ;(bind-lib gliblib g_get_environ [gchar**]*)
      (bind-lib gliblib g_getenv_utf8 [gchar*,gchar*]*)
      (bind-lib gliblib g_setenv_utf8 [gboolean,gchar*]*)
      (bind-lib gliblib g_unsetenv_utf8 [void,gchar*]*)
      (bind-lib gliblib g_spaced_primes_closest [guint,guint]*))
    (begin
      (bind-lib gliblib g_get_user_name [gchar*]*)
      (bind-lib gliblib g_get_real_name [gchar*]*)
      (bind-lib gliblib g_get_host_name [gchar*]*)
      (bind-lib gliblib g_get_home_dir [gchar*]*)
      (bind-lib gliblib g_get_environ [gchar**]*)
      (bind-lib gliblib g_getenv [gchar*,gchar*]*)
      (bind-lib gliblib g_setenv [gboolean,gchar*]*)
      (bind-lib gliblib g_unsetenv [void,gchar*]*)
      (bind-lib gliblib g_spaced_primes_closest [guint,guint]*)))

;; file system stuff

(bind-val G_FILE_TEST_IS_REGULAR i32 1)
(bind-val G_FILE_TEST_IS_SYMLINK i32 2)
(bind-val G_FILE_TEST_IS_DIR i32 4)
(bind-val G_FILE_TEST_IS_EXECUTABLE i32 8)
(bind-val G_FILE_TEST_EXISTS i32 16)

(if (string=? "Windows" (sys:platform))
    (begin 
      (bind-lib gliblib g_file_test_utf8 [gboolean,gchar*,i32]*)
      (bind-lib gliblib g_dir_open_utf8 [GDir*,gchar*,guint,GError**]*)
      (bind-lib gliblib g_dir_close [void,GDir*]*)
      (bind-lib gliblib g_dir_read_name_utf8 [gchar*,GDir*]*)
      (bind-lib gliblib g_dir_rewind [void,GDir*]*)
      )
    (begin
      (bind-lib gliblib g_file_test [gboolean,gchar*,i32]*)
      (bind-lib gliblib g_dir_open [GDir*,gchar*,guint,GError**]*)
      (bind-lib gliblib g_dir_close [void,GDir*]*)
      (bind-lib gliblib g_dir_read_name [gchar*,GDir*]*)
      (bind-lib gliblib g_dir_rewind [void,GDir*]*)))

;; regex stuff
(bind-lib gliblib g_match_info_matches [gboolean,GMatchInfo]*)
(bind-lib gliblib g_match_info_next [gboolean,GMatchInfo,GError**]*)
(bind-lib gliblib g_match_info_get_match_count [gint,GMatchInfo]*)
(bind-lib gliblib g_match_info_is_partial_match [gboolean,GMatchInfo]*)
(bind-lib gliblib g_match_info_fetch [gchar*,GMatchInfo,gint]*)
(bind-lib gliblib g_match_info_fetch_named [gchar*,GMatchInfo,gchar*]*)
(bind-lib gliblib g_match_info_fetch_all [gchar**,GMatchInfo]*)
(bind-lib gliblib g_match_info_free [void,GMatchInfo]*)

(bind-lib gliblib g_regex_match_simple [i1,gchar*,gchar*,i32,i32]*)
(bind-lib gliblib g_regex_split_simple [gchar**,gchar*,gchar*,i32,i32]*)
(bind-lib gliblib g_regex_new [GRegex,gchar*,i32,i32,GError**]*)
(bind-lib gliblib g_regex_unref [void,GRegex]*)
(bind-lib gliblib g_regex_match [gboolean,GRegex,gchar*,i32,i8**]*)
(bind-lib gliblib g_regex_match_all [gboolean,GRegex,gchar*,i32,i8**]*)
(bind-lib gliblib g_regex_match_full [gboolean,GRegex,gchar*,gssize,gint,i32,i8**,GError**]*)
(bind-lib gliblib g_regex_match_all_full [gboolean,GRegex,gchar*,gssize,gint,i32,i8**,GError**]*)
(bind-lib gliblib g_regex_split [gchar**,GRegex,gchar*,GRegexMatchFlags]*)
(bind-lib gliblib g_regex_split_full [gchar**,GRegex,gchar*,gssize,gint,GRegexMatchFlags,gint,GError**]*)
(bind-lib gliblib g_regex_replace [gchar*,GRegex,gchar*,gssize,gint,gchar*,GRegexMatchFlags,GError**]*)
(bind-lib gliblib g_regex_replace_literal [gchar*,GRegex,gchar*,gssize,gint,gchar*,GRegexMatchFlags,GError**]*)

;; error stuff
(bind-lib gliblib g_error_free [void,GError*]*)

;; memory stuff
(bind-lib gliblib g_free [void,gpointer]*)
(bind-lib gliblib g_malloc [gpointer,gsize]*)

;; GObject stuff
(bind-lib gobjectlib g_object_ref [gpointer,gpointer]*)
(bind-lib gobjectlib g_object_unref [void,gpointer]*)
(bind-lib gobjectlib g_object_set_property [void,GObject*,gchar*,GValue*]*)
(bind-lib gobjectlib g_object_get_property [void,GObject*,gchar*,GValue*]*)


;; signal stuff
(bind-alias GClosure i8)
(bind-alias GClosureNotify [void,gpointer,GClosure*]*)
(bind-lib gobjectlib g_signal_connect_data [gulong,gpointer,gchar*,GCallback,gpointer,GClosureNotify,i32]*)
(bind-func g_signal_connect (lambda (a:gpointer b:gchar* c:GCallback d:gpointer) (g_signal_connect_data a b c d null 0)))
(bind-lib gobjectlib g_signal_connect_object [gulong,gpointer,gchar*,GCallback,gpointer,i32]*)
(bind-lib gobjectlib g_signal_emitv [void,GValue*,guint,GQuark,GValue*]*)
(bind-lib gobjectlib g_signal_lookup [guint,gchar*,GType]*)


;; Main loop
(bind-lib gliblib g_main_loop_new [GMainLoop*,i8*,gboolean]*)
(bind-lib gliblib g_main_loop_run [void,GMainLoop*]*)
(bind-lib gliblib g_main_loop_quit [void,GMainLoop*]*)
(bind-lib gliblib g_main_loop_is_running [gboolean,GMainLoop*]*)
(bind-lib gliblib g_main_loop_unref [void,GMainLoop*]*)
(bind-lib gliblib g_main_context_iteration [gboolean,i8*,gboolean]*)


;; value and TYPE STUFF
(bind-lib gobjectlib g_value_init [GValue*,GValue*,GType]*)
(bind-lib gobjectlib g_value_get_object [gpointer,GValue*]*)
(bind-lib gobjectlib g_value_get_string [gchar*,GValue*]*)
(bind-lib gobjectlib g_value_get_int [gint,GValue*]*)
(bind-lib gobjectlib g_value_set_string [void,GValue*,gchar*]*)
(bind-lib gobjectlib g_value_set_object [void,GValue*,gpointer]*)
(bind-lib gobjectlib g_value_set_boxed [void,GValue*,gpointer]*)
(bind-lib gobjectlib g_value_set_pointer [void,GValue*,gpointer]*)
(bind-lib gobjectlib g_value_set_boolean [void,GValue*,i32]*);gboolean]*)
(bind-lib gobjectlib g_value_set_static_string [void,GValue*,gchar*]*)
(bind-lib gobjectlib g_strdup_value_contents [gchar*,GValue*]*)
(bind-lib gobjectlib g_type_check_value [gboolean,GValue*]*)
(bind-lib gobjectlib g_type_check_value_holds [gboolean,GValue*,GType]*)
(bind-lib gobjectlib g_type_name_from_instance [gchar*,GTypeInstance*]*)
(bind-lib gobjectlib g_type_name_from_class [gchar*,GTypeClass*]*)
(bind-lib gobjectlib g_type_fundamental [GType,GType]*)
(bind-lib gobjectlib g_type_from_name [GType,gchar*]*)
(bind-lib gobjectlib g_type_init [void]*)
(bind-lib gobjectlib g_type_name [gchar*,GType]*)

;; type string stuff
(bind-lib gliblib g_string_new [GString*,gchar*]*)

;; hash tables
(bind-alias GHashTable i8)
(bind-alias GHashFunc [guint,gconstpointer]*)
(bind-alias GEqualFunc [gboolean,gconstpointer,gconstpointer]*)

;; hash and equal functions for g_hash_table_new
(bind-lib gliblib g_direct_equal [gboolean,gconstpointer,gconstpointer]*)
(bind-lib gliblib g_direct_hash [guint,gconstpointer]*)
(bind-lib gliblib g_str_equal [gboolean,gconstpointer,gconstpointer]*)
(bind-lib gliblib g_str_hash [guint,gconstpointer]*)
(bind-lib gliblib g_int_equal [gboolean,gconstpointer,gconstpointer]*)
(bind-lib gliblib g_int_hash [guint,gconstpointer]*)
(bind-lib gliblib g_int64_equal [gboolean,gconstpointer,gconstpointer]*)
(bind-lib gliblib g_int64_hash [guint,gconstpointer]*)
(bind-lib gliblib g_double_equal [gboolean,gconstpointer,gconstpointer]*)
(bind-lib gliblib g_double_hash [guint,gconstpointer]*)

(bind-lib gliblib g_hash_table_new [GHashTable*,GHashFunc,GEqualFunc]*)
(bind-lib gliblib g_hash_table_insert [void,GHashTable*,gpointer,gpointer]*)
(bind-lib gliblib g_hash_table_replace [void,GHashTable*,gpointer,gpointer]*)
;; (bind-lib gliblib g_hash_table_add [void,GHashTable*,gpointer]*)
;; (bind-lib gliblib g_hash_table_contains [gboolean,GHashTable*,gconstpointer]*)
(bind-lib gliblib g_hash_table_size [guint,GHashTable*]*)
(bind-lib gliblib g_hash_table_lookup [gpointer,GHashTable*,gconstpointer]*)
(bind-lib gliblib g_hash_table_remove [gboolean,GHashTable*,gconstpointer]*)
(bind-lib gliblib g_hash_table_remove_all [void,GHashTable*]*)


;; ;; GSocket stuff
;; (bind-alias GSocket i8)
;; (bind-alias GInetAddress i8)
;; (bind-lib giolib g_inet_address_new_from_string [GInetAddress*,gchar*]*)
;; (bind-lib giolib g_inet_address_to_string [gchar*,GInetAddress*]*)
