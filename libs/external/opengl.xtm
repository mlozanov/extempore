;;; opengl.xtm -- helper functions for working with openGL

;; Author: Andrew Sorensen
;; Keywords: extempore
;; Required dylibs: openGL

;;; Commentary:

;; 

;;; Code:

;; first check if we are windows we need to load some extensions!
(if (string=? (sys:platform) "Windows")
    (begin (println "Loading OpenGL Extensions for Windows!!!!!")
	   (gl:add-extension "glActiveTexture")
	   (gl:add-extension "glGetShaderiv")
	   (gl:add-extension "glGetShaderInfoLog")
	   (gl:add-extension "glGetProgramiv")
	   (gl:add-extension "glGetProgramInfoLog")
	   (gl:add-extension "glCreateShader")
	   (gl:add-extension "glCreateProgram")
	   (gl:add-extension "glShaderSource")
	   (gl:add-extension "glCompileShader")
	   (gl:add-extension "glAttachShader")
	   (gl:add-extension "glLinkProgram")
	   (gl:add-extension "glUseProgram")
	   (gl:add-extension "glUniform1f")
	   (gl:add-extension "glUniform1i")	   
	   (gl:add-extension "glUniform2f")
	   (gl:add-extension "glUniform1fv")
	   (gl:add-extension "glUniform2fv")
	   (gl:add-extension "glUniform3f")	   
	   (gl:add-extension "glUniform4f")
	   (gl:add-extension "glGetUniformLocation")
	   (gl:add-extension "glGenBuffers")
	   (gl:add-extension "glBindBuffer")
	   (gl:add-extension "glBufferData")
	   (gl:add-extension "glGetAttribLocation")
	   (gl:add-extension "glBufferSubData")
	   (gl:add-extension "glEnableVertexAttribArray")
	   (gl:add-extension "glVertexAttribPointer")
	   (gl:add-extension "glDisableVertexAttribArray")
	   (llvm:compile "declare i32 @glGetUniformBlockIndex(i32,i8*)")
	   (gl:add-extension "glGetUniformBlockIndex")
	   (llvm:compile "declare void @glUniformBlockBinding(i32,i32,i32)")	   
	   (gl:add-extension "glUniformBlockBinding")
	   (llvm:compile "declare void @glBindBufferRange(i32,i32,i32,i64,i64)")
	   (gl:add-extension "glBindBufferRange")
	   ;; frame buffer bits
	   (llvm:compile "declare void @glGenFramebuffers(i32,i32*)")
	   (gl:add-extension "glGenFramebuffers")
	   (llvm:compile "declare void @glGenRenderbuffers(i32,i32*)")
	   (gl:add-extension "glGenRenderbuffers")
	   (llvm:compile "declare void @glBindFramebuffer(i32,i32)")
	   (gl:add-extension "glBindFramebuffer")
	   (llvm:compile "declare void @glBindRenderbuffer(i32,i32)")
	   (gl:add-extension "glBindRenderbuffer")
	   (llvm:compile "declare void @glRenderbufferStorage(i32,i32,i32,i32)")
	   (gl:add-extension "glRenderbufferStorage")
	   (llvm:compile "declare void @glFramebufferRenderbuffer(i32,i32,i32,i32)")
	   (gl:add-extension "glFramebufferRenderbuffer")
	   (llvm:compile "declare void @glFramebufferTexture(i32,i32,i32,i32)")
	   (gl:add-extension "glFramebufferTexture")
	   (llvm:compile "declare void @glFramebufferTexture1D(i32,i32,i32,i32,i32)")
	   (gl:add-extension "glFramebufferTexture1D")
	   (llvm:compile "declare void @glFramebufferTexture2D(i32,i32,i32,i32,i32)")	   
	   (gl:add-extension "glFramebufferTexture2D")
	   (llvm:compile "declare void @glFramebufferTexture3D(i32,i32,i32,i32,i32,i32)")	   
	   (gl:add-extension "glFramebufferTexture3D")
	   (llvm:compile "declare i32 @glCheckFramebufferStatus(i32)")
	   (gl:add-extension "glCheckFramebufferStatus")))


;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Load SOIL
(load "libs/external/image.xtm")

;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Load GL

(define libgl
  (let ((platform (sys:platform)))
    (cond ((string=? platform "Linux") (sys:open-dylib "/usr/lib/libGL.so"))
          ((string=? platform "Windows") (sys:open-dylib "Gl32.dll"))
          ((string=? platform "OSX") (sys:open-dylib "/System/Library/Frameworks/OpenGL.framework/OpenGL"))
          (else (print "Unknown platform: " platform)))))

;; if on windows also check for opengl32.dll			  
(if (or (eq? #f libgl)
	    (null? libgl)) 
	(if (string=? "Windows" (sys:platform))
	    (begin (set! libgl (sys:open-dylib "opengl32.dll"))
		       (if (or (null? libgl)
				       (eq? #f libgl))
			       (print-error "Error loading opengl library")))	   
		(print-error "Error loading opengl library")))

(if (not (string=? (sys:platform) "Windows"))
    (begin (llvm:compile "declare i32 @glGetUniformBlockIndex(i32, i8*);")
	   (llvm:compile "declare void @glUniformBlockBinding(i32, i32, i32);")
	   (llvm:compile "declare void @glBindBufferRange(i32,i32,i32,i32,i32);")))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; missing opengl constants

(bind-val GL_VIEWPORT_BIT i32 2048)
(bind-val GL_ENABLE_BIT i32 8192)
(bind-val GL_VERTEX_PROGRAM_POINT_SIZE i32 34370)
(bind-val GL_COORD_REPLACE i32 34914)

(bind-val GL_ONE_MINUS_SRC_ALPHA i32 771)
(bind-val GL_ONE_MINUS_SRC_COLOR i32 769)
(bind-val GL_ONE_MINUS_DST_COLOR i32 775)


;;;;;;;;;;;;;;;;;;;;;;;  FBO stuff
(bind-val GL_DRAW_FRAMEBUFFER i32 36009)
(bind-val GL_READ_FRAMEBUFFER i32 36008)
(bind-val GL_FRAMEBUFFER i32 36160)
(bind-val GL_RENDERBUFFER i32 36161)
(bind-val GL_RENDERBUFFER_WIDTH i32 36162)
(bind-val GL_RENDERBUFFER_HEIGHT i32 36163)
(bind-val GL_RENDERBUFFER_INTERNAL_FORMAT i32 36164)
(bind-val GL_FRAMEBUFFER_COMPLETE i32 36053)
(bind-val GL_COLOR_ATTACHMENT0 i32 36064)
(bind-val GL_COLOR_ATTACHMENT1 i32 36065)
(bind-val GL_COLOR_ATTACHMENT2 i32 36066)
(bind-val GL_COLOR_ATTACHMENT3 i32 36067)
(bind-val GL_COLOR_ATTACHMENT4 i32 36068)
(bind-val GL_COLOR_ATTACHMENT5 i32 36069)
(bind-val GL_COLOR_ATTACHMENT6 i32 36070)
(bind-val GL_COLOR_ATTACHMENT7 i32 36071)
(bind-val GL_COLOR_ATTACHMENT8 i32 36072)
(bind-val GL_COLOR_ATTACHMENT9 i32 36073)
(bind-val GL_COLOR_ATTACHMENT10 i32 36074)
(bind-val GL_COLOR_ATTACHMENT11 i32 36075)
(bind-val GL_COLOR_ATTACHMENT12 i32 36076)
(bind-val GL_COLOR_ATTACHMENT13 i32 36077)
(bind-val GL_COLOR_ATTACHMENT14 i32 36078)
(bind-val GL_COLOR_ATTACHMENT15 i32 36079)

(bind-val GL_DEPTH_ATTACHMENT i32 36096)
;; (bind-val GL_DEPTH_COMPONENT16 i32 33189)
(bind-val GL_DEPTH_COMPONENT24 i32 33190)
;; (bind-val GL_DEPTH_COMPONENT32 i32 33191)




(if (not (string=? "Windows" (sys:platform)))
	(begin 
	(bind-lib libgl glGenFramebuffers [void,i32,i32*]*)
	(bind-lib libgl glGenRenderbuffers [void,i32,i32*]*)
	(bind-lib libgl glBindFramebuffer [void,i32,i32]*)
	(bind-lib libgl glBindRenderbuffer [void,i32,i32]*)
	(bind-lib libgl glRenderbufferStorage [void,i32,i32,i32,i32]*)
	(bind-lib libgl glFramebufferRenderbuffer [void,i32,i32,i32,i32]*)
	(bind-lib libgl glFramebufferTexture [void,i32,i32,i32,i32]*)
	(bind-lib libgl glFramebufferTexture1D [void,i32,i32,i32,i32,i32]*)
	(bind-lib libgl glFramebufferTexture2D [void,i32,i32,i32,i32,i32]*)
	(bind-lib libgl glFramebufferTexture3D [void,i32,i32,i32,i32,i32,i32]*)
	(bind-lib libgl glCheckFramebufferStatus [i32,i32]*)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Load GLU
(define libglu
  (let ((platform (sys:platform)))
    (cond ((string=? platform "Linux") (sys:open-dylib "/usr/lib/libGLU.so"))
          ((string=? platform "Windows") (sys:open-dylib "Glu32.dll"))
          ((string=? platform "OSX") (sys:open-dylib "/System/Library/Frameworks/OpenGL.framework/OpenGL"))
          (else (print "Unknown platform: " platform)))))


(bind-lib libglu gluLookAt [void,double,double,double,double,double,double,double,double,double]*)
(bind-lib libglu gluPerspective [void,double,double,double,double]*)
(bind-lib libglu gluErrorString [i8*,i32]*)
			   


(bind-func gl_setup
  (lambda ()
    (glEnable GL_LIGHTING)
    (glEnable GL_LIGHT0)
    (let ((diffuse (heap-alloc 4 float))
	  (specular (heap-alloc 4 float))
	  (position (heap-alloc 4 float)))      
      (pset! diffuse 0 1.0)
      (pset! diffuse 1 1.0)
      (pset! diffuse 2 1.0)
      (pset! diffuse 3 1.0)
      (pset! specular 0 1.0)
      (pset! specular 2 1.0)
      (pset! specular 3 1.0)
      (pset! specular 4 1.0)
      (pset! position 0 100.0)
      (pset! position 1 100.0)
      (pset! position 2 100.0)
      (pset! position 3 0.0)

      (glLightfv GL_LIGHT0 GL_DIFFUSE diffuse)
      (glLightfv GL_LIGHT0 GL_SPECULAR specular)
      (glLightfv GL_LIGHT0 GL_POSITION position))

    (glColorMaterial GL_FRONT_AND_BACK GL_AMBIENT_AND_DIFFUSE)
    (glEnable GL_COLOR_MATERIAL)
    (glShadeModel GL_SMOOTH)
    (glDisable GL_BLEND)
    (glBlendFunc GL_ONE GL_SRC_ALPHA)))

;; (bind-val GL_MODELVIEW i32 5888)
(bind-val GL_MODELVIEW_MATRIX i32 2982)
;; (bind-val GL_PROJECTION i32 5889)
;; (bind-val GL_PROJECTION_MATRIX i32 2983)
;; (bind-val GL_TEXTURE i32 5890)
(bind-val GL_TEXTURE_MATRIX i32 2984)

(bind-func gl_set_view
  (lambda (w:double h:double depth:double)
    (glViewport 0 0 (dtoi32 w) (dtoi32 h))
    (glMatrixMode GL_PROJECTION)
    (glLoadIdentity)
    (gluPerspective 35.0 (/ w h) 0.1 depth)
    (glMatrixMode GL_MODELVIEW)
    (glEnable GL_DEPTH_TEST)
    (gl_setup)
    1))

(bind-func gl_look_at
  (lambda (eyex eyey eyez centre-x centre-y centre-z up-x up-y up-z)
    (glLoadIdentity)
    (gluLookAt eyex eyey eyez centre-x centre-y centre-z up-x up-y up-z)))


;; (define gl-load-extensions
;;   (lambda ()
;;     (if (string=? (sys:platform) "Windows")
;; 	(begin (println "Loading OpenGL Extensions for Windows!!!!!")
;; 	       (gl:add-extension "glGetShaderiv")
;; 	       (gl:add-extension "glGetShaderInfoLog")
;; 	       (gl:add-extension "glGetProgramiv")
;; 	       (gl:add-extension "glGetProgramInfoLog")
;; 	       (gl:add-extension "glCreateShader")
;; 	       (gl:add-extension "glCreateProgram")
;; 	       (gl:add-extension "glShaderSource")
;; 	       (gl:add-extension "glCompileShader")
;; 	       (gl:add-extension "glAttachShader")
;; 	       (gl:add-extension "glLinkProgram")
;; 	       (gl:add-extension "glUseProgram")
;; 	       (gl:add-extension "glUniform1f")
;; 	       (gl:add-extension "glUniform1i")	   
;; 	       (gl:add-extension "glUniform2f")
;; 	       (gl:add-extension "glUniform1fv")
;; 	       (gl:add-extension "glUniform2fv")	   	   	   
;; 	       (gl:add-extension "glGetUniformLocation")
;; 	       (gl:add-extension "glGetUniformBlockIndex")
;; 	       (gl:add-extension "glUniformBlockBinding")
;; 	       (gl:add-extension "glBindBufferRange")
;; 	       (gl:add-extension "glUniform3f")
;; 	       (gl:add-extension "glUniform4f")))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; FBO helpers
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(bind-val GL_RGBA16F i32 34842)
(bind-val GL_RGBA8 i32 32856)

;; creates an empty texture
;; suitable to back an FBO
(bind-func fbo_create_texture
  (lambda (width height)
    (let ((id:i32* (salloc))
	  (tex:i32* (salloc)))
      (glGenRenderbuffers 1 id)
      (glBindRenderbuffer GL_RENDERBUFFER (pref id 0))
      ;;(glRenderbufferStorage GL_RENDERBUFFER GL_RGBA16F width height)
      (glRenderbufferStorage GL_RENDERBUFFER GL_RGBA8 width height)
      (glFramebufferRenderbuffer GL_FRAMEBUFFER GL_COLOR_ATTACHMENT0 GL_RENDERBUFFER (pref id 0))

      (glGenTextures 1 tex)
      (glBindTexture GL_TEXTURE_RECTANGLE_ARB (pref tex 0))
      ;;(glTexImage2D GL_TEXTURE_RECTANGLE_ARB 0 GL_RGBA16F width height 0 GL_RGBA GL_UNSIGNED_BYTE null)
      (glTexImage2D GL_TEXTURE_RECTANGLE_ARB 0 GL_RGBA8 width height 0 GL_RGBA GL_UNSIGNED_BYTE null)
      (glTexParameteri GL_TEXTURE_RECTANGLE_ARB GL_TEXTURE_WRAP_S GL_CLAMP_TO_EDGE)
      (glTexParameteri GL_TEXTURE_RECTANGLE_ARB GL_TEXTURE_WRAP_T GL_CLAMP_TO_EDGE)
      (glTexParameteri GL_TEXTURE_RECTANGLE_ARB GL_TEXTURE_MAG_FILTER GL_LINEAR)
      (glTexParameteri GL_TEXTURE_RECTANGLE_ARB GL_TEXTURE_MIN_FILTER GL_LINEAR)
      (glBindTexture GL_TEXTURE_RECTANGLE_ARB 0)
      (pref tex 0))))


;; create fbo depth buffer
(bind-func fbo_create_depth_buffer
  (lambda (width height)
    (let ((id:i32* (salloc))
	  (tex:i32* (salloc)))
      (glGenRenderbuffers 1 id)
      (glBindRenderbuffer GL_RENDERBUFFER (pref id 0))
      ;;(glRenderbufferStorage GL_RENDERBUFFER GL_DEPTH_COMPONENT32 width height)
      (glRenderbufferStorage GL_RENDERBUFFER GL_DEPTH_COMPONENT24 width height)
      (glFramebufferRenderbuffer GL_FRAMEBUFFER GL_DEPTH_ATTACHMENT GL_RENDERBUFFER (pref id 0))

      (glGenTextures 1 tex)
      (glBindTexture GL_TEXTURE_RECTANGLE_ARB (pref tex 0))
      ;;(glTexImage2D GL_TEXTURE_RECTANGLE_ARB 0 GL_DEPTH_COMPONENT32 width height 0 GL_DEPTH_COMPONENT GL_FLOAT null)
      (glTexImage2D GL_TEXTURE_RECTANGLE_ARB 0 GL_DEPTH_COMPONENT24 width height 0 GL_DEPTH_COMPONENT GL_FLOAT null)
      (glTexParameteri GL_TEXTURE_RECTANGLE_ARB GL_TEXTURE_WRAP_S GL_CLAMP_TO_EDGE)
      (glTexParameteri GL_TEXTURE_RECTANGLE_ARB GL_TEXTURE_WRAP_T GL_CLAMP_TO_EDGE)
      (glTexParameteri GL_TEXTURE_RECTANGLE_ARB GL_TEXTURE_MAG_FILTER GL_LINEAR)
      (glTexParameteri GL_TEXTURE_RECTANGLE_ARB GL_TEXTURE_MIN_FILTER GL_LINEAR)
      (glBindTexture GL_TEXTURE_RECTANGLE_ARB 0)
      (pref tex 0))))

;; creates an empty texture
;; suitable to back an FBO
(bind-func fbo_create_texture_sqr
  (lambda (width height)
    (let ((id:i32* (salloc))
	  (tex:i32* (salloc)))
      (glGenRenderbuffers 1 id)
      (glBindRenderbuffer GL_RENDERBUFFER (pref id 0))
      (glRenderbufferStorage GL_RENDERBUFFER GL_RGBA8 width height)
      (glFramebufferRenderbuffer GL_FRAMEBUFFER GL_COLOR_ATTACHMENT0 GL_RENDERBUFFER (pref id 0))

      (glGenTextures 1 tex)
      (glBindTexture GL_TEXTURE_2D (pref tex 0))
      (glTexImage2D GL_TEXTURE_2D 0 GL_RGBA8 width height 0 GL_RGBA GL_UNSIGNED_BYTE null)
      (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_WRAP_S GL_CLAMP_TO_EDGE)
      (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_WRAP_T GL_CLAMP_TO_EDGE)
      (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_MAG_FILTER GL_LINEAR)
      (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_MIN_FILTER GL_LINEAR)
      (glBindTexture GL_TEXTURE_2D 0)
      (pref tex 0))))


;; create fbo depth buffer
(bind-func fbo_create_depth_buffer_sqr
  (lambda (width height)
    (let ((id:i32* (salloc))
	  (tex:i32* (salloc)))
      (glGenRenderbuffers 1 id)
      (glBindRenderbuffer GL_RENDERBUFFER (pref id 0))
      ;;(glRenderbufferStorage GL_RENDERBUFFER GL_DEPTH_COMPONENT32 width height)
      (glRenderbufferStorage GL_RENDERBUFFER GL_DEPTH_COMPONENT24 width height)
      (glFramebufferRenderbuffer GL_FRAMEBUFFER GL_DEPTH_ATTACHMENT GL_RENDERBUFFER (pref id 0))

      (glGenTextures 1 tex)
      (glBindTexture GL_TEXTURE_2D (pref tex 0))
      ;;(glTexImage2D GL_TEXTURE_2D 0 GL_DEPTH_COMPONENT32 width height 0 GL_DEPTH_COMPONENT GL_FLOAT null)
      (glTexImage2D GL_TEXTURE_2D 0 GL_DEPTH_COMPONENT24 width height 0 GL_DEPTH_COMPONENT GL_FLOAT null)
      (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_WRAP_S GL_CLAMP_TO_EDGE)
      (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_WRAP_T GL_CLAMP_TO_EDGE)
      (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_MAG_FILTER GL_LINEAR)
      (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_MIN_FILTER GL_LINEAR)
      (glBindTexture GL_TEXTURE_2D 0)
      (pref tex 0))))


;;
;; vbo id      0
;; data size   1
;; ptr to data 2
;;
(bind-type E_vbo <i32,i32,i8*>)

;; asumming always GL_ARRAY_BUFFER at the moment
;; type is one of GL_DYNAMIC_DRAW, GL_STATIC_DRAW, GL_STREAM_DRAW etc..
(bind-func create-vbo
  (lambda (size:i32 data:i8* type:i32)
    (let ((vbo:E_vbo* (halloc))
	  (vboid:i32* (salloc)))	  
      (glGenBuffers 1 vboid)
      (glBindBuffer GL_ARRAY_BUFFER (pref vboid 0))
      (glBufferData GL_ARRAY_BUFFER size null type)
      ;; (glBufferSubData GL_ARRAY_BUFFER 0 size data)
      (tfill! vbo (pref vboid 0) size data)
      (glBindBuffer GL_ARRAY_BUFFER 0)
      vbo)))
      

;; structure to hold fbo data
;; fbo id          0
;; texture id      1
;; depth buffer id 2
;; width           3
;; height          4
(bind-type E_fbo <i32,i32,i32,i32,i32>)

;; create and return a frame buffer struct (E_fbo)
;; if _texid is greater than 0 then use existing _texid
(bind-func create-fbo
  (lambda (width:i32 height:i32 _texid:i32 _depthid:i32)
    (let ((texid (fbo_create_texture width height))
	  (depthid (fbo_create_depth_buffer width height))
	  (fboid:i32* (salloc))
	  (fbo:E_fbo* (halloc))) ;; heap alloc
      (glGenFramebuffers 1 fboid)
      ;; bind the fbo
      (glBindFramebuffer GL_FRAMEBUFFER (pref fboid 0))
      ;; (glClearColor 0.0 0.1 0.0 1.0)
      ;; (glClear (+ GL_COLOR_BUFFER_BIT GL_DEPTH_BUFFER_BIT))

      (if (> _texid 0) (set! texid _texid))
      (if (> _depthid 0) (set! depthid _depthid))
      ;; Attach the texture texid to the color buffer of our fbo
      (glFramebufferTexture2D GL_FRAMEBUFFER GL_COLOR_ATTACHMENT0 GL_TEXTURE_RECTANGLE_ARB texid 0)
      ;; Attach the texture depthid to the depth buffer of our fbo
      (glFramebufferTexture2D GL_FRAMEBUFFER GL_DEPTH_ATTACHMENT GL_TEXTURE_RECTANGLE_ARB depthid 0)

      (tfill! fbo (pref fboid 0) texid depthid width height)
      (let ((status:i32 (glCheckFramebufferStatus GL_FRAMEBUFFER)))
	(if (<> status GL_FRAMEBUFFER_COMPLETE)
	    (set! fbo (cast null E_fbo*))))

      (glClearColor 0.0 1.0 0.0 1.0)
      (glClear (+ GL_COLOR_BUFFER_BIT GL_DEPTH_BUFFER_BIT))

      ;; unbind the frame buffer
      (glBindFramebuffer GL_FRAMEBUFFER 0)
      ;; return the extfbo struct
      fbo)))

;; create and return a frame buffer struct (E_fbo)
;; if _texid is greater than 0 then use existing _texid
(bind-func create-fbo-no-depth
  (lambda (width:i32 height:i32 _texid:i32)
    (let ((texid (fbo_create_texture width height))
	  (fboid:i32* (salloc))
	  (fbo:E_fbo* (halloc))) ;; heap alloc
      (glGenFramebuffers 1 fboid)
      ;; bind the fbo
      (glBindFramebuffer GL_FRAMEBUFFER (pref fboid 0))
      ;; (glClearColor 0.0 0.1 0.0 1.0)
      ;; (glClear (+ GL_COLOR_BUFFER_BIT GL_DEPTH_BUFFER_BIT))

      (if (> _texid 0) (set! texid _texid))
      ;; Attach the texture texid to the color buffer of our fbo
      (glFramebufferTexture2D GL_FRAMEBUFFER GL_COLOR_ATTACHMENT0 GL_TEXTURE_RECTANGLE_ARB texid 0)

      (tfill! fbo (pref fboid 0) texid -1 width height)
      (let ((status:i32 (glCheckFramebufferStatus GL_FRAMEBUFFER)))
	(if (<> status GL_FRAMEBUFFER_COMPLETE)
	    (set! fbo (cast null E_fbo*))))

      (glClearColor 0.0 1.0 0.0 1.0)
      (glClear GL_COLOR_BUFFER_BIT)

      ;; unbind the frame buffer
      (glBindFramebuffer GL_FRAMEBUFFER 0)
      ;; return the extfbo struct
      fbo)))


;; create and return a frame buffer struct (E_fbo)
;; if _texid is greater than 0 then use existing _texid
(bind-func create-fbo-sqr
  (lambda (width:i32 height:i32 _texid:i32 _depthid:i32)
    (let ((texid (fbo_create_texture_sqr width height))
	  (depthid (fbo_create_depth_buffer_sqr width height))
	  (fboid:i32* (salloc))
	  (fbo:E_fbo* (halloc))) ;; heap alloc
      (glGenFramebuffers 1 fboid)
      ;; bind the fbo
      (glBindFramebuffer GL_FRAMEBUFFER (pref fboid 0))
      ;; (glClearColor 0.0 0.1 0.0 1.0)
      ;; (glClear (+ GL_COLOR_BUFFER_BIT GL_DEPTH_BUFFER_BIT))

      (if (> _texid 0) (set! texid _texid))
      (if (> _depthid 0) (set! texid _depthid))
      ;; Attach the texture texid to the color buffer of our fbo
      (glFramebufferTexture2D GL_FRAMEBUFFER GL_COLOR_ATTACHMENT0 GL_TEXTURE_2D texid 0)
      ;; Attach the texture depthid to the depth buffer of our fbo
      (glFramebufferTexture2D GL_FRAMEBUFFER GL_DEPTH_ATTACHMENT GL_TEXTURE_2D depthid 0)

      (tfill! fbo (pref fboid 0) texid depthid width height)
      (let ((status:i32 (glCheckFramebufferStatus GL_FRAMEBUFFER)))
	(printf "fb status %d\n" status)
	(if (<> status GL_FRAMEBUFFER_COMPLETE)
	    (set! fbo (cast null E_fbo*))))

      (glClearColor 0.0 1.0 0.0 1.0)
      (glClear (+ GL_COLOR_BUFFER_BIT GL_DEPTH_BUFFER_BIT))

      ;; unbind the frame buffer
      (glBindFramebuffer GL_FRAMEBUFFER 0)
      ;; return the extfbo struct
      fbo)))


;; create and return a frame buffer struct (E_fbo)
;; if _texid is greater than 0 then use existing _texid
(bind-func create-fbo-sqr-no-depth
  (lambda (width:i32 height:i32 _texid:i32)
    (let ((texid (fbo_create_texture_sqr width height))
	  (fboid:i32* (salloc))
	  (fbo:E_fbo* (halloc))) ;; heap alloc
      (glGenFramebuffers 1 fboid)
      ;; bind the fbo
      (glBindFramebuffer GL_FRAMEBUFFER (pref fboid 0))

      (if (> _texid 0) (set! texid _texid))
      ;; Attach the texture texid to the color buffer of our fbo
      (glFramebufferTexture2D GL_FRAMEBUFFER GL_COLOR_ATTACHMENT0 GL_TEXTURE_2D texid 0)

      (tfill! fbo (pref fboid 0) texid -1 width height)
      (let ((status:i32 (glCheckFramebufferStatus GL_FRAMEBUFFER)))
	(printf "fb status %d\n" status)
	(if (<> status GL_FRAMEBUFFER_COMPLETE)
	    (set! fbo (cast null E_fbo*))))

      (glClearColor 0.0 1.0 0.0 1.0)
      (glClear GL_COLOR_BUFFER_BIT)

      ;; unbind the frame buffer
      (glBindFramebuffer GL_FRAMEBUFFER 0)
      ;; return the extfbo struct
      fbo)))



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Shader helpers
;; 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; a couple of shader helper functions
(bind-func print-shader-info-log
  (lambda (obj:i32)
    (let ((infologLength (salloc 1 i32))
	  (charsWritten (salloc 1 i32)))
      (glGetShaderiv obj GL_INFO_LOG_LENGTH infologLength)
      (if (> (pref infologLength 0) 1)
	  (let ((log (bitcast (malloc (i32toi64 (pref infologLength 0))) i8*)))
	    (glGetShaderInfoLog obj (pref infologLength 0) charsWritten log)
	    (printf "printShaderInfoLog: %s\n" log)
	    (free log)
	    1)
	  (begin (printf "Shader Info log: OK\n") 1)))))

(bind-func print-program-info-log
  (lambda (obj:i32)
    (let ((infologLength (salloc 1 i32))
	  (charsWritten (salloc 1 i32)))
      (glGetProgramiv obj GL_INFO_LOG_LENGTH infologLength)
      (if (> (pref infologLength 0) 1)
	  (let ((log (bitcast (malloc (i32toi64 (pref infologLength 0))) i8*)))
	    (glGetProgramInfoLog obj (pref infologLength 0) charsWritten log)
	    (printf "printProgramInfoLog: %s\n" log)
	    (free log)
	    1)
	  (begin (printf "Program Info log: OK\n") 1)))))

;; load shader (vert and frag shader)
(bind-func create-shader
  (lambda (vsource:i8* fsource:i8*)
    (let ((fshader (glCreateShader GL_FRAGMENT_SHADER))
	  (vshader (glCreateShader GL_VERTEX_SHADER))
	  (fcode:|1,i8*|* (salloc 1))
	  (vcode:|1,i8*|* (salloc 1))
	  (program (glCreateProgram))
	  (temp:i32* (salloc 1)))
      (pset! fcode 0 fsource)
      (pset! vcode 0 vsource)      
      (glShaderSource fshader 1 (cast fcode i8**) (bitcast null i32*))
      (glShaderSource vshader 1 (cast vcode i8**) (bitcast null i32*))      
      (glCompileShader fshader)
      (glCompileShader vshader))    
      (glAttachShader program fshader)
      (glAttachShader program vshader)      
      (glLinkProgram program)
      (print-shader-info-log fshader)
      (print-shader-info-log vshader)
      (print-program-info-log program)
      program))

      
	  
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;  GL DRAWING STUFF (deprecated use cairo)
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



(bind-func circle-line
  (lambda (radius:double x:double y:double)
    (let ((k 0.0))
      (glLineWidth 3.0)
      (glBegin GL_LINE_LOOP)
      (dotimes (k 90.0)
	(let ((angle:double (/ (* k 2.0 PI) 90.0)))
	  (glVertex2d (+ x (* (cos angle) radius)) (+ y (* (sin angle) radius)))))
      (glEnd))))

(bind-func circle-whole
  (lambda (radius:double x:double y:double)
    (let ((k 0.0))
      (glBegin GL_TRIANGLE_FAN)
      (dotimes (k 90.0)
	(let ((angle:double (/ (* k 2.0 PI) 90.0)))
	  (glVertex2d (+ x (* (cos angle) radius)) (+ y (* (sin angle) radius)))))
      (glEnd))))

(bind-func cube-whole
  (let ((dlist -1))
    (lambda ()
      (if (> dlist -1)
	  (begin (glCallList dlist) 1)
	  (begin (set! dlist (glGenLists 1))
		 (glNewList dlist (+ GL_COMPILE 1))
		 (glBegin GL_QUADS)
		 ;; Front face
		 (glNormal3d 0.0 0.0 1.0)
		 (glVertex3d 0.0 0.0  1.0)
		 (glVertex3d 1.0 0.0  1.0)
		 (glVertex3d 1.0  1.0  1.0)
		 (glVertex3d 0.0  1.0  1.0)
		 ;; Back face
		 (glNormal3d 0.0 0.0 -1.0)
		 (glVertex3d 0.0 0.0 0.0)
		 (glVertex3d 0.0  1.0 0.0)
		 (glVertex3d 1.0  1.0 0.0)
		 (glVertex3d 1.0 0.0 0.0)
		 ;; Top face
		 (glNormal3d 0.0 1.0 0.0)
		 (glVertex3d 0.0  1.0 0.0)
		 (glVertex3d 0.0  1.0  1.0)
		 (glVertex3d 1.0  1.0  1.0)
		 (glVertex3d 1.0  1.0 0.0)
		 ;; Bottom face
		 (glNormal3d 0.0 -1.0 0.0)
		 (glVertex3d 0.0 0.0 0.0)
		 (glVertex3d 1.0 0.0 0.0)
		 (glVertex3d 1.0 0.0  1.0)
		 (glVertex3d 0.0 0.0  1.0)
		 ;; Right face
		 (glNormal3d 1.0 0.0 0.0)
		 (glVertex3d 1.0 0.0 0.0)
		 (glVertex3d 1.0  1.0 0.0)
		 (glVertex3d 1.0  1.0  1.0)
		 (glVertex3d 1.0 0.0  1.0)
		 ;; Left face
		 (glNormal3d -1.0 0.0 0.0)
		 (glVertex3d 0.0 0.0 0.0)
		 (glVertex3d 0.0 0.0  1.0)
		 (glVertex3d 0.0  1.0  1.0)
		 (glVertex3d 0.0  1.0 0.0)
		 (glEnd)
		 (glEndList)
		 1)))))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; opengl misc

(bind-val GL_VENDER i32 7936)
(bind-val GL_RENDERER i32 7937)
;; (bind-val GL_VERSION i32 7938)

(bind-func gl_print_driver_info
  (lambda ()
    (printf "--------------------------\n")
    (printf "OpenGL Driver:\nVender:%s\nRenderer:%s\nVersion:%s\n" (glGetString GL_VENDER) (glGetString GL_RENDERER) (glGetString GL_VERSION))
    (printf "--------------------------\n")
    void))
