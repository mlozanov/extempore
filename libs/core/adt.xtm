;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Extempore's data types library
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; lib-loading config
(sys:load-preload-check 'adt)
(define *xtmlib-adt-loaded* #t)

(bind-alias bool i1)

;;;;;;;;;;;;;;;;;;;;
;;

(bind-func xempty_p:[bool,!a]*
  (lambda (a)
    (if (null? a) #t #f)))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; a start for some super simple boxing
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; tag num and data
(bind-type xbox_t <i64,i8*,i8*>)

(bind-func xbox:[xbox_t*,!a]*
  (lambda (val)
    (let ((box:xbox_t* (halloc)))
      (tset! box 0 0)
      (tset! box 1 (convert val i8*))
      box)))
             
(bind-func xunbox:[!a,xbox_t*]*
  (lambda (box)
    (let ((key (tref box 0))
          (val (tref box 1)))
      (convert val))))


;;;;;;;;;;;;;;;;;;;;
;; pairs

(bind-type xpair_t <!first,!second>)

(bind-func xpair:[xpair_t*,!first,!second]*
  (lambda (a b)
    (let ((ppair (halloc)))
      (tset! ppair 0 a)
      (tset! ppair 1 b)
      ppair)))    

(bind-func xfirst:[!first,xpair_t*]*	   
  (lambda (a)
    (tref a 0)))

(bind-func xsecond:[!second,xpair_t*]*	   
  (lambda (a)
    (tref a 1)))


;;;;;;;;;;;;;;;;;;;;
;;
;; lists
;;

(bind-type xlist_t <!head,xlist_t*>)

(bind-func xjoin:[xlist_t*,!head,xlist_t*]*
  (lambda (a b)
    (let ((joinpair (halloc)))
      (tset! joinpair 0 a)
      (tset! joinpair 1 b)
      joinpair)))

(bind-func xconj:[xlist_t*,!head,xlist_t*]*
  (lambda (a b)
    (let ((joinpair (halloc)))
      (tset! joinpair 0 a)
      (tset! joinpair 1 b)
      joinpair)))

(bind-func xhead:[!head,xlist_t*]*
  (lambda (a)
    (tref a 0)))

(bind-func xtail:[xlist_t*,xlist_t*]*
  (lambda (a)
    (tref a 1)))

;; macro list builder
(define-macro (xlist . args)
  (let loop ((lst args))
    (if (null? lst)
	'null
	`(xjoin ,(car lst) ,(loop (cdr lst))))))

(bind-func xlength:[i64,xlist_t*]*
  (lambda (a)    
    (if (null? a)
	0
	(+ 1 (xlength (xtail a))))))

(bind-func xnth_tail_:[xlist_t*,xlist_t*,i64,i64]*
  (lambda (lst idx cnt)
    (if (or (= cnt idx) (> cnt idx))
        lst
        (xnth_tail_ (xtail lst)
               idx
               (+ cnt 1)))))

(bind-func xnth_tail:[xlist_t*,xlist_t*,i64]*
  (lambda (lst idx)
    (xnth_tail_ lst idx 0)))

(bind-func xnth:[!a,xlist_t*,i64]*
  (lambda (lst idx)
    (xhead (xnth_tail lst idx))))

;; insert val into list at idx 

(bind-func xinsert:[xlist_t*,xlist_t*,i64,!a]*
  (lambda (lst idx value)
    (if (= idx 0)
        (xjoin value lst)
        (let ((pre_cell (xnth_tail lst (- idx 1)))
              (new_cell (xjoin value (xtail pre_cell))))
          (tset! pre_cell 1 new_cell)
          lst))))

;; ;; a macro for printing lists
;; (bind-func print_xlist:[i32,xlist_t*,i8*]*
;;   (lambda (lst format)
;;     (printf "%\n" )))

(bind-func xmap:[xlist_t%a*,[!head%a,!head%b]*,xlist_t%b*]*
  (lambda (func lst)
    (let ((f (lambda (l)
	       (if (null? l)
		   null
		   (xjoin (func (xhead l)) (f (xtail l)))))))
      (f lst))))

(bind-func xlast:[xlist_t*,xlist_t*]*
  (lambda (a)
    (if (null? (xtail a))
	a
	(xlast (xtail a)))))


(bind-func xappend:[xlist_t*,xlist_t*,xlist_t*]*
  (lambda (a b)
    (let ((p (xlast a)))
      (tset! p 1 b)
      a)))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; TEMPORARY!!
;; a very dodgy dictionary based on
;; an assoc list
;;
;; the "dictionary" is any xlist
;; of xpairs where pair is any (i8*,!a)
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(bind-func xdict_match:[i1,xpair_t*,i8*]*
  (lambda (p key)
    (if (= (convert 0 i32) (strcmp (xfirst p) key)) 1 0)))

(bind-func xdict_find:[!second,xlist_t*,i8*]*
  (lambda (dict key)
    (if (null? dict) (convert null)
        (if (xdict_match (xhead dict) key)
            (xsecond (xhead dict))
            (xdict_find (xtail dict) key)))))


;;;;;;;;;;;
;; TREES ;;
;;;;;;;;;;;

;; xlist_t*~i8*~ is specialised for <i8*,xlist_t*>*
(bind-type xtree_t <!value,i64,xlist_t*~i8*~>)

(bind-func xtree:[xtree_t*,!value]*
  (lambda (a)
    (let ((tree (halloc)))
      (tset! tree 0 a)
      (tset! tree 1 (i32toi64 0))
      (tset! tree 2 (cast null xlist_t*~i8*~))
      tree)))

(bind-func xtree_children:[i64,xtree_t*]*
  (lambda (t)
    (tref t 1)))

(bind-func xtree_value:[!value,xtree_t*]*
  (lambda (t)
    (tref t 0)))

(bind-func xtree_child:[xtree_t*,xtree_t*,i64]*
  (lambda (t n)
    (if (> (tref t 1) n)
        (xnth (cast (tref t 2) xlist_t*~i8*~) n)
        null)))

(bind-func xtree_nodes:[xlist_t*,xtree_t*]*
  (lambda (t)
    (cast (tref t 2) xlist_t*~i8*~)))

(bind-func xtree_add_child:[i64,xtree_t*,xtree_t*]*
  (lambda (parent child)
    (let ((children (tref parent 2))
          (newchildren (xjoin (cast child i8*) children)))
      (tset! parent 2 newchildren)
      (tset! parent 1 (+ 1 (tref parent 1)))
      (tref parent 1))))

(bind-func xtree_print_i64:[i32,xtree_t*]*
  (lambda (tree)
    (if (= (xtree_children tree) 0)
        (printf " %lld" (xtree_value tree))
        (begin (printf "\n%lld\n" (xtree_value tree))
               (xmap (lambda (t)
                      (xtree_print_i64 (cast t xtree_t*~i64~)))
                     (xtree_nodes tree))
               (i64toi32 1)))))


;;;;;;;;;;;;;;;;
;; ALGORITHMS ;;
;;;;;;;;;;;;;;;;

;; void quick_sort (int *a, int n) {
;;     if (n < 2)
;;         return;
;;     int p = a[n / 2];
;;     int *l = a;
;;     int *r = a + n - 1;
;;     while (l <= r) {
;;         while (*l < p)
;;             l++;
;;         while (*r > p)
;;             r--;
;;         if (l <= r) {
;;             int t = *l;
;;             *l++ = *r;
;;             *r-- = t;
;;         }
;;     }
;;     quick_sort(a, r - a + 1);
;;     quick_sort(l, a + n - l);
;; }
 
;; int main () {
;;     int a[] = {4, 65, 2, -31, 0, 99, 2, 83, 782, 1};
;;     int n = sizeof a / sizeof a[0];
;;     quick_sort(a, n);
;;     return 0;
;; }

;; an in-place (quick)sort

;; with comparator closure argument (sig = [void,!a,i64,[i1,!a,!a]*]*)


(bind-func xsub-quicksortd
  (lambda (dat:double* left right)
    (if (< left right)
        (let ((tmp 0.0)
              (swap (lambdas (x y)
                      (set! tmp (pref dat x))
                      (pset! dat x (pref dat y))
                      (pset! dat y tmp)))
              (pivot (pref dat right))
              (index left)
              (i 0))
          (dotimes (i left (- right left))
            (if (or (< (pref dat i) pivot)
                    (= (pref dat i) pivot))
                (begin (swap i index)
                       (set! index (+ index 1)))))
          (swap right index)
          (xsub-quicksortd dat left (- index 1))
          (xsub-quicksortd dat (+ index 1) right))
        void)))

(bind-func xquicksortd
  (lambda (arr:double* n)
    (xsub-quicksortd arr 0 (- n 1))
    arr))

