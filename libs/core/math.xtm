;;; math.xtm -- extempore math library

;; Author: Andrew Sorensen, Ben Swift
;; Keywords: extempore

;;; Commentary:

;; This file contains math routines written in xtlang.  If you're
;; concerned about raw performance at all costs, it may be better to
;; dynamically link to BLAS or something like that.  However, because
;; everything is dynamically rebindable, there are also lots of
;; opportunities to do cool things with this library.

;; This file contains xtlang functions (and the odd data type) for
;; dealing with:
;; - vectors
;; - matrices
;; - complex numbers
;; - windowing

;;; Code:


(bind-func deg2rad_f
  (lambda (degrees:float)
    (/ degrees 57.2957795)))

(bind-func deg2rad_d
  (lambda (degrees:double)
    (/ degrees 57.2957795)))

(bind-func rad2deg_f
  (lambda (rad:float)
    (* 57.2957795 rad)))

(bind-func rad2deg_d
  (lambda (rad:double)
    (* 57.2957795 rad)))

(bind-poly deg2rad deg2rad_d)
(bind-poly deg2rad deg2rad_f)
(bind-poly rad2deg rad2deg_d)
(bind-poly rad2deg rad2deg_f)


;;;;;;;;;; VECTOR ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; some basic vector functions
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(bind-func vprintd
  (lambda (v:double* lgth:i64)
    (let ((i 0))
      (printf "[")
      (printf "% f" (pref v 0))
      (dotimes (i (- lgth 1))
	(printf ",% f" (pref v (+ i 1))))
      (printf "]\n")
      void)))

(bind-func vprintf
  (lambda (v:float* lgth:i64)
    (let ((i 0))
      (printf "[")
      (printf "% f" (ftod (pref v 0)))
      (dotimes (i (- lgth 1))
	(printf ",% f" (ftod (pref v (+ i 1)))))
      (printf "]\n")
      void)))

(bind-poly vprint vprintd)
(bind-poly vprint vprintf)

(bind-func vnormd
  (lambda (v:double* lgth:i64 n:double*)
    (let ((mag 0.0)
	  (i 0))
      (dotimes (i lgth)
	(set! mag (+ mag (* (pref v i) (pref v i)))))
      (set! mag (sqrt mag))
      (dotimes (i lgth)
	(pset! n i (/ (pref v i) mag)))
      void)))

(bind-func vnormf
  (lambda (v:float* lgth:i64 n:float*)
    (let ((mag 0.0)
	  (i 0))
      (dotimes (i lgth)
	(set! mag (+ mag (* (pref v i) (pref v i)))))
      (set! mag (sqrtf mag))
      (dotimes (i lgth)
	(pset! n i (/ (pref v i) mag)))
      void)))

(bind-poly vnorm vnormd)
(bind-poly vnorm vnormf)

(bind-func vmagd
  (lambda (v:double* lgth:i64)
    (let ((mag 0.0)
	  (i 0))
      (dotimes (i lgth)
	(set! mag (+ mag (* (pref v i) (pref v i)))))
      (sqrt mag))))

(bind-func vmagf
  (lambda (v:float* lgth:i64)
    (let ((mag 0.0)
	  (i 0))
      (dotimes (i lgth)
	(set! mag (+ mag (* (pref v i) (pref v i)))))
      (sqrtf mag))))

(bind-poly vmag vmagd)
(bind-poly vmag vmagf)

(bind-func vdotd
  (let ((i 0))
    (lambda (v1:double* v2:double* lgth:i64)
      (let ((res 0.0))
	(dotimes (i lgth)
	  (set! res (+ res (* (pref v1 i) (pref v2 i)))))
	res))))

(bind-func vdotf
  (let ((i 0))
    (lambda (v1:float* v2:float* lgth:i64)
      (let ((res 0.0))
	(dotimes (i lgth)
	  (set! res (+ res (* (pref v1 i) (pref v2 i)))))
	res))))

(bind-poly vdot vdotd)
(bind-poly vdot vdotf)

(bind-func vsmuld
  (lambda (s:double v1:double* lgth:i64 v2:double*)
    (let ((i 0))
      (dotimes (i lgth)
	(pset! v2 i (* s (pref v1 i))))
      void)))

(bind-func vsmulf
  (lambda (s:float v1:float* lgth:i64 v2:float*)
    (let ((i 0))
      (dotimes (i lgth)
	(pset! v2 i (* s (pref v1 i))))
      void)))

(bind-poly vsmul vsmuld)
(bind-poly vsmul vsmulf)

(bind-func vsdivd
  (lambda (s:double v1:double* lgth:i64 v2:double*)
    (let ((i 0))
      (dotimes (i lgth)
	(pset! v2 i (/ (pref v1 i) s)))
      void)))

(bind-func vsdivf
  (lambda (s:float v1:float* lgth:i64 v2:float*)
    (let ((i 0))
      (dotimes (i lgth)
	(pset! v2 i (/ (pref v1 i) s)))
      void)))

(bind-poly vsdiv vsdivd)
(bind-poly vsdiv vsdivf)

(bind-func vsumd
  (let ((i 0))
    (lambda (v1:double* v2:double* lgth:i64 v3:double*)
      (dotimes (i lgth)
	(pset! v3 i (+ (pref v1 i) (pref v2 i))))
      void)))
	
(bind-func vsumf
  (let ((i 0))
    (lambda (v1:float* v2:float* lgth:i64 v3:float*)
      (dotimes (i lgth)
	(pset! v3 i (+ (pref v1 i) (pref v2 i))))
      void)))

(bind-poly vsum vsumd)
(bind-poly vsum vsumf)

(bind-func vsubd
  (let ((i 0))
    (lambda (v1:double* v2:double* lgth:i64 v3:double*)
      (dotimes (i lgth)
	(pset! v3 i (- (pref v1 i) (pref v2 i))))
      void)))

(bind-func vsubf
  (let ((i 0))
    (lambda (v1:float* v2:float* lgth:i64 v3:float*)
      (dotimes (i lgth)
	(pset! v3 i (- (pref v1 i) (pref v2 i))))
      void)))

(bind-poly vsub vsubd)
(bind-poly vsub vsubf)

(bind-func vmuld  
  (let ((i 0))
    (lambda (v1:double* v2:double* lgth:i64 v3:double*)
      (dotimes (i lgth)
	(pset! v3 i (* (pref v1 i) (pref v2 i))))
      void)))

(bind-func vmulf
  (let ((i 0))
    (lambda (v1:float* v2:float* lgth:i64 v3:float*)
      (dotimes (i lgth)
	(pset! v3 i (* (pref v1 i) (pref v2 i))))
      void)))

(bind-poly vmul vmuld)
(bind-poly vmul vmulf)

(bind-func vmagd
  (lambda (v:double* lgth:i64)
    (let ((mag 0.0)
	  (i 0))
      (dotimes (i lgth)
	(set! mag (+ mag (* (pref v i) (pref v i)))))
      (sqrt mag))))

(bind-func vmagf
  (lambda (v:float* lgth:i64)
    (let ((mag 0.0)
	  (i 0))
      (dotimes (i lgth)
	(set! mag (+ mag (* (pref v i) (pref v i)))))
      (sqrtf mag))))


(bind-poly vmag vmagd)
(bind-poly vmag vmagf)



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Quaternions
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; angle in rads
;; v is for axis vector (3d)
;; quat is a user supplied 4d vector (x,y,z,w)
(bind-func vaquatd
  (lambda (angle:double v:double* quat:double*)
    (let ((m (vmagd v 3))
	  (s (/ (sin (* 0.5 angle)) m)))
      (pfill! quat
	      (* (pref v 0) s) (* (pref v 1) s) (* (pref v 2) s)
	      (cos (* 0.5 angle)))
      void)))

;; angle in rads
;; v is for axis vector (3d)
;; quat is a user supplied 4d vector (x,y,z,w)
(bind-func vaquatf
  (lambda (angle:float v:float* quat:float*)
    (let ((m (vmagf v 3))
	  (s (/ (sinf (* 0.5 angle)) m)))
      (pfill! quat
	      (* (pref v 0) s) (* (pref v 1) s) (* (pref v 2) s)
	      (cosf (* 0.5 angle)))
      void)))

(bind-poly vaquat vaquatd)
(bind-poly vaquat vaquatf)
      	

;;;;;;;;;; MATRIX ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; matrix functions
;;
;; there are obviously faster options (such as linking to BLAS or
;; LAPACK or the like), but these ones are nice if you want to keep
;; everything in xtlang.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; 'pretty' print matrix (doubles)
(bind-func mprintd
  (lambda (m:double* r:i64 c:i64 col_major:i1)
    (let ((i 0) (j 0)
          ;; helper closure for calculating offset
          (idx (if col_major
                   (lambda (x2:i64 y2:i64)
                     (+ (* x2 c) y2))
                   (lambda (x1:i64 y1:i64)
                     (+ x1 (* y1 r))))))
      (dotimes (j c)
        (printf "[")
        (dotimes (i r)
          (printf " %f" (pref m (idx i j))))
        (printf " ]\n")
        void))))

;; 'pretty' print matrix (floats)
(bind-func mprintf
  (lambda (m:float* r:i64 c:i64 col_major:i1)
    (let ((i 0) (j 0)
          ;; helper closure for calculating offset
          (idx (if col_major
                   (lambda (x2:i64 y2:i64)
                     (+ (* x2 c) y2))
                   (lambda (x1:i64 y1:i64)
                     (+ x1 (* y1 r))))))
      (dotimes (j c)
        (printf "[")
        (dotimes (i r)
          (printf " %f" (ftod (pref m (idx i j)))))
        (printf " ]\n")
        void))))

;; 'pretty' print matrix (i64)
(bind-func mprinti64
  (lambda (m:i64* r:i64 c:i64 col_major:i1)
    (let ((i 0) (j 0)
          ;; helper closure for calculating offset
          (idx (if col_major
                   (lambda (x2:i64 y2:i64)
                     (+ (* x2 c) y2))
                   (lambda (x1:i64 y1:i64)
                     (+ x1 (* y1 r))))))
      (dotimes (j c)
        (printf "[")
        (dotimes (i r)
          (printf "% lld" (pref m (idx i j))))
        (printf " ]\n")
        void))))

;; 'pretty' print matrix (i32)
(bind-func mprinti32
  (lambda (m:i32* r:i64 c:i64 col_major:i1)
    (let ((i 0) (j 0)
          ;; helper closure for calculating offset
          (idx (if col_major
                   (lambda (x2:i64 y2:i64)
                     (+ (* x2 c) y2))
                   (lambda (x1:i64 y1:i64)
                     (+ x1 (* y1 r))))))
      (dotimes (j c)
        (printf "[")
        (dotimes (i r)
          (printf " %d" (pref m (idx i j))))
        (printf " ]\n")
        void))))


(bind-poly mprint mprintd)
(bind-poly mprint mprintf)
(bind-poly mprint mprinti64)
(bind-poly mprint mprinti32)

;; matrix multiplication (doubles)
(bind-func mmuld
  (lambda (ma:double* r1:i64 c1:i64 mb:double* r2:i64 c2:i64 mc:double*)
    (if (= c1 r2)
	(let ((r 0) (c 0) (k 0))
	  (dotimes (r r1)
	    (dotimes (c c2)
	      (pset! mc (+ c (* r c2)) 0.0)
	      (dotimes (k c1)
		(pset! mc (+ c (* r c2))
		       (+ (pref mc (+ c (* r c2)))
			  (* (pref ma (+ k (* r c1)))
			     (pref mb (+ (* k c2) c))))))))
	  mc)
	(begin (printf "bad matrix multiplication [%lld,%lld]*[%lld,%lld]\n"
		       r1 c1 r2 c2)
	       (cast null double*)))))

;; matrix multiplication (floats)
(bind-func mmulf
  (lambda (ma:float* r1:i64 c1:i64 mb:float* r2:i64 c2:i64 mc:float*)
    (if (= c1 r2)
	(let ((r 0) (c 0) (k 0))
	  (dotimes (r r1)
	    (dotimes (c c2)
	      (pset! mc (+ c (* r c2)) 0.0)
	      (dotimes (k c1)
		(pset! mc (+ c (* r c2))
		       (+ (pref mc (+ c (* r c2)))
			  (* (pref ma (+ k (* r c1)))
			     (pref mb (+ (* k c2) c))))))))
	  mc)
	(begin (printf "bad matrix multiplication [%lld,%lld]*[%lld,%lld]\n"
		       r1 c1 r2 c2)
	       (cast null float*)))))

;; matrix multiplication (i64)
(bind-func mmuli64
  (lambda (ma:i64* r1:i64 c1:i64 mb:i64* r2:i64 c2:i64 mc:i64*)
    (if (= c1 r2)
	(let ((r 0) (c 0) (k 0))
	  (dotimes (r r1)
	    (dotimes (c c2)
	      (pset! mc (+ c (* r c2)) 0)
	      (dotimes (k c1)
		(pset! mc (+ c (* r c2))
		       (+ (pref mc (+ c (* r c2)))
			  (* (pref ma (+ k (* r c1)))
			     (pref mb (+ (* k c2) c))))))))
	  mc)
	(begin (printf "bad matrix multiplication [%lld,%lld]*[%lld,%lld]\n"
		       r1 c1 r2 c2)
	       (cast null i64*)))))

;; matrix multiplication (i32)
(bind-func mmuli32
  (lambda (ma:i32* r1:i64 c1:i64 mb:i32* r2:i64 c2:i64 mc:i32*)
    (if (= c1 r2)
	(let ((r 0) (c 0) (k 0))
	  (dotimes (r r1)
	    (dotimes (c c2)
	      (pset! mc (+ c (* r c2)) 0)
	      (dotimes (k c1)
		(pset! mc (+ c (* r c2))
		       (+ (pref mc (+ c (* r c2)))
			  (* (pref ma (+ k (* r c1)))
			     (pref mb (+ (* k c2) c))))))))
	  mc)
	(begin (printf "bad matrix multiplication [%lld,%lld]*[%lld,%lld]\n"
		       r1 c1 r2 c2)
	       (cast null i32*)))))

(bind-poly mmul mmuld)
(bind-poly mmul mmulf)
(bind-poly mmul mmuli64)
(bind-poly mmul mmuli32)

;; matrix transposition (doubles)
(bind-func mtransd
  (lambda (ma:double* r1:i64 c1:i64 mb:double*)
    (let ((i 0) (j 0))
      (dotimes (i r1)
	(dotimes (j c1)
	  (pset! mb (+ (* j c1) i)
		 (pref ma (+ (* i c1) j)))))
      mb)))

;; matrix transposition (floats)
(bind-func mtransf
  (lambda (ma:float* r1:i64 c1:i64 mb:float*)
    (let ((i 0) (j 0))
      (dotimes (i r1)
	(dotimes (j c1)
	  (pset! mb (+ (* j c1) i)
		 (pref ma (+ (* i c1) j)))))
      mb)))

(bind-poly mtrans mtransd)
(bind-poly mtrans mtransf)

;; determinant (doubles)
;; k is for sqr matrix
(bind-func mdetrmd
  (lambda (ma:double* k:i64)
    (if (= k 1) (pref ma 0)
	(let ((det:double 0.0) (s:double 1.0)
	      (c 0) (i 0) (j 0) (m 0) (n 0)
	      (mb:double* (salloc (* k k))))
	  (dotimes (c k)
	    (set! m 0) (set! n 0)
	    (dotimes (i k)
	      (dotimes (j k)
		(pset! mb (+ (* i k) j) 0.0)
		(if (and (<> i 0) (<> j c))
		    (begin
		      (pset! mb (+ (* m (- k 1)) n)
			     (pref ma (+ (* i k) j)))
		      (if (< n (- k 2))
			  (set! n (+ n 1))
			  (begin
			    (set! n 0)
			    (set! m (+ m 1)))))
		    (begin 1))))
	    (set! det (+ det (* s (* (pref ma c)
				     (mdetrmd mb (- k 1))))))
	    (set! s (* -1.0 s)))
	  det))))

;; determinant (floats)
;; k is for sqr matrix
(bind-func mdetrmf
  (lambda (ma:float* k:i64)
    (if (= k 1) (pref ma 0)
	(let ((det:float 0.0) (s:float 1.0)
	      (c 0) (i 0) (j 0) (m 0) (n 0)
	      (mb:float* (salloc (* k k))))
	  (dotimes (c k)
	    (set! m 0) (set! n 0)
	    (dotimes (i k)
	      (dotimes (j k)
		(pset! mb (+ (* i k) j) 0.0)
		(if (and (<> i 0) (<> j c))
		    (begin
		      (pset! mb (+ (* m (- k 1)) n)
			     (pref ma (+ (* i k) j)))
		      (if (< n (- k 2))
			  (set! n (+ n 1))
			  (begin
			    (set! n 0)
			    (set! m (+ m 1)))))
		    (begin 1))))
	    (set! det (+ det (* s (* (pref ma c)
				     (mdetrmf mb (- k 1))))))
	    (set! s (* -1.0 s)))
	  det))))

(bind-poly mdetrm mdetrmd)
(bind-poly mdetrm mdetrmf)

;; invert matrix (doubles)
(bind-func minvd
  (lambda (ma:double* k:i64 inv:double*)
    (let ((mb:double* (salloc (* k k)))
	  (fac:double* (salloc (* k k)))
	  (d:double 0.0)
	  (i 0) (j 0) (m 0) (n 0) (q:i64 0) (p:i64 0))
      (dotimes (q k)
	(dotimes (p k)
	  (set! m 0)
	  (set! n 0)
	  (dotimes (i k)
	    (dotimes (j k)
	      (pset! mb (+ (* i k) j) 0.0)
	      (if (and (<> i q) (<> j p))
		  (begin
		    (pset! mb (+ (* m (- k 1)) n)
			   (pref ma (+ (* i k) j)))
		    (if (< n (- k 2))
			(set! n (+ n 1))
			(begin
			  (set! n 0)
			  (set! m (+ m 1)))))
		  (begin 1))))
	  (pset! fac (+ (* q k) p)
		 (* (pow -1.0 (i64tod (+ q p)))
		    (mdetrmd mb (- k 1))))))
      (dotimes (i k)
	(dotimes (j k)
	  (pset! mb (+ (* i k) j)
		 (pref fac (+ (* j k) i)))))
      (set! d (mdetrmd ma k))
      (dotimes (i k)
	(dotimes (j k)
	  (pset! inv (+ (* i k) j)
		 (/ (pref mb (+ (* i k) j)) d))))
      inv)))

;; invert matrix (floats)
(bind-func minvf
  (lambda (ma:float* k:i64 inv:float*)
    (let ((mb:float* (salloc (* k k)))
	  (fac:float* (salloc (* k k)))
	  (d:float 0.0)
	  (i 0) (j 0) (m 0) (n 0) (q:i64 0) (p:i64 0))
      (dotimes (q k)
	(dotimes (p k)
	  (set! m 0)
	  (set! n 0)
	  (dotimes (i k)
	    (dotimes (j k)
	      (pset! mb (+ (* i k) j) 0.0)
	      (if (and (<> i q) (<> j p))
		  (begin
		    (pset! mb (+ (* m (- k 1)) n)
			   (pref ma (+ (* i k) j)))
		    (if (< n (- k 2))
			(set! n (+ n 1))
			(begin
			  (set! n 0)
			  (set! m (+ m 1)))))
		  (begin 1))))
	  (pset! fac (+ (* q k) p)
		 (* (powf -1.0 (i64tof (+ q p)))
		    (mdetrmf mb (- k 1))))))

      (dotimes (i k)
	(dotimes (j k)
	  (pset! mb (+ (* i k) j)
		 (pref fac (+ (* j k) i)))))
      (set! d (mdetrmf ma k))
      (dotimes (i k)
	(dotimes (j k)
	  (pset! inv (+ (* i k) j)
		 (/ (pref mb (+ (* i k) j)) d))))
      inv)))

;; poly to minv
(bind-poly minv minvd)
(bind-poly minv minvf)

;; some helpful matrix builders
;;
;; axis is the unit vector
;; around which you want to rotate
;;
;; column major!
;;
;; mat is a pointer to memory to
;; store the 4x4 matrix in
(bind-func rot_matrix_about_axis_d
  (lambda (theta:double axis:double* mat:double*)
    (let ((x (pref axis 0))
          (y (pref axis 1))
          (z (pref axis 2))
          (cost (cos theta))
          (sint (sin theta))
          (mcost (- 1.0 cost)))
      (pset! mat 0 (+ cost (* (* x x) mcost)))
      (pset! mat 1 (+ (* (* y x) mcost) (* z sint)))
      (pset! mat 2 (- (* (* z x) mcost) (* y sint)))
      (pset! mat 3 0.0)
      (pset! mat 4 (- (* (* x y) mcost) (* z sint)))
      (pset! mat 5 (+ cost (* (* y y) mcost)))
      (pset! mat 6 (+ (* (* z y) mcost) (* x sint)))
      (pset! mat 7 0.0)      
      (pset! mat 8 (+ (* (* x z) mcost) (* y sint)))
      (pset! mat 9 (- (* (* y z) mcost) (* x sint)))
      (pset! mat 10 (+ cost (* (* z z) mcost)))
      (pset! mat 11 0.0)
      (pset! mat 12 0.0)
      (pset! mat 13 0.0)
      (pset! mat 14 0.0)
      (pset! mat 15 1.0)      
      mat)))

;; some helpful matrix builders
;;
;; axis is the unit vector
;; around which you want to rotate
;;
;; column major!
;;
;; mat is a pointer to memory to
;; store the 4x4 matrix in
(bind-func rot_matrix_about_axis_f
  (lambda (theta:float axis:float* mat:float*)
    (let ((x (pref axis 0))
          (y (pref axis 1))
          (z (pref axis 2))
          (cost (cosf theta))
          (sint (sinf theta))
          (mcost (- 1.0 cost)))
      (pset! mat 0 (+ cost (* (* x x) mcost)))
      (pset! mat 1 (+ (* (* y x) mcost) (* z sint)))
      (pset! mat 2 (- (* (* z x) mcost) (* y sint)))
      (pset! mat 3 0.0)
      (pset! mat 4 (- (* (* x y) mcost) (* z sint)))
      (pset! mat 5 (+ cost (* (* y y) mcost)))
      (pset! mat 6 (+ (* (* z y) mcost) (* x sint)))
      (pset! mat 7 0.0)      
      (pset! mat 8 (+ (* (* x z) mcost) (* y sint)))
      (pset! mat 9 (- (* (* y z) mcost) (* x sint)))
      (pset! mat 10 (+ cost (* (* z z) mcost)))
      (pset! mat 11 0.0)
      (pset! mat 12 0.0)
      (pset! mat 13 0.0)
      (pset! mat 14 0.0)
      (pset! mat 15 1.0)
      mat)))

(bind-poly rot_matrix_about_axis rot_matrix_about_axis_d)
(bind-poly rot_matrix_about_axis rot_matrix_about_axis_f)

;;;;;;;;;; COMPLEX NUMBERS ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; xtlang's complex number types and helper functions
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(bind-type cpxd <double,double>)
(bind-type cpxf <float,float>)

;; conversion functions

(bind-func conjugate_cpxf
  (lambda (cpx_val:cpxf*)
    (let ((cpx_cnj:cpxf* (alloc 1)))
      (tfill! cpx_cnj
              (tref cpx_val 0)
              (* -1.0 (tref cpx_val 1)))
      cpx_cnj)))

(bind-func conjugate_cpxd
  (lambda (cpx_val:cpxd*)
    (let ((cpx_cnj:cpxd* (alloc 1)))
      (tfill! cpx_cnj
              (tref cpx_val 0)
              (* -1.0 (tref cpx_val 1)))
      cpx_cnj)))

(bind-poly conjugate_cpx conjugate_cpxf)
(bind-poly conjugate_cpx conjugate_cpxd)

(bind-func magnitude_squared_cpxf
  (lambda (cpx_val:cpxf*)
    (+ (powf (tref cpx_val 0) 2.0)
       (powf (tref cpx_val 1) 2.0))))

(bind-func magnitude_squared_cpxd
  (lambda (cpx_val:cpxd*)
    (+ (pow (tref cpx_val 0) 2.0)
       (pow (tref cpx_val 1) 2.0))))

(bind-func magnitude_cpxf
  (lambda (cpx_val:cpxf*)
    (sqrtf (+ (powf (tref cpx_val 0) 2.0)
                        (powf (tref cpx_val 1) 2.0)))))

(bind-func magnitude_cpxd
  (lambda (cpx_val:cpxd*)
    (sqrt (+ (pow (tref cpx_val 0) 2.0)
             (pow (tref cpx_val 1) 2.0)))))

(bind-func phase_cpxf
  (lambda (cpx_val:cpxf*)
    (atan2f (tref cpx_val 1)
            (tref cpx_val 0))))

(bind-func phase_cpxd
  (lambda (cpx_val:cpxd*)
    (atan2 (tref cpx_val 1)
           (tref cpx_val 0))))

(bind-poly magnitude_squared_cpx magnitude_squared_cpxf)
(bind-poly magnitude_squared_cpx magnitude_squared_cpxd)
(bind-poly magnitude_cpx magnitude_cpxf)
(bind-poly magnitude_cpx magnitude_cpxd)
(bind-poly phase_cpx phase_cpxf)
(bind-poly phase_cpx phase_cpxd)

(bind-func cart_to_pol_cpxf
  (lambda (cart:cpxf*)
    (let ((pol:cpxf* (alloc 1)))
      (tfill! pol
              (sqrtf (+ (powf (tref cart 0) 2.0)
                        (powf (tref cart 1) 2.0)))
              (atan2f (tref cart 1)
                      (tref cart 0)))
      pol)))

(bind-func pol_to_cart_cpxf
  (lambda (pol:cpxf*)
    (let ((cart:cpxf* (alloc 1)))
      (tfill! cart
              (* (tref pol 0)
                 (cosf (tref pol 1)))
              (* (tref pol 0)
                 (sinf (tref pol 1))))
      cart)))

(bind-func cart_to_pol_cpxd
  (lambda (cart:cpxd*)
    (let ((pol:cpxd* (alloc 1)))
      (tfill! pol
              (sqrt (+ (pow (tref cart 0) 2.0)
                       (pow (tref cart 1) 2.0)))
              (atan2 (tref cart 1)
                     (tref cart 0)))
      pol)))

(bind-func pol_to_cart_cpxd
  (lambda (pol:cpxd*)
    (let ((cart:cpxd* (alloc 1)))
      (tfill! cart
              (* (tref pol 0)
                 (cos (tref pol 1)))
              (* (tref pol 0)
                 (sin (tref pol 1))))
      cart)))

(bind-poly cart_to_pol cart_to_pol_cpxf)
(bind-poly cart_to_pol cart_to_pol_cpxd)
(bind-poly pol_to_cart pol_to_cart_cpxf)
(bind-poly pol_to_cart pol_to_cart_cpxd)

;; some helpers for working with buffers of cpxf/cpxd types

(bind-func fill_cpx_buffer_cpxf
  (lambda (re:float* im:float* com:cpxf* len:i64)
    (let ((i 0))
      (dotimes (i len)
	(tset! (pref-ptr com i) 0 (pref re i))
	(tset! (pref-ptr com i) 1 (pref im i))))
    void))

(bind-func fill_cpx_buffer_cpxd
  (lambda (re:double* im:double* com:cpxd* len:i64)
    (let ((i 0))
      (dotimes (i len)
	(tset! (pref-ptr com i) 0 (pref re i))
	(tset! (pref-ptr com i) 1 (pref im i))))
    void))

(bind-poly fill_cpx_buffer fill_cpx_buffer_cpxf)
(bind-poly fill_cpx_buffer fill_cpx_buffer_cpxd)

(bind-func conjugate_buffer_cpxf
  (lambda (signal:cpxf* conj:cpxf* len:i64)
    (let ((i 0))
      (dotimes (i len)
	(tset! (pref-ptr conj i)
	       1
	       (* -1.0 (tref (pref-ptr signal i) 1))))
      void)))

(bind-func conjugate_buffer_cpxd
  (lambda (signal:cpxd* conj:cpxd* len:i64)
    (let ((i 0))
      (dotimes (i len)
	(tset! (pref-ptr conj i)
	       1
	       (* -1.0 (tref (pref-ptr signal i) 1))))
      void)))

(bind-poly conjugate_buffer_cpx conjugate_buffer_cpxf)
(bind-poly conjugate_buffer_cpx conjugate_buffer_cpxd)

(bind-func buffer_cart_to_pol_cpxf
  (lambda (cart:cpxf* pol:cpxf* len:i64)
    (let ((i 0))
      (dotimes (i len)
	(tset! (pref-ptr pol i)
	       0
	       (sqrtf (+ (powf (tref (pref-ptr cart i) 0) 2.0)
                         (powf (tref (pref-ptr cart i) 1) 2.0))))
	(tset! (pref-ptr pol i)
	       1
	       (atan2f (tref (pref-ptr cart i) 1)
                       (tref (pref-ptr cart i) 0)))))
    void))

(bind-func buffer_pol_to_cart_cpxf
  (lambda (pol:cpxf* cart:cpxf* len:i64)
    (let ((i 0))
      (dotimes (i len)
	(tset! (pref-ptr cart i)
	       0
	       (* (tref (pref-ptr pol i) 0)
		  (cosf (tref (pref-ptr pol i) 1))))
	(tset! (pref-ptr cart i)
	       1
	       (* (tref (pref-ptr pol i) 0)
		  (sinf (tref (pref-ptr pol i) 1))))))
    void))

(bind-func buffer_cart_to_pol_cpxd
  (lambda (cart:cpxd* pol:cpxd* len:i64)
    (let ((i 0))
      (dotimes (i len)
	(tset! (pref-ptr pol i)
	       0
	       (sqrt (+ (pow (tref (pref-ptr cart i) 0) 2.0)
			(pow (tref (pref-ptr cart i) 1) 2.0))))
	(tset! (pref-ptr pol i)
	       1
	       (atan2 (tref (pref-ptr cart i) 1)
		      (tref (pref-ptr cart i) 0)))))
    void))

(bind-func buffer_pol_to_cart_cpxd
  (lambda (pol:cpxd* cart:cpxd* len:i64)
    (let ((i 0))
      (dotimes (i len)
	(tset! (pref-ptr cart i)
	       0
	       (* (tref (pref-ptr pol i) 0)
		  (cos (tref (pref-ptr pol i) 1))))
	(tset! (pref-ptr cart i)
	       1
	       (* (tref (pref-ptr pol i) 0)
		  (sin (tref (pref-ptr pol i) 1))))))
    void))

(bind-poly buffer_cart_to_pol buffer_cart_to_pol_cpxf)
(bind-poly buffer_cart_to_pol buffer_cart_to_pol_cpxd)
(bind-poly buffer_pol_to_cart buffer_pol_to_cart_cpxf)
(bind-poly buffer_pol_to_cart buffer_pol_to_cart_cpxd)

(bind-func buffer_re_only_cpxf
  "get the (float) real components of the complex buffer"
  (lambda (in_cpxf:cpxf*
      out_float:float*
      len:i64)
    (let ((i 0))
      (dotimes (i len)
	(pset! out_float
	       i
	       (tref (pref-ptr in_cpxf i) 0))))
    void))

(bind-func buffer_im_only_cpxf
  "get the (float) imaginary components of the complex buffer"
  (lambda (in_cpxf:cpxf*
      out_float:float*
      len:i64)
    (let ((i 0))
      (dotimes (i len)
	(pset! out_float
	       i
	       (tref (pref-ptr in_cpxf i) 1))))
    void))

(bind-func buffer_re_only_cpxd
  "get the (double) real components of the complex buffer"
  (lambda (in_cpxd:cpxd*
      out_double:double*
      len:i64)
    (let ((i 0))
      (dotimes (i len)
	(pset! out_double
	       i
	       (tref (pref-ptr in_cpxd i) 0))))
    void))

(bind-func buffer_im_only_cpxd
  "get the (double) imaginary components of the complex buffer"
  (lambda (in_cpxd:cpxd*
      out_double:double*
      len:i64)
    (let ((i 0))
      (dotimes (i len)
	(pset! out_double
	       i
	       (tref (pref-ptr in_cpxd i) 1))))
    void))

(bind-poly buffer_re_only buffer_re_only_cpxf)
(bind-poly buffer_im_only buffer_re_only_cpxf)
(bind-poly buffer_re_only buffer_re_only_cpxd)
(bind-poly buffer_im_only buffer_re_only_cpxd)

(bind-func buffer_cpxd_to_cpxf
  (lambda (in_cpxd:cpxd*
      out_cpxf:cpxf*
      len:i64)
    (let ((i 0))
      (dotimes (i len)
        (tset! (pref-ptr out_cpxf i)
               0
               (dtof (tref (pref-ptr in_cpxd i) 0)))
        (tset! (pref-ptr out_cpxf i)
               1
               (dtof (tref (pref-ptr in_cpxd i) 1)))))
    void))

(bind-func buffer_cpxf_to_cpxd
  (lambda (in_cpxf:cpxf*
      out_cpxd:cpxd*
      len:i64)
    (let ((i 0))
      (dotimes (i len)
        (tset! (pref-ptr out_cpxd i)
               0
               (ftod (tref (pref-ptr in_cpxf i) 0)))
        (tset! (pref-ptr out_cpxd i)
               1
               (ftod (tref (pref-ptr in_cpxf i) 1)))))
    void))

;;;;;;;;;; WINDOWING ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; these window functions fill buffer which represents the
;; associated window of length `window_length'.

(bind-func window_hamming
  (let ((i:i64 0))
    (lambda (window_buffer:double* window_length)
      (dotimes (i window_length)
        (pset! window_buffer i
               (* 0.5 (+ 1.0 (cos (/ (* TWOPI (i64tod i))
                                     (i64tod (- window_length 1))))))))
      void)))

(bind-func window_hanning
  (let ((i:i64 0))
    (lambda (window_buffer:double* window_length)
      (dotimes (i window_length)
        (pset! window_buffer i
               (+ 0.54 (* 0.46 (cos (/ (* TWOPI (i64tod i))
                                       (i64tod (- window_length 1))))))))
      void)))
