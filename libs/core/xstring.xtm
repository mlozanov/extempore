;;;;;;;;;;;;;
;; STRINGS ;;
;;;;;;;;;;;;;

(bind-type xstring_t <size_t,i8*>)

(bind-func print_xstring
  (lambda (xs:xstring_t*)
    (printf "%s" (tref xs 1))))

(bind-func println_xstring
  (lambda (xs:xstring_t*)
    (printf "%s\n" (tref xs 1))))

(bind-func xstring
  (lambda (s)
    (let ((str:xstring_t* (halloc))
          (lgth (strlen s))
          (news:i8* (halloc (+ 1 lgth))))
      (strcpy news s)
      (tset! str 0 lgth)
      (tset! str 1 news)
      str)))

(bind-func xstring_length
  (lambda (str:xstring_t*)
    (tref str 0)))

(bind-func cstring_from_xstring
  (lambda (str:xstring_t*)
    (tref str 1)))

(bind-func xstring_cat
  (lambda (s1:xstring_t* s2:xstring_t*)
    (xstring (strcat (tref s1 1)
                     (tref s2 1)))))

(bind-func xstring_cmp
  (lambda (s1:xstring_t* s2:xstring_t*)
    (strcmp (tref s1 1)
	    (tref s2 1))))

;; levenshtein edit distance

(bind-func xstring_levenshtein
  (lambda (s:xstring_t* t:xstring_t*)
    (let ((i 0) (j 0)
	  ;; column-major indexing closure
	  (s_cstr (cstring_from_xstring s))
	  (slen:i64 (xstring_length s))
	  (t_cstr (cstring_from_xstring t))
	  (tlen:i64 (xstring_length t))
	  (row:i64* (salloc (+ slen 1)))
	  (prev_row:i64* (salloc (+ slen 1)))
	  (min3 (lambda (a:i64 b c)
		  (if (< a b)
		      (if (< a c)
			  a c)
		      (if (< b c)
			  b c)))))
      (dotimes (i (+ tlen 1))
	(pset! prev_row i i))
      (dotimes (i slen)
	(pset! row 0 (+ i 1))
	(dotimes (j tlen)
	  (pset! row (+ j 1)
		 (min3 (+ (pref row j) 1)
		       (+ 1 (pref prev_row (+ j 1)))
		       (+ (pref prev_row j)
			  (if (= (pref s_cstr j)
				 (pref t_cstr i))
			      0 1)))))
	(let ((tmp_row:i64* null))
	  (set! tmp_row prev_row)
	  (set! prev_row row)
	  (set! row tmp_row)))
      (pref prev_row tlen))))

(bind-func xstring_similarity
  (lambda (s:xstring_t* t:xstring_t*)
    (/ 1.0 (i64tod (+ 1 (xstring_levenshtein s t))))))

;; (bind-func xstring_spn
;;   (lambda (s1:xstring_t* s2:xstring_t*)
;;     (strspn (tref s1 1)
;;             (tref s2 1))))

;; (bind-func xstring_cspn
;;   (lambda (s1:xstring_t* s2:xstring_t*)
;;     (strcspn (tref s1 1)
;;              (tref s2 1))))

;; (bind-func xstring_pbrk
;;   (lambda (s1:xstring_t* s2:xstring_t*)
;;     (xstring (strpbrk (tref s1 1)
;;                       (tref s2 1)))))
