;;; instruments.xtm -- instruments (core)

;; Author: Andrew Sorensen
;; Keywords: extempore

;;; Commentary:

;; This is for instruments which are solely written in scheme and
;; xtlang - no binding to external (that is, C) libraries.
;;
;; Any instruments which depend on external libraries are
;; in libs/external/instruments.xtm

;;; Code:

;; if not primary process
(if (not (ipc:get-process-name "primary"))
    (sys:load-escape "Please load xtm libraries into the primary process"))
;; if already loaded then break!
(if (defined? 'xtmlib_audioinst_loaded)
    (sys:load-escape "Instruments already loaded")) ;; break to top level

(define xtmlib_audioinst_loaded #t)

;; making and playing notes

;; relative time USING adsr_accum + local mzone
(bind-func note_c
  (lambda (start_time:double
      freq:double
      amp:double
      dur:double
      attack:double
      decay:double
      release:double
      sus_amp:double
      nstarts:double*
      idx:i64
      kernel:[double,double,double,double,double]*
      notezone:mzone*)
    (let ((env (if (< (+ attack decay) dur)
                   (adsr_accum_c 0.0 attack decay (- dur (+ attack decay)) release 1.0 sus_amp)
                   (adsr_accum_c 0.0 0.0 0.0 dur release 1.0 sus_amp)))
          (t 0.0)
          (ff (lambda (sample:double time:double channel:double)
                (if (< channel 1.0) (set! t (+ t 1.0)))
                (if (< t (+ dur release))
                    (kernel t channel freq (* (env t channel) amp))
                    (begin (pset! nstarts idx 9999999999999.0)
                           (llvm_zone_destroy notezone)
                           0.0)))))
      ff)))


;; NOTE!
;; (* 5.0 SAMPLERATE) is time padding
;; it is used because the decay length of the note may go
;; beyond the duration.
;; however making it longer means using more memory
;; it's a trade off!
(bind-func _play_note
  (lambda (time inst:[double,double,double,double,double*]* freq amp dur nargs:i64 dargs)
    (if (> freq 20.0)
        (let ((f (inst.new_note:[i64,double,double,double,double,i64,double*]*)))
          (f time freq dur amp nargs dargs)
          ;; so that we only copy an integer from memzone
          1)
        1)))

;; playnote wrapper
(define-macro (play-note time inst pitch vol dur . args)  
  (let ((nargs (length args)))
    `(let ((duration (* 1.0 ,dur))
           (dargs (sys:make-cptr ,(* 8 nargs))) ;; doubles
           (native (llvm:get-native-closure ,(symbol->string inst))))
       (dotimes (i ,nargs) (cptr:set-double dargs (* i 8) (eval (list-ref ',args i))))
       (if (cptr? native)
           (_play_note (integer->real ,time)
                       native
                       (midi2frq (* 1.0 ,pitch))
                       (/ (exp (/ ,vol 26.222)) 127.0)
                       duration
                       ,nargs
                       dargs)
           (print-error 'No 'inst 'named ,(symbol->string inst))))))


;; the play macro
(macro (play args)
       (if (symbol? (cadr args))
           `(play-note (*metro* beat) ,(cadr args) ,(caddr args) ,(cadddr args) (*metro* 'dur ,(car (cddddr args)))
                       ,@(cdr (cddddr args)))
           `(play-note (*metro* (+ beat ,(cadr args))) ,(caddr args) ,(cadddr args) ,(car (cddddr args))
                       (*metro* 'dur ,(car (cdr (cddddr args))))
                       ,@(cddr (cddddr args)))))


;; a macro for making extemore instruments
;; see http://benswift.me/2012-09-28-making-an-instrument.html

(define-macro (define-instrument name note_kernel effect_kernel . args)
  `(bind-func ,name
     (let* ((poly:i64 48)
            (notes:[double,double,double,double]** (zalloc poly))
            (attack:double 200.0)
            (decay:double 200.0)
            (release:double 1000.0)
            (sustain:double 0.6) ;; amplitude of the sustain
            (gain 2.0)
            (ii 0)
            (note_starts:double* (zalloc poly))
            (new_note (lambda (start freq dur amp nargs:i64 dargs)
                        (let ((free_note:i64 -1)
                              (iii 0)
                              (i 0))
                          (dotimes (i poly) ;; check for free poly spot           
                            (if (> (pref note_starts i) 9999999999998.0)
                                (set! free_note i)))
                          (if (> free_note -1) ;; if we found a free poly spot assign a note
                              (let ((note_zone (push_zone (* 1024 ,(if (null? args) 10 (car args))))))
                                (pset! notes free_note
                                       (note_c start freq amp dur
                                               attack decay release sustain
                                               note_starts free_note
                                               (,note_kernel nargs dargs)
                                               note_zone))
                                (pset! note_starts free_note start)
                                (pop_zone)
                                1)
                              0)))))
       (dotimes (ii poly) ;; sets all notes to inactive
         (pset! note_starts ii 9999999999999.0))
       (lambda (in:double time:double chan:double dat:double*)
         (let ((out:double 0.0)
               (k 0))
           (dotimes (k poly) ;; sum all active notes          
             (if (< (pref note_starts k) time)
                 (set! out (+ out (* 0.3 ((pref notes k) in time chan))))))
           (* gain (,effect_kernel out time chan dat)))))))

;; make synth defaults
(bind-func default_note_c
  (lambda (nargs:i64 dargs:double*)
    (let ((sawl (saw_c 0.0))
          (sawr (saw_c 0.0)))
      (lambda (time:double chan:double freq:double amp:double)
        (if (< chan 0.5)
            (* amp (/ 200.0 freq) (sawl amp freq))
            (* amp (/ 200.0 freq) (sawr amp freq)))))))

(bind-func default_fx
  (lambda (in:double time:double chan:double dat:double*)
    in))

(define-instrument definst default_note_c default_fx)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Default synth stuff
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(bind-func synth_note_c
  (let ((res 1.0)
        (res_ 0.0)
        (fxamp 0.0))
    (lambda (nargs:i64 dargs:double*)
      (let ((oscl (osc_c 0.0))
            (oscl3 (osc_c 0.0))
            (oscl2 (osc_c 0.0))
            (oscr (osc_c 0.25))
            (saw1 (saw_c 0.0))
            (saw2 (saw_c 0.0))
            (lpf1 (lpf_c))
            (lpf2 (lpf_c))
            (oscr3 (osc_c 0.25))
            (oscr2 (osc_c 0.25)))
        (lambda (time:double chan:double freq:double amp:double)
          (if (<> res res_)
              (begin (lpf2.res res)
                     (lpf1.res res)
                     (set! res_ res)))
          (if (< chan 1.0)
              (* amp (/ 5.0 (log freq)) ;; frequency scale amplitude
                 (+ (oscl2 1.0 (+ freq (* 10.0 (random))))
                    (lpf1 (saw1 fxamp freq) (* 5.0 freq) res)
                    (oscl 0.8 (+ freq (oscl3 (* 2.01 freq)
                                             (* freq 1.01))))))
              (* amp (/ 5.0 (log freq)) ;; frequency scale amplitude	       
                 (+ (oscr2 1.0 (+ freq (* 5.0 (random))))
                    (lpf2 (saw2 fxamp freq) (* 3.0 freq) res)
                    (oscr 0.8 (+ freq (oscr3 (* 0.99 freq)
                                             (* freq 0.99))))))))))))


(bind-func synth_fx 262144
  (let ((dleft (* 0.125 SAMPLERATE))
        (dlyl (delay_c dleft))
        (dright (* 0.33333333 SAMPLERATE))
        (dlyr (delay_c dright))
        (pan .5)
        (pan_old pan)
        (wet 1.0)
        (fb 0.5))
    (lambda (in:double time:double chan:double dat:double*)
      (if (< pan_old pan) ;; interpolate pan
          (set! pan_old (+ pan_old .001))
          (set! pan_old (- pan_old .001)))
      (cond ((< chan 1.0) 
             (dlyl (* 2.0 pan_old in) wet fb))
            ((< chan 2.0)
             (dlyr (* 2.0 (- 1.0 pan_old) in) wet fb))
            (else 0.0)))))

(define-instrument synth synth_note_c synth_fx)
(synth.attack 1000.0)
(synth.decay 1000.0)
(synth.sustain 0.9)
(synth.release 7000.0)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; extempore_pad 
;;
(bind-func epad_note_c
  (let ((res 0.1))
    (lambda (nargs:i64 dargs:double*)
      (let ((oscl (square_c 0.0)) 
            (oscr (square_c 0.1))
            (o1 (osc_c 0.0))
            (oscl2 (square_c (random)))
            (nval (if (> nargs 0) (pref dargs 0) 50.0))
            (vcfl (vcf1_c))
            (vcfr (vcf1_c))	  
            (oscr2 (square_c (random)))
            (ramp 0.0)
            (a (+ 1.0 (* 0.02 (random))))
            (b (+ 1.0 (* 0.02 (random)))))
        (lambda (time:double chan:double freq:double amp:double)
          (if (< chan 0.5)
              (* amp (vcfl (+ (oscl 0.3 freq nval)
                              (oscl2 0.3 (+ freq a) nval))
                           (+ 550.0 (* amp 8000.0))
                           (+ res 0.2)))
              (* amp (vcfr (+ (oscr 0.2 freq nval)
                              (oscr2 0.2 (* freq b) nval))
                           (+ 500.0 (* amp 10000.0))
                           res))))))))


(bind-func epad_fx 2000000
  (let ((pan .5)
        (c1 (chorus_c 0.0))
        (c2 (chorus_c 0.1))
        (rev1 (reverb_c 200.0))
        (rev2 (reverb_c 120.0))	
        (ipan pan)
        (cwet 0.5)
        (cfb 0.5)
        (wet 0.2)
        (fb 0.5)
        (opan (osc_c 0.0)))
    (lambda (in:double time:double chan:double dat:double*)      
      (set! pan (+ 0.5 (opan 0.2 3.0)))
      (cond ((< chan 1.0)
             (rev1 (c1 (* 2.0 pan in) cwet cfb)
                   wet fb))
            ((< chan 2.0)
             (rev2 (c2 (* 2.0 (- 1.0 pan) in) cwet cfb)
                   wet fb))
            (else 0.0)))))

(define-instrument epad epad_note_c epad_fx)
(epad.attack 1000.0)
(epad.decay 1000.0)
(epad.sustain 0.9)
(epad.release 7000.0)

;;;;;;;;;;;;;;;;;;;;;
;; extempore organ ;;
;;;;;;;;;;;;;;;;;;;;;

;; change drawbar_pos and recompile to change the organ tone

(bind-func organ_note_c
  (let ((num_drawbars 9)
        (freq_ratio:double* (zalloc num_drawbars))
        (drawbar_pos:i64* (zalloc num_drawbars)))
    (pfill! freq_ratio 0.5 1.5 1.0 2.0 3.0 4.0 5.0 6.0 8.0)
    (pfill! drawbar_pos 8 8 8 0 0 0 0 0 0)
    (lambda (nargs:i64 dargs:double*)
      (let ((tonewheel:[double,double,double]** (zalloc (* 2 num_drawbars)))
            (freq_smudge:double* (zalloc num_drawbars))
            (i 0))
        (dotimes (i num_drawbars)
          (pset! tonewheel (* i 2) (osc_c 0.0)) ; left
          (pset! tonewheel (+ (* i 2) 1) (osc_c 0.0)) ; right
          (pset! freq_smudge i (* 3.0 (random))))
        (lambda (time:double chan:double freq:double amp:double)
          (if (< chan 2.0)
              (let ((sum 0.0))
                (dotimes (i num_drawbars)
                  ;; (printf "i = %lld" i)
                  (set! sum (+ sum (* (/ (i64tod (pref drawbar_pos i)) 8.0)
                                      ((pref tonewheel (+ (* 2 i) (dtoi64 chan)))
                                       amp
                                       (+ (* freq (pref freq_ratio i))
                                          (pref freq_smudge i)))))))
                (/ sum (i64tod num_drawbars)))))))))

(bind-func organ_fx 100000
  (let ((flanl (flanger_c 1.0 0.0 0.6 1.0))
        (flanr (flanger_c 1.0 0.0 0.6 1.0))
        (treml (osc_c 0.0))
        (tremr (osc_c 0.0))
        (trem_amp 0.1)
        (wet 0.5)
        (fb 0.5)
        (trem_freq .0))
    (lambda (in:double time:double chan:double dat:double*)
      (cond ((= chan 0.0)
             (* (flanl in wet fb)
                (+ 1.0 (treml trem_amp trem_freq))))
            ((= chan 1.0)
             (* (flanr in wet fb)
                (+ 1.0 (tremr trem_amp (* 1.1 trem_freq)))))
            (else 0.0)))))

(define-instrument organ organ_note_c organ_fx)
(organ.attack 200.0)
(organ.decay 200.0)
(organ.release 200.0)
(organ.sustain 0.6)

;; fuzz bass

(bind-func fuzz_bass_note_c
  (lambda (nargs:i64 dargs:double*)
    (let ((sawl1 (saw_c 0.0))
          (sawr1 (saw_c 0.0))
          (sawl2 (saw_c 0.0))
          (sawr2 (saw_c 0.0))
          (smudge1 (+ 1.0 (* 0.001 (dsp_randn))))
          (smudge2 (+ 1.0 (* 0.001 (dsp_randn))))
          (lpfl (lpf_c))
          (lpfr (lpf_c))
          (ringl (ringmod_c))
          (ringr (ringmod_c)))
      (lambda (time:double chan:double freq:double amp:double)
        (cond ((= chan 0.0)
               (lpfl (ringl (+ (sawl1 amp (* freq smudge1))
                               (sawl2 amp (* freq smudge2)))
                            (* 4.0 freq)
                            0.3)
                     (* 8.0 freq)
                     0.5))
              ((= chan 1.0)
               (lpfr (ringr (+ (sawr1 amp (* freq smudge1))
                               (sawr2 amp (* freq smudge2)))
                            (* 4.0 freq)
                            0.3)
                     (* 8.0 freq)
                     0.5))
              (else 0.0))))))

(bind-func fuzz_bass_fx 10000000
  (lambda (in:double time:double chan:double dat:double*)
    in))

(define-instrument fuzz_bass fuzz_bass_note_c fuzz_bass_fx)
(fuzz_bass.attack 20.0)
(fuzz_bass.decay 20.0)
(fuzz_bass.release 100.0)
(fuzz_bass.sustain 0.6)

;; shimmer pad

(bind-func shimmer_pad_note_c
  (lambda (nargs:i64 dargs:double*)
    (let ((rectl (rect_c 0.0))
          (rectr (rect_c 0.0))
          (lfol (osc_c 0.0))
          (lfor (osc_c 0.0))
          (lpfl (lpf_c))
          (lpfr (lpf_c)))
      (lambda (time:double chan:double freq:double amp:double)
        (cond ((= chan 0.0)
               (lpfl (rectl amp freq (+ 0.5 (lfol 0.3 0.9))) (* 8.0 freq) 0.5))
              ((= chan 1.0)
               (lpfr (rectl amp freq (+ 0.5 (lfor 0.3 1.0))) (* 8.0 freq) 0.5))
              (else 0.0))))))

(bind-func shimmer_pad_fx
  (let ((dl (delay_c 10.0))
        (dr (delay_c 11.0))
        (wet 0.5)
        (fb 0.5))
    (lambda (in:double time:double chan:double dat:double*)
      (cond ((= chan 0.0)
             (dl in wet fb))
            ((= chan 1.0)
             (dr in wet fb))
            (else 0.0)))))

(define-instrument shimmer_pad shimmer_pad_note_c shimmer_pad_fx)
(shimmer_pad.attack 44100.0)
(shimmer_pad.sustain 1.0)
(shimmer_pad.release 44100.0)


;; A simple FM synth

;; You can push I higher than 1.0
;; But only when H is low
(bind-func simplefm_note_c
  (lambda (nargs:i64 dargs:double*)
    (let ((o1 (osc_c 0.0))
          (o2 (osc_c 0.0))
          (I (if (> nargs 0) (pref dargs 0) 0.1)) ;; modulation index (generally 0.0-1.0)
          (H (if (> nargs 1) (pref dargs 1) 10.0)) ;; harmonicity ratio (whole numbers 1.0 - 20.0)
          (out 0.0))
      (lambda (time:double chan:double freq:double amp:double)
        (if (< chan 0.5)
            (set! out (o1 (* (/ 5.0 (log freq)) amp)
                          (+ freq
                             (o2 (* (* H freq) I)
                                 (* H freq))))))
        (* 1.0 out)))))


(bind-func simplefm_fx 700000
  (let ((o1 (osc_c 0.0))
        (o2 (osc_c (* 0.5 PI))) 
        (cl (chorus_c 0.0))
        (cr (chorus_c 0.314))
        (del1 (delay_c (/ SR 2.0)))
        (del2 (delay_c (/ SR 3.0)))
        (vcfl (vcf_c 1))
        (vcfr (vcf_c 1))
        (res 0.4)        
        (revl (reverb_c 70.0))
        (revr (reverb_c 60.0))
        (cwet 0.5)
        (cfb 0.5)
        (dwet 0.5)
        (dfb 0.5)
        (wet 0.2)
        (fb 0.3))
    (lambda (in:double time:double chan:double dat:double*)
      (cond ((< chan 0.5)
             (revl (vcfl (del1 (cl in cwet cfb) dwet dfb)
                         (+ 8000.0 (o1 6000.0 0.3))
                         res)
                   wet
                   fb))
            ((< chan 1.5)
             (revr (vcfr (del2 (cr in cwet cfb) dwet dfb)
                         (+ 8000.0 (o2 6000.0 0.3))
                         res)
                   wet
                   fb))
            (else 0.0)))))

(define-instrument simplefm simplefm_note_c simplefm_fx)
(simplefm.attack 100.0)
(simplefm.decay 100.0)
(simplefm.sustain 0.8)
(simplefm.release 5000.0)


;; A simple FM pad
;; default is quite organy

;; You can push I higher than 1.0
;; But only when H is low
(bind-func fmpad_note_c
  (lambda (nargs:i64 dargs:double*)
    (let ((o1 (osc_c 0.0))
          (o2 (osc_c 0.0))
          (o3 (osc_c 0.0))
          (I (if (> nargs 0) (pref dargs 0) 0.2)) ;; modulation index (generally 0.0-1.0)
          (H (if (> nargs 1) (pref dargs 1) 2.0)) ;; harmonicity ratio (whole numbers 1.0 - 20.0)
          (res 0.0))
      (lambda (time:double chan:double freq:double amp:double)
        (if (< chan 0.5)
            (set! res (o1 (* (/ 5.0 (log freq)) amp)
                          (+ freq
                             (o2 (* (* H freq) I)
                                 (* H freq))))))
        (* 1.0 res)))))


(bind-func fmpad_fx 700000
  (let ((o1 (osc_c 0.0))
        (o2 (osc_c (* 0.5 PI))) 
        (cl (chorus_c 0.0))
        (cr (chorus_c 0.314))
        (cwet 0.5)
        (cfb 0.5)
        (vcfl (vcf_c 1))
        (vcfr (vcf_c 1))
        (res 0.4)        
        (revl (reverb_c 70.0))
        (revr (reverb_c 60.0))
        (wet 0.3)
        (fb 0.3))
    (lambda (in:double time:double chan:double dat:double*)
      (cond ((< chan 0.5)
             (revl (vcfl (cl in cwet cfb) ;(del1 (cl in))
                         (+ 8000.0 (o1 6000.0 0.6))
                         res)
                   wet fb))
            ((< chan 1.5)
             (revr (vcfr (cr in cwet cfb)
                         (+ 8000.0 (o2 6000.0 0.6))
                         res)
                   wet fb))
            (else 0.0)))))

(define-instrument fmpad fmpad_note_c fmpad_fx)
(fmpad.attack 10000.0)
(fmpad.decay 100.0)
(fmpad.sustain 1.0)
(fmpad.release 5000.0)


;; 
;; simple saw
;;
(bind-func sawbass_note_c
  (lambda (nargs:i64 dargs:double*)
    (let ((osc (saw_mc_c 0.0)))
      (lambda (time:double chan:double freq:double amp:double)
        (* amp (osc chan amp freq))))))


(bind-func sawbass_fx 500000
  (let ((cl (chorus_mc_c 2 0.0))
        (vcf (vcf_mc_c 1 2))
        (del (delay_t_st_c
              (* SR (/ 1.0 2.1)) (* SR (/ 1. 2.)) 0.0))
        (h (hann_t_mc_c 0.0)))
    (lambda (in:double time:double chan:double dat:double*)
      (del chan (* 1.0
                   (vcf chan (cl chan in 1.0 0.6)
                        (+ 350.0 (* 3000.0 (h chan time (* SR 8.))))
                        0.75))
           time 0.8 0.5))))

(define-instrument sawbass sawbass_note_c sawbass_fx)
(sawbass.attack 100.0)
(sawbass.decay 100.0)
(sawbass.sustain 1.0)
(sawbass.release 1000.0)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; An ipc helper for audio
;;

(define ipc:audio-setup
  (lambda (proc)
    (ipc:eval-string proc
                     "(define-macro (play-note time inst pitch vol dur . args)  
                       (let ((nargs (length args)))
                         `(let ((duration (* 1.0 ,dur))
                                (dargs (sys:make-cptr ,(* 8 nargs))) ;; doubles
                                (native (llvm:get-native-closure ,(symbol->string inst))))
                            (dotimes (i ,nargs) (cptr:set-double dargs (* i 8) (eval (list-ref ',args i))))
                            (if (cptr? native)
                                (_play_note (integer->real ,time)
                                            native
                                            (midi2frq (* 1.0 ,pitch))
                                            (/ (exp (/ ,vol 26.222)) 127.0)
                                            duration
                                            ,nargs
                                            dargs)
                                (print-error 'No 'inst 'named ,(symbol->string inst))))))
                     ;; passing a length of 0 will read the whole file
                     (define-macro (set-sampler-index inst fname index offset lgth)
                       `(let ((native (llvm:get-native-closure ,(symbol->string inst))))
                          (if (cptr? native)
                              (set_sample_data_ native
                                                ,fname
                                                (real->integer ,index)
                                                (real->integer ,offset)
                                                (real->integer ,lgth)))))
                     ;; this will match e.g. 60.aiff (where 60 is the midi note number)
                     (define parse-sample-names-1
                       (lambda (file-list)
                         (map (lambda (fname)
                                (let ((result (regex:matched fname \"([0-9]*)\.(wav|aif|aiff|ogg)$\")))
                                  (if (null? result)
                                      (begin (println 'Error: 'cannot 'parse 'filename: fname)
                                             #f)
                                      (list fname                          
                                            (string->number (cadr result)) 
                                            0                              
                                            0))))                          
                              file-list)))
                     ;; must be stereo samples of type wav aif or ogg
                     (define-macro (load-sampler sampler path . args)
                       (let ((parser (if (null? args) 'parse-sample-names-1 (car args))))
                         `(let ((file-list (sys:directory-list ,path)))
                            (for-each (lambda (samp-data)
                                        (if samp-data
                                            (set-sampler-index ,sampler
                                                               (if (string=? (sys:platform) \"Windows\")
                                                                   (car samp-data)
                                                                   (string-append ,path \"/\" (car samp-data)))
                                                               (cadr samp-data)
                                                               (caddr samp-data)
                                                               (cadddr samp-data))))
                                      (,parser file-list)))))
                     ;; (set-sample-offset sampler 60 50000)
                     ;; this would offset the sample at index 60 by 50000 samples
                     (define-macro (set-sample-offset inst index offset)
                       `(let ((native (llvm:get-native-closure ,(symbol->string inst))))
                          (if (cptr? native)
                              (set_sample_offset_ native
                                                  (real->integer ,index)
                                                  (real->integer ,offset)))))
                     ;; the play macro
                     (macro (play args)
                            (if (symbol? (cadr args))
                                `(play-note (*metro* beat) ,(cadr args) ,(caddr args) ,(cadddr args) (*metro* 'dur ,(car (cddddr args)))
                                            ,@(cdr (cddddr args)))
                                `(play-note (*metro* (+ beat ,(cadr args))) ,(caddr args) ,(cadddr args) ,(car (cddddr args))
                                            (*metro* 'dur ,(car (cdr (cddddr args))))
                                            ,@(cddr (cddddr args)))))")
    (ipc:bind-func proc '_play_note)
    (ipc:bind-func proc 'midi2frq)))

(println 'Establish 'audio 'on 'utility 'process)
(ipc:audio-setup "utility")
