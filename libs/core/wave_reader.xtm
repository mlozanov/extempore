;;; wave_reader.xtm -- a WAVE file reader written in pure xtlang

;; Author: Ben Swift
;; Keywords: extempore
;; Required dylibs: 

;;; Commentary:

;; 

;;; Code:

;; lib-loading config
(sys:load-preload-check 'wave-reader)
(define *xtmlib-wave-reader-loaded* #t)

;;;;;;;;;;;;;;;;;;;;;;;;;;
;; WAVE file read/write ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;

(bind-type wave_format_t <i32,i32,i16,i16,i32,i32,i16,i16>)

;; accessor functions
(bind-func wave_format_type
  (lambda (data:wave_format_t*)
    (i16toi64 (tref data 2))))

(bind-func wave_format_num_chan
  (lambda (data:wave_format_t*)
    (i16toi64 (tref data 3))))

(bind-func wave_format_samplerate
  (lambda (data:wave_format_t*)
    (i32toi64 (tref data 4))))

(bind-func wave_format_bit_depth
  (lambda (data:wave_format_t*)
    (i16toi64 (tref data 7))))

;; ;; AIFF file structs ("EA IFF 85" Standard for Interchange Format Files)
;; (bind-alias iff_ID i32)
;; (bind-type iff_chunk <iff_ID,i64,i8>)
;; (bind-type iff_container_chunk <iff_ID,i64,iff_ID,i8>)
;; (bind-type iff_common_chunk <iff_ID,i64,|2,i8|,iff_ID,i8>)

;; <num_chan,samplerate,bit_depth,num_frames,data_ptr>
(bind-type wave_audio_data_t <i64,i64,i64,i64,i8*>)

;; accessor functions
(bind-func wave_num_chan
  (lambda (data:wave_audio_data_t*)
    (tref data 0)))

(bind-func wave_samplerate
  (lambda (data:wave_audio_data_t*)
    (tref data 1)))

(bind-func wave_bit_depth
  (lambda (data:wave_audio_data_t*)
    (tref data 2)))

(bind-func wave_num_frames
  (lambda (data:wave_audio_data_t*)
    (tref data 3)))

(bind-func wave_audio_data_ptr
  (lambda (data:wave_audio_data_t*)
    (tref data 4)))


(bind-func wave_print_format_info
  (lambda (format:wave_format_t*)
    (printf "----WAVE file format info----\n")
    (let ((compression_code (wave_format_type format)))
      (cond ((= compression_code 0) (printf "Format: Unknown\n"))
            ((= compression_code 1) (printf "Format: PCM/uncompressed\n"))
            ((= compression_code 2) (printf "Format: Microsoft ADPCM\n"))
            ((= compression_code 6) (printf "Format: ITU G.711 a-law\n"))
            ((= compression_code 7) (printf "Format: ITU G.711 Âµ-law\n"))
            ((= compression_code 17) (printf "Format: IMA ADPCM\n"))
            ((= compression_code 20) (printf "Format: ITU G.723 ADPCM (Yamaha)\n"))
            ((= compression_code 49) (printf "Format: GSM 6.10\n"))
            ((= compression_code 64) (printf "Format: ITU G.721 ADPCM\n"))
            ((= compression_code 80) (printf "Format: MPEG\n"))
            (else (printf "Format: Unknown\n"))))
    (printf "  Channels: %lld\n" (wave_format_num_chan format))
    (printf "Samplerate: %dHz\n" (wave_format_samplerate format))
    (printf " Bit depth: %lld\n" (wave_format_bit_depth format))
    (printf "-----------------------------\n")))

;; RIFF data structure acess

(bind-func riff_chunk_ID
  (let ((riff_id_str:i8* (zalloc 5)))
    (lambda (chunk_ptr:i8*)
      (memcpy riff_id_str chunk_ptr 4)
      riff_id_str)))

(bind-func riff_chunk_check_ID
  (lambda (chunk_ptr:i8* id)
    ;; (riff_print_chunk_info chunk_ptr)
    (= (i64toi32 0) (memcmp (riff_chunk_ID chunk_ptr) id 4))))

(bind-func riff_chunk_size
  (lambda (chunk_ptr:i8*)
    (i32toi64 (pref (cast chunk_ptr i32*) 1))))

(bind-func riff_print_chunk_info
  (lambda (chunk_ptr:i8*)
    (printf "RIFF chunk info\n    ID: %s\n  size: %lld\n"
            (riff_chunk_ID chunk_ptr)
            (riff_chunk_size chunk_ptr))))

(bind-func riff_seek_next_subchunk
  (lambda (chunk_ptr:i8*)
    (pref-ptr chunk_ptr (+ 8 (riff_chunk_size chunk_ptr)))))

;; this doesn't work properly yet!
(bind-func riff_print_file_structure
  (let ((print_and_advance
         (lambda (ptr:i8* offset max_offset)
           (if (or (null? ptr) (> offset (+ max_offset 100)))
               (printf "Done.\n" )
               (let ((size (riff_chunk_size (pref-ptr ptr offset))))
                 (riff_print_chunk_info (pref-ptr ptr offset))
                 (print_and_advance ptr (+ size offset) max_offset))))))
    (lambda (file_ptr:i8*)
      ;; top-level RIFF chunk info
      (if (riff_chunk_check_ID file_ptr "RIFF")
          (begin (riff_print_chunk_info file_ptr)      
                 (print_and_advance file_ptr 12 (riff_chunk_size (pref-ptr file_ptr 12)))
                 0)
          -1))))

(bind-func wave_get_file_size
  (lambda (filename:i8*)
    (let ((fp (fopen filename "r"))
          (format_chunk_offset 12)
          (data_chunk_offset 36)
          (buf:i8* (zalloc (+ data_chunk_offset 8))))
      (if (null? fp)
          (begin (printf "Error opening WAVE file: %s\n" (ferror fp))
                 -1)
          (fread buf 1 44 fp)
          (fclose fp))
      (if (and (riff_chunk_check_ID buf "RIFF")
               (riff_chunk_check_ID (pref-ptr buf format_chunk_offset) "fmt ")
               (riff_chunk_check_ID (pref-ptr buf data_chunk_offset) "data"))
          ;; return data chunk size
          (+ 8 (riff_chunk_size buf))
          (begin
            (printf "WAVE Error: there was a problem with the chunk IDs\n")
            -1)))))

(bind-func read_file_into_memory
  (lambda (filename:i8* file_buf:i8* max_file_length)
    (let ((fp (fopen filename "r")))
      (if (null? fp)
          (begin (printf "Error opening %s:\n%s\n" filename (ferror fp))
                 -1)
          (let ((res (fread file_buf 1 max_file_length fp)))
            (fclose fp)
            (if (or (null? file_buf) (< res 0))
                (printf "Error during read %s:\n%s\n" filename (ferror fp)))
            res)))))

(bind-func wave_read_file
  (lambda (filename:i8* file_buf:i8*)
    (let ((format_chunk_offset 12)
          (data_chunk_offset 36)
          (file_size (wave_get_file_size filename))
          (wave_data:wave_audio_data_t* (zalloc)))
      (if (< file_size 0)
          (begin
            (printf "Error: file size < 0%\n" )
            wave_data)
          (let ((bytes_read (read_file_into_memory filename file_buf (+ file_size 100)))
                (data_ptr (pref-ptr file_buf data_chunk_offset))
                (data_size (riff_chunk_size data_ptr))
                (format (cast (pref-ptr file_buf format_chunk_offset) wave_format_t*)))
            (cond ((< data_size 1)
                   (printf "Problem with data chunk size."))
                  ((<> file_size bytes_read)
                   (printf "Problem reading file: expecting to read %lld bytes, only read %lld bytes\n" (+ file_size 8) bytes_read))
                  ;; check headers
                  ((not (and (riff_chunk_check_ID file_buf "RIFF")
                             (riff_chunk_check_ID (pref-ptr file_buf format_chunk_offset) "fmt ")
                             (riff_chunk_check_ID (pref-ptr file_buf data_chunk_offset) "data")))
                   (printf "WAVE Error: bad header.\n"))
                  (else
                   ;; read the actual audio data into audio_file_buf
                   ;; (it's the caller's job to make sure the buffer
                   ;; is big enough)
                   (begin
                     ;; <num_chan,samplerate,bit_depth,num_frames,data_ptr>
                     (tset! wave_data 0 (wave_format_num_chan format))
                     (tset! wave_data 1 (wave_format_samplerate format))
                     (tset! wave_data 2 (wave_format_bit_depth format))
                     (tset! wave_data 3 (/ data_size
                                           (* (wave_format_num_chan format)
                                              (/ (wave_format_bit_depth format) 8))))
                     (tset! wave_data 4 data_ptr)
                     (printf "\nSuccessfully read %lld bytes from file: name: %s\n" bytes_read filename)
                     (wave_print_format_info format))))
            wave_data)))))

;; 16-bit PCM (could maybe use generics here?)
(bind-func audio_player_c 
  (lambda (filename)
    (let ((file_size (wave_get_file_size filename))
          (buf:i16* (zalloc file_size))
          (wave_data (wave_read_file filename (cast buf i8*)))
          (num_chan (wave_num_chan wave_data))
          (num_frames (wave_num_frames wave_data))
          (audio_ptr (cast (wave_audio_data_ptr wave_data) i16*))
          (playhead:i64 0)
          (scale_factor (pow 2.0 (i64tod (- (wave_bit_depth wave_data) 1)))))
      (lambda (chan)
        (let ((int_chan (dtoi64 chan)))
          (if (= int_chan 0)
              (set! playhead (modulo (+ playhead 1) num_frames)))
          (if (< (dtoi64 chan) num_chan)
              (/ (i16tod (pref audio_ptr (+ (* playhead num_chan) int_chan)))
                 scale_factor)
              0.0))))))
