;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; native threads for xtlang
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;
;; where f must of type [i8*,i8*]*
;; (although the final i8* is inserted automatically as (cast null
;; i8*) so you don't need to explicity add this
;;
;; a is of type i8* and is the only argument passed to f
;;
(define-macro (spawn f a) 
  (let* ((sym (symbol->string (gensym)))
         (s (string-append "thread_" sym))
         (s2 (string-append s ":[i8*,i8*]*"))
         (n (string-append s "_native")))
    (set! f (cons '(cast null i8*) (reverse f)))
    (set! f (reverse f))
    (eval `(bind-func ,(string->symbol s2) ,f))
    `(thread_fork (llvm_get_function_ptr ,n) ,a)))

(define-macro (syncspawn f a) 
  (let* ((sym (symbol->string (gensym)))
         (s (string-append "thread_" sym))
         (s2 (string-append s ":[i8*,i8*]*"))
         (n (string-append s "_native")))
    (set! f (cons '(cast null i8*) (reverse f)))
    (set! f (reverse f))
    (eval `(bind-func ,(string->symbol s2) ,f))
    `(begin (pset! spawnz numspawn (thread_fork (llvm_get_function_ptr ,n) ,a))
            (set! numspawn (+ numspawn 1)))))

(define-macro (sync . expr)
  (set! expr (cons 'begin expr))
  (set! expr (replace-all expr '((spawn . syncspawn))))
  (let ((ijk (gensym)))
    `(let ((numspawn 0)
           (,ijk 0)
           (spawnz:i8** (alloc 10000)))
       ,expr
       (dotimes (,ijk numspawn)
         (thread_join (pref spawnz ,ijk)))
       ;;(printf "syncd %d threads\n" ,ijk)
       void)))


;; dodgy precompile
(bind-func divide-and-conquer (lambda (cnt:i32) void))

;; recursive thread test
;; each call spawns a new thread
(bind-func divide-and-conquer  
  (lambda (cnt:i32)
    (let ((a:i32* (alloc)))
      (pset! a 0 cnt)
      (spawn (lambda (args:i8*)
               (let ((cnt (pref (cast args i32*) 0)))
                 (printf "cnt:%d thread:%p\n" cnt (thread_self))
                 (thread_sleep 1 0) ;; first arg seconds second nanoseconds 
                 (if (> cnt 0)
                     (begin (divide-and-conquer (- cnt 1))
                            (divide-and-conquer (- cnt 1))))))
             (cast a i8*)))
    void))

(divide-and-conquer 3)

;; forka and join
(bind-func fork-join
  (lambda ()
    (let ((i 0) (a:i32* (alloc 4)))
      (pfill! a 1 2 3 4)
      (sync
       (dotimes (i 4)
         (spawn (lambda (args:i8*)
                  (thread_sleep (dtoi64 (* 3. (random))) 0)
                  (printf "Fork number %d\n" (pref (cast args i32*) 0)))
                (cast (pref-ptr a i) i8*))))
      (printf "Joined\n")
      void)))

(fork-join)

;; sleep test
(bind-func test2
  (lambda ()
    (let ((dat:double* (alloc)))
      (pfill! dat 1.0 2.0 3.0 4.0 5.0)
      (spawn (lambda (args)
               (let ((i 0))
                 (dotimes (i 5)
                   (printf "HI: %p %f\n"
                           (thread_self)
                           (pref (cast args double*) i))
                   (thread_sleep 1 0)))
               (cast null i8*))
             (cast dat i8*))
      (printf "HELLO WORLD %p\n" (thread_self))
      )))

(test2)
