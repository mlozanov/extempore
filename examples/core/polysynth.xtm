;;; polysynth.xtm -- and example of using synth instruments

;; Author: Andrew Sorensen
;; Keywords: extempore

;;; Commentary:

;; This example shows how to define your own polyphonic synths

;; NOTE: at the moment compiling in a secondary thread is a little
;;       flakey.  I'm working on this so in the mean time you'll
;;       just have to put up with the audio delays while compiling

;;; Code:

;; load the core/instruments library, which provides (among other
;; things) the define-instrument macro
(load "libs/core/instruments.xtm")

;; define a default instrument called synth
(define-instrument synth synth_note_c synth_fx)

(bind-func dsp:[double,double,double,double,double*]*
  (lambda (in time chan dat)
    (cond ((< chan 2.0)
	   (synth in time chan dat))
	  (else 0.0))))

(dsp:set! dsp)

(play-note (now) synth (random 60 90) 80 44100)

;; first let's play with synth
(define loop
  (lambda (beat offset dur)
    (play-note (*metro* beat) synth (+ offset (random '(60 62 63 65 67))) 80 2000)
    (callback (*metro* (+ beat (* dur .5))) 'loop
	      (+ beat dur)
	      offset
	      dur)))


(loop (*metro* 'get-beat 4) 0 1/2) ;; start one playing quavers
(loop (*metro* 'get-beat 4) 12 1/3) ;; another playing triplets

;; but we can change the instrument on the fly by swapping in a new
;; 'note kernel' function: the dsp code that gets rendered for
;; each note (it must be a closure that returns a closure)
;; 
;; lets try a simple sawwave synth note kernel
(bind-func saw_synth_note_c
  (lambda (nargs:i64 dargs:double*)
    (let ((sawl (saw_c))
	  (sawr (saw_c)))
      (lambda (time:double chan:double freq:double amp:double)
	(cond ((< chan 1.0)
	       (sawl amp freq))
	      ((< chan 2.0)
	       (sawr amp freq))
	      (else 0.0))))))

;; make a new saw_synth with this new note kernel
(define-instrument saw_synth saw_synth_note_c default_fx)
    

;; let's add some delay (via a stereo pair of delays) to the
;; global audio output
;;
;; NOTE: then 100000 is extra memory for our
;; delays
(bind-func dsp:[double,double,double,double,double*]* 1000000
  (let ((delayl (delay_c (dtoi64 (* 0.25 SAMPLERATE))))
	(delayr (delay_c (dtoi64 (* 0.33333333 SAMPLERATE)))))
    (lambda (in:double time:double chan:double dat:double*)
      (cond ((< chan 1.0)
	     (delayl (+ (* 1.0 (synth in time chan dat))
		       (saw_synth in time chan dat))))
	    ((< chan 2.0)	     
	     (delayr (+ (* 1.0 (synth in time chan dat))
		       (saw_synth in time chan dat))))
	    (else 0.0)))))


;; now start another temporal recursion which plays our new saw_synth
;; instrument
(define loop2
  (lambda (beat dur)
    (let ((pitch (random '(55 36 63 70 72 72 75))))
      (play-note (*metro* beat) saw_synth pitch 
		 (if (= pitch 36) 105 95) 600)
      (callback (*metro* (+ beat (* dur .5))) 'loop2
		(+ beat dur)
		dur))))

(loop2 (*metro* 'get-beat 4) 1/3)


;; again, we can recompile saw_synth_note_c into something 
;; else whenever we like
;; here's something more complex
(bind-func saw_synth_note_c
  (let ((res 15.0)
	(cof 8000.0))
    (lambda (nargs:i64 dargs:double*)
      (let ((sawl (saw_c))
	    (sawl2 (saw_c))
	    (modl (osc_c 0.0))
	    (lpfl (lpf_c))
	    (lpflmod (osc_c 0.0))
	    (sawr (saw_c))
	    (sawr2 (saw_c))
	    (modr (osc_c 0.0))
	    (lpfr (lpf_c))
	    (lpfrmod (osc_c 0.0)))
	(lambda (time:double chan:double freq:double amp:double)
	  (cond ((< chan 1.0)
		 (lpfl (* amp (+ (sawl (* 1.0 amp) freq) 
				 (sawl2 amp (+ freq (modl 100.0 0.2)))))
		       (+ cof (lpflmod freq 1.0))
                       res))
		((< chan 2.0)			     		  
		 (lpfr (* amp (+ (sawr (* 1.0 amp) freq) 
				 (sawr2 amp (+ freq (modr 50.0 0.5)))))
		       (+ cof (lpfrmod 1000.0 2.0))
                       res))
		(else 0.0)))))))


;; some event level modification to saw_synth
;; adjust res & cof of saw_synth_note_c (dsp kernel)
(define res-sweep
  (lambda (beat dur)
    (saw_synth_note_c.res (cosr 40.0 30.0 1/37))
    (saw_synth_note_c.cof (cosr 5000.0 3500.0 1/19))
    (callback (*metro* (+ beat (* dur .5))) 'res-sweep
	      (+ beat dur) dur)))

(res-sweep (*metro* 'get-beat 4.0) 1/8)
