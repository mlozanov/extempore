;;; sndfile.xtm -- an example of reading audio files using libsndfile

;; Author: Andrew Sorensen
;; Keywords: extempore
;; Required dylibs: libsndfile

;;; Commentary:

;; This simple example uses libsndfile for reading in a wav file for
;; sample playback.

;;; Code:

(define libsndfile
  (let ((platform (sys:platform)))
    (cond ((string=? platform "Linux") (sys:open-dylib "libsndfile.so"))
          ((string=? platform "Windows") (sys:open-dylib "libsndfile.dll"))
          ((string=? platform "OSX") (sys:open-dylib "libsndfile.dylib"))
          (else (print "Unknown platform: " platform)))))

;; bind 4 sndfile lib functions.  for more detail about what these
;; functions do, look at the sndfile.h header file which came with
;; your libsndfile src/package
(bind-lib libsndfile sf_open [i8*,i8*,i32,<i64,i32,i32,i32,i32,i32>*]*)
(bind-lib libsndfile sf_read_double [i64,i8*,double*,i64]*)
(bind-lib libsndfile sf_seek [i64,i8*,i64,i32]*)
(bind-lib libsndfile sf_strerror [i8*,i8*]*)

;; an audio buffer reader
(bind-func read_audio_file
  (lambda (fname dat offset num)
    (let ((info:<i64,i32,i32,i32,i32,i32>* (zalloc))
	  (audiofile (sf_open fname 16 info))
	  (channels (i32toi64 (tref info 2)))
	  (num_to_read (* num channels))
	  (num_to_offset (* offset channels))
	  (cnt (sf_seek audiofile num_to_offset 0))
	  (samples_read (sf_read_double audiofile dat num_to_read)))
      (if (<> null audiofile)
          (begin
            (printf "file name: %s\n" fname)
            (printf "samplerate: %d\n" (tref info 1))
            (printf "channels: %d\n" (tref info 2))
            (printf "samples read: %lld\n" samples_read))
          (printf "errors:\t\t %s\n" (sf_strerror audiofile)))
      dat)))

;; setup a closure to hold audio data.  This lambda takes one argument:
;; the (string) path to the audio file

(bind-func create_audio_closure
  (lambda (fname)    
    (let ((len 40.0)
          (offset 0.0)
          (adat:double* (zalloc (* 44100 2 (dtoi64 len))))
          (adat2 (read_audio_file fname
                                  adat
                                  (dtoi64 (* 44100.0 offset))
                                  (dtoi64 (* 44100.0 len)))))
      (lambda ()
        adat))))

;; set up the type alias for our dsp function
(bind-alias DSP [double,double,double,double,double*]*)
;; dsp function - this will play the sound file.  Remember to
;; change the file path to an audio file on your system
(bind-func dsp:DSP 50000000 ; make sure we allocate enough memory
  (let ((audio_closure (create_audio_closure "/path/to/audiofile.wav"))
        (audio_data (audio_closure)))
    (lambda (in time chan dat)
      (let ((pos (modulo time (* 40.0 44100.0))))
	(pref audio_data (dtoi64 (+ chan (* 2.0 pos))))))))

(dsp:set! dsp)

;; but we don't /have/ to play it back straight - we can mess with the
;; audio samples as we read from the buffer and 'write' to the audio
;; output.
;;
;; This version adds some sinusoidal 'noise' to the playhead position.
;; Try messing with the amplitude and frequency parameters below and
;; see what happes to the sound.  Try and figure out other ways to
;; mess with the sound in playback!
(bind-func dsp:DSP 50000000
  (let ((audio_closure (create_audio_closure "/path/to/audiofile.wav"))
        (audio_data (audio_closure)))
    (lambda (in time chan dat)
      (let ((pos (modulo time (* 40.0 44100.0))))
	(pref audio_data (dtoi64 (+ chan 
                                    (* 2.0 (+ pos
                                              (* 2.0 ; amplitude
                                                 (cos (* TWOPI 5.0 ; frequency
                                                         (/ time 44100.0)))))))))))))
