;;; video_gst.xtm -- Simple GStreamer demo

;; Author: Andrew Sorensen
;; Keywords: extempore
;; Required dylibs: gstreamer

;;; Commentary:

;;

;;; Code:

;; load gstreamer lib
(load "libs/external/gstreamer.xtm")
;; load opengl
(load "libs/external/opengl.xtm")

(define pr2 (gl:make-ctx ":0.0" #f 0.0 0.0 900.0 600.0))
;(gl-set-view 900.0 600.0)

(bind-func gl-set-view-ext
  (lambda (w:double h:double fov:double depth:double)
    (glViewport 0 0 (dtoi32 w) (dtoi32 h))
    (glMatrixMode GL_PROJECTION)
    (glLoadIdentity)
    (gluPerspective fov (/ w h) 1.0 depth)
    (glMatrixMode GL_MODELVIEW)
    (glEnable GL_DEPTH_TEST)
    (gl-setup)
    1))

;(gl-set-view-ext (* 3.0 1920.0) 1080.0 55.0 2000.0)
;(gl-set-view-ext (* 3.0 1920.0) 1080.0 35.0 2000.0)
(gl-set-view-ext 900.0 600.0 21.24 900.0) ;(* 3.0 1920.0))

(gl-load-extensions) ;; for windows 

(define scr-width 900.0) ;(* 3.0 1920.0))
(define scr-height 800.0) ;1080.0)
(bind-val scr_width double scr-width)
(bind-val scr_height double scr-height)


(bind-func on_pad_added
  (lambda (element:GstElement* pad:GstPad* data:gpointer)
    (printf "Dynamic pad created linking demux/decode\n")    
    (let ((decoder (cast data GstElement*))
	  (sinkpad (gst_element_get_static_pad decoder "sink")))
      (gst_pad_link pad sinkpad)
      (gst_object_unref sinkpad)
      void)))


(bind-func playbin_bus_call:GstBusFunc
  (lambda (bus msg data)
    (let ((playz (cast data GstElement*))
	  (msgtype (tref msg 3))
	  (time (tref msg 4)))
      (cond ((= msgtype GST_MESSAGE_EOS)
	     (printf "End of stream\n")
	     (gst_element_set_state playz GST_STATE_NULL)
	     (gst_object_unref (cast playz gpointer))
	     1)
	    ((= msgtype GST_MESSAGE_ERROR)
	     (let ((debug:|1,i8*|* (alloc))
		   (error:|1,GError*|* (alloc)))
	       (gst_message_parse_error msg (cast error GError**) (cast debug i8**))
	       (g_free (pref debug 0))
	       (printf "GstError: %s\n" (tref (pref error 0) 2))
	       (g_error_free (pref error 0))
	       1))
	    (else 1))
      (i64toi1 1))))


(bind-func fakesink_handoff
  (lambda (fakesink:GstElement* buffer:GstBuffer* pad:GstPad* data:gpointer)
    (printf "received buffer\n")
    void))


;; URI to any media
(bind-func playbin
  (lambda (path)
    (gst_init null null)
    (let ((playz (gst_element_factory_make "playbin2" "play"))
	  (vsink (gst_element_factory_make "fakesink" "video-output"))
	  (bus (gst_pipeline_get_bus (cast playz GstPipeline*)))
	  (G_TYPE_STRING (* 4 (g_type_fundamental 16)))
	  ;(G_TYPE_OBJECT (* 4 (g_type_fundamental 20)))
	  ;(G_TYPE_BOOLEAN (* 4 (g_type_fundamental 5)))
	  (G_TYPE_OBJECT (g_type_from_name "GObject"))	  
	  (G_TYPE_BOOLEAN (g_type_from_name "gboolean"))
	  (gval3:GValue* (alloc))	  
	  (gval2:GValue* (alloc))
	  (gval:GValue* (alloc)))
      (printf "vsink:%p\n" vsink)
      (g_value_init gval G_TYPE_STRING)
      (g_value_init gval2 G_TYPE_OBJECT)
      (g_value_init gval3 G_TYPE_BOOLEAN)      
      (g_value_set_string gval path)
      (g_value_set_object gval2 (cast vsink gpointer))
      (g_value_set_boolean gval3 1)
      
      (g_object_set_property (cast playz GObject*) "uri" gval)

      (g_object_set_property (cast playz GObject*) "video-sink" gval2)
      
      (g_object_set_property (cast vsink GObject*) "signal-handoffs" gval3)      

      (g_signal_connect (cast vsink gpointer) "handoff"
      			(cast (llvm_get_function_ptr "fakesink_handoff_native") GCallback)
      			null)
      
      (gst_bus_add_watch bus (cast (llvm_get_function_ptr "playbin_bus_call_native") GstBusFunc) (cast playz gpointer))
      (gst_object_unref bus)
      (gst_element_set_state playz GST_STATE_PLAYING)
      1)))


;; URI to any media
(bind-func playbin2
  (lambda (path)
    (gst_init null null)
    (let ((playz (gst_element_factory_make "playbin2" "play"))
	  (vsink (gst_element_factory_make "fakesink" "video-output"))
	  (bus (gst_pipeline_get_bus (cast playz GstPipeline*)))
	  (G_TYPE_STRING (* 4 (g_type_fundamental 16)))
	  ;(G_TYPE_OBJECT (* 4 (g_type_fundamental 20)))
	  ;(G_TYPE_BOOLEAN (* 4 (g_type_fundamental 5)))
	  (G_TYPE_OBJECT (g_type_from_name "GObject"))	  
	  (G_TYPE_BOOLEAN (g_type_from_name "gboolean"))
	  (gval3:GValue* (alloc))	  
	  (gval2:GValue* (alloc))
	  (gval:GValue* (alloc)))
      (printf "vsink:%p\n" vsink)
      (g_value_init gval G_TYPE_STRING)
      (g_value_init gval2 G_TYPE_OBJECT)
      (g_value_init gval3 G_TYPE_BOOLEAN)      
      (g_value_set_string gval path)
      (g_value_set_object gval2 (cast vsink gpointer))
      (g_value_set_boolean gval3 1)
      
      (g_object_set_property (cast playz GObject*) "uri" gval)
      
      (g_object_set_property (cast playz GObject*) "video-sink" gval2)
      
      ;; (g_object_set_property (cast vsink GObject*) "signal-handoffs" gval3)      
      
      ;; (g_signal_connect (cast vsink gpointer) "handoff"
      ;; 			(cast (llvm_get_function_ptr "fakesink_handoff_native") GCallback)
      ;; 			null)
      
      (gst_bus_add_watch bus (cast (llvm_get_function_ptr "playbin_bus_call_native") GstBusFunc) (cast playz gpointer))
      (gst_object_unref bus)
      ;(gst_element_set_state playz GST_STATE_PLAYING)
      playz)))

(bind-func startplayz
  (lambda (playz)
    (gst_element_set_state playz GST_STATE_PLAYING)))

(bind-func test
  (lambda (n)
    (gst_init null null)
    (printf "%lld\n" (g_type_from_name n))))

;;   caps = gst_caps_new_simple ("image/jpeg",
;;                               "bpp", G_TYPE_INT, 24, "depth",
;; G_TYPE_INT, 24,
;;                               "pixel-aspect-ratio", GST_TYPE_FRACTION,
;; 1, 1,
;;                               "endianness", G_TYPE_INT, G_BIG_ENDIAN,
;;                               "red_mask", G_TYPE_INT, 0xff0000,
;;                               "green_mask", G_TYPE_INT, 0x00ff00,
;;                               "blue_mask", G_TYPE_INT, 0x0000ff,
;;                               NULL);

;;   g_signal_emit_by_name (pipeline, "convert-frame", caps, &buffer);



(bind-func render-frame
  (lambda (playz:GstElement*)
    (let ((buf:GValue* (alloc))
	  (ply:GValue* (alloc))
	  (cps:GValue* (alloc))
	  (ptr:GValue* (alloc))
	  (w:gint* (alloc))	  
	  (h:gint* (alloc))
	  (bpp:gint* (alloc))
	  (caps:GstCaps* (gst_caps_from_string "video/x-raw-yuv, width=(int)1280, height=(int)720, framerate=(fraction)24/1, format=(fourcc)I420, interlaced=(boolean)false, pixel-aspect-ratio=(fraction)1/1")))
;	  (caps:GstCaps* (gst_caps_from_string "video/x-raw-rgb, width=(int)1280, height=(int)720, bpp=(int)24, depth=(int)24, endianness=(int)1234, framerate=(fraction)24/1")))
      (printf "GSTVersion: %s\n" (gst_version_string))
      
      (printf "caps: %s\n" (gst_caps_to_string caps))
      ;(g_value_init buf (g_type_from_name "GstMiniObject"))
      
      (g_value_init ply (g_type_from_name "GstElement"))
      (g_value_set_object ply (cast playz gpointer))
      (printf "object?:%d\n" (g_type_check_value_holds ply (g_type_from_name "GObject")))
      
      (g_value_init cps (g_type_from_name "GstCaps"))
      (g_value_set_boxed cps (cast caps gpointer))      
      (printf "boxed?:%d\n" (g_type_check_value_holds cps (g_type_from_name "GBoxed")))
      
      ;; (g_value_init cps (g_type_from_name "GstMiniObject"))
      ;; (gst_value_set_mini_object cps (cast caps GstMiniObject*))       
      ;; (printf "boxed?:%d\n" (g_type_check_value_holds cps (g_type_from_name "GstMiniObject")))
      
      (g_value_init ptr (g_type_from_name "gpointer"))
      (g_value_set_pointer ptr null)
      (printf "pointer?:%d\n" (g_type_check_value_holds ptr (g_type_from_name "gpointer")))

      (g_value_init buf (g_type_from_name "GstBuffer"))
      (gst_value_set_mini_object buf null) 
      (printf "object?:%d\n" (g_type_check_value_holds buf (g_type_from_name "GstMiniObject")))
      
      ;; (g_value_init buf (g_type_from_name "GstElement"))
      ;; (g_value_set_object buf null)      
      ;; (printf "object?:%d\n" (g_type_check_value_holds buf (g_type_from_name "GObject")))

      ;(g_object_get_property (cast playz GObject*) "frame" buf)
      
      (let ((garr:|3,GValue*|* (alloc)))
      	(aset! garr 0 ply)
      	(aset! garr 1 cps)
      	(aset! garr 2 ptr)

	(printf "start\n")
      	(g_signal_emitv (pref (cast garr GValue**) 0)
      			(g_signal_lookup "convert-frame" (g_type_from_name "GstPlayBin2"))
      			0
      			buf)
	(printf "stop\n")
	)
      
      (printf "TYPE:%lld:%s\n" (tref buf 0) (g_type_name (tref buf 0)))
;; 	(let ((gstbuf (cast (gst_value_get_mini_object buf) GstBuffer*))
;; 	      (gstcaps (tref gstbuf 5)))
;;        	  (printf "caps: %s\n" (gst_caps_to_string gstcaps))))
      
      ;; 	(let ((gstbuf (cast (gst_value_get_mini_object buf) GstBuffer*))
      ;; 	      (gstcaps (tref gstbuf 5))
      ;; 	      (capsstruct (gst_caps_get_structure gstcaps 0)))
      ;; 	  (printf "caps: %s\n" (gst_caps_to_string gstcaps))
      ;; 	  (gst_structure_get_int capsstruct "width" w)
      ;; 	  (gst_structure_get_int capsstruct "height" h)
      ;; 	  (gst_structure_get_int capsstruct "pixel-width" bpp)
      ;; 	  (printf "w:%d h:%d bpp:%d datasize:%d\n" (pref w 0) (pref h 0) (pref bpp 0) (tref gstbuf 2)))
      ;; 	)
      
      ;; (glLoadIdentity)
      ;; (glClear (+ GL_DEPTH_BUFFER_BIT GL_COLOR_BUFFER_BIT))
      ;; (glClearColor 1.0 0.0 0.0 1.0)
      ;; (gl-load-tex (pref w 0) (pref h 0) 3 GL_UNSIGNED_BYTE (tref gstbuf 1) 1)
      ;; (gl-draw-img -1.0 -1.0 2.0 2.0 0.0 1)
      void)))


;; message loop
(bind-func g_loop
  (lambda ()
    (g_main_context_iteration null 0)))

(define msg-loop
  (lambda ()
    (g_loop)
    (callback (+ (now) 2000) 'msg-loop)))

;; start GST msg loop
(msg-loop)


(define playloop
  (lambda (beat playz dur)
    (render-frame playz)
    (gl:swap-buffers pr2)))
;    (callback (*metro* (+ beat (* .5 dur))) 'playloop (+ beat dur) playz dur)))

(define playloop)

(define playz (playbin2 "file:///home/andrew/Videos/stp_model.mov"))
(startplayz playz)
(playloop (*metro* 'get-beat 4) playz 1/8)



;; start audio playback
;; (playbin "file:///home/andrew/Music/Enigma/Enigma/02\ Track\ 02.mp3")
;; ;; 1
;(playbin2 "file:///home/andrew/Videos/stp_model.mov")
;(playbin2 "file:///home/andrew/Videos/stp_model.mov")


;; ;; 2
;; (playbin "file:///home/andrew/Videos/stp_model.mov")
;; ;; 3
;; (playbin "file:///home/andrew/Videos/stp_model.mov")

;; (ogg_audio "/tmp/audio.ogg")
