
;; xtmrender.xtm
;;
;; using the default xtm OpenGL pipeline
;;
;; Author: Andrew Sorensen
;; Keywords: extempore
;;
;;
;; NOTES for BLENDER MODELS
;;
;; you can download the blender models from:
;;
;; http://extempore.moso.com.au/extras/peppino.blend
;; http://extempore.moso.com.au/extras/scene.blend
;; http://extempore.moso.com.au/extras/dome_cut.blend
;;
;; or use your own models ;)
;;
;; smooth shading ONLY so ...
;;
;; 1) Blender 2.6 models not supported yet
;; use Blender 2.5.
;;
;; 2) make sure model is smooth shaded in blender
;; then apply modifier (edge split) for any
;; meshes that you want flat shaded.
;;
;; 3) If your meshes have a strange black grainy
;; look then you'll need reverse the GL_FRONT/GL_BACK
;; face culling in the FIRST PASS of the render
;;
;; 4) You will probably need to do a rotation
;; of the model around the X axis.  It might be
;; easier to set this up in blender before export
;; (i.e. Y should be up not Z)
;;

;;; Code:

;; make sure you include / on the end
(define path "/Users/sorensen/Documents/models/")

(define fullscreen #f)
;; (define width 1920.0)
;; (define height 1200.0)
(define width 1024.0)
(define height 768.0)

(bind-val width float width)
(bind-val height float height)

;; setup opengl
(define glctx (gl:make-ctx ":0.0" fullscreen 0.0 0.0 width height))

;; first try to load from prebuilt stdlib
(sys:load "libs/xtm.xtm")
;; failing that compile on-the-fly
(sys:load "libs/core/math.xtm")
(sys:load "libs/external/opengl.xtm")
(sys:load "libs/external/shaders.xtm")
(sys:load "libs/external/assimp.xtm")

(bind-func build_pyramid_node
  (lambda (size:float)
    (let ((dat:float* (salloc (* 3 12)))
          (height (sqrtf (- (* size size) (* (* .5 size) (* .5 size)))))
          (hp (* height .5)) (hn (* height -.5))
          (n (* -0.5 size)) (p (* 0.5 size)))
      ;; 0  0. hp 0.
      ;; 1  p  hn p
      ;; 2  n  hn p
      ;; 3  0. hn n
      (pfill! dat
              p hn p n hn p 0. hp 0.  ;; 1 2 0              
              0. hn n 0. hp 0. n hn p ;; 3 0 2
              n hn p p hn p 0. hn n   ;; 2 1 3
              p hn p 0. hp 0. 0. hn n ;; 1 0 3
              )
      (xtm_make_node "pyramid" dat 12 1.0 0.0 1.0))))


;; for lights and cameras
(bind-func prerender:XTMRENDERCB
  (lambda (frame shader m v p data)
    (xtm_light_pos 1 0.0 5.0 15.0)
    (xtm_light_tgt 1 1.0 2.0 0.0)
    (xtm_light_up 1 0.0 1.0 0.0)        
    (xtm_light_diffuse 1 1.0 0.9 0.7 1.0)
    (xtm_light_power 1 30.0)
    (xtm_light_angle 1 60.0)

    (xtm_light_pos 2 10.0 6.0 5.0)
    (xtm_light_tgt 2 0.0 0.0 -5.0)
    (xtm_light_up 2 0.0 1.0 0.0)        
    (xtm_light_diffuse 2 1.0 0.3 0.6 1.0)
    (xtm_light_power 2 30.0)
    (xtm_light_angle 2 60.0)

    (xtm_light_pos 3 -10.0 5.0 10.0)
    (xtm_light_tgt 3 0.0 0.0 -5.0)
    (xtm_light_up 3 0.0 1.0 0.0)        
    (xtm_light_diffuse 3 0.3 1.0 0.6 1.0)
    (xtm_light_power 3 30.0)
    (xtm_light_angle 3 60.0)
    
    (xtm_camera_pos 0.0 10.0 20.0)
    (xtm_camera_tgt 0.0 0.0 0.0)
    (xtm_camera_up 0.0 1.0 0.0)
    void
    ))

;; for models
(bind-func render:XTMRENDERCB
  (lambda (frame shader m v p data)
    (let ((nodes:xtm_node** (cast data xtm_node**)))
      (scale_matrix m 1.5 1.5 1.5)
      (translate_matrix m 2.0 -1.9 0.0)            
      (rotate_matrix m (* .00005 (i64tof (now))) 0.0 1.0 0.0)
      (xtm_update_matrices shader m v p)
      (xtm_draw_model (pref nodes 0) shader m v p)
      (fill_identity_matrix m)
      (xtm_update_matrices shader m v p)      
      (xtm_draw_model (pref nodes 1) shader m v p)
      (xtm_draw_model (pref nodes 2) shader m v p)
      (translate_matrix m 1.0 5.5 -5.0)
      (rotate_matrix m (* .00001 (i64tof (now))) 1.0 1.0 1.0)
      (xtm_update_matrices shader m v p)            
      (xtm_draw_node (pref nodes 3) shader m v p)
      void)))

(bind-func gl_render
  (let ((models:xtm_node** (alloc 4)))
    (lambda (model1:xtm_node* model2:xtm_node* model3:xtm_node* model4:xtm_node*)
      (pfill! models model1 model2 model3 model4)
      (xtm_render prerender render null null (cast models i8*))
      void)))

;; standard impromptu callback
(define opengl-loop
  (lambda (time dur model1 model2 model3 model4 degree)
    (let ((v (now)))
      (gl_render model1 model2 model3 model4)
      (gl:swap-buffers glctx)
      )
    (callback (+ time (* dur .1)) 'opengl-loop (+ time dur) dur
              model1 model2 model3 model4 (+ degree .5))))

(define peppino (assimp_load_model path "peppino.blend"))
(define scene (assimp_load_model path "scene.blend"))
(define dome (assimp_load_model path "dome_cut.blend" (+ aiProcess_Triangulate aiProcess_FlipWindingOrder)))
(define pyramid (build_pyramid_node 3.0))

(xtm_render_setup (real->integer width) (real->integer height))
 
(opengl-loop (now) 5000 peppino scene dome pyramid 70.0)

