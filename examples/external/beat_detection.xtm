;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; beat detection in extemopore

;; this example shows how we can use the fft functions to detect
;; beat/event onsets (particularly noisy ones like drum hits).

;; need to create the context before loading the graphics library
(define ctx (gl:make-ctx ":0.0" #f 0.0 0.0 1080.0 720.0))

;; load the libraries we need
(load "libs/core/audio_dsp.xtm")
(load "libs/core/math.xtm")
(load "libs/external/sndfile.xtm")
(load "libs/external/fft.xtm")
(load "libs/external/opengl.xtm")

;; take the time_domain signal (time_buffer) and return the
;; (magnitude) spectrum
(bind-func calculate_spectrum
  (let ((spectrum:double* (* 2 (zalloc nbins))) ;double length because
                                        ;we want the previous spectrum
                                        ;as well as the current one
                                        ;(to take the difference)
        (i:i64 0))
    (lambda (audio:double* window_size time_buffer freq_buffer)
      (dotimes (i window_size)
        ;; add sum of L and R channels into real component
        ;; of time_buffer (which is a buffer of complex values
        (tset! (pref-ptr time_buffer i) 0
               (+ (pref audio (* 2 i)) ; L channel
                  (pref audio (+ 1 (* 2 i)))))) ; R channel
      ;; take DFT, store results in freq_buffer
      (fft_cpxd time_buffer freq_buffer window_size)
      (bin_spectrum spectrum freq_buffer window_size nbins))))

;; set up the type alias for our dsp function
(bind-alias DSP [double,double,double,double,double*]*)
;; dsp function - this will play the sound file.  Remember to
;; change the file path to an audio file on your system
(bind-func dsp:DSP 100000000 ; make sure we allocate enough memory
  (let ((audio_length 60)
        (fft_window_size 1024)
        (audio:double* (zalloc (* 44100 2 audio_length)))
        (samples_read (read-audio-data "/Users/ben/Desktop/peg.wav"
                                       audio
                                       0
                                       (* 44100 audio_length)))
        (playhead 0)
        (time_buffer:cpxd* (zalloc fft_window_size))
        (freq_buffer:cpxd* (zalloc fft_window_size))
        (i:i64 0))
    (lambda (in time chan dat)
      (if (and (= (modulo playhead fft_window_size) 0)
               (= chan 0.0))
          (mag_spectrum (pref-ptr audio playhead) fft_window_size
                        time_buffer freq_buffer))
      ;; increment playhead once per (stereo) pair of samples
      (if (= chan 1.0)
          (set! playhead (modulo (+ playhead 1)
                                 (* audio_length 44100))))
      ;; play audio
      (pref audio (+ (dtoi64 chan) (* 2 playhead))))))

(dsp:set! dsp)

(bind-func gl-draw
  (let ((size 0.1))
    (lambda (degree)
      (glClear (+ GL_COLOR_BUFFER_BIT GL_DEPTH_BUFFER_BIT))
      (glLoadIdentity)
      (glTranslated 0.0 -1.0 0.0)
      (glBegin GL_QUADS)
      (glVertex2d 0.0 0.0)
      (glVertex2d size 0.0)
      (glVertex2d size size)
      (glVertex2d 0.0 size)       
      (glEnd))))

;; the animation callback - remember this is in scheme, not xtlang
(define spectrum-animation
  (lambda (time fps)
    (gl-draw)
    (gl:swap-buffers ctx)
    (callback (+ time (* 0.5 (/ *samplerate* fps)))
              'spectrum-animation
              (+ time (/ *samplerate* fps))
              fps)))

(spectrum-animation (now) 30)
