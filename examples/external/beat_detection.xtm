;;; beat_detection.xtm -- real-time audio onset detection

;; Author: Ben Swift
;; Keywords: extempore
;; Required dylibs: kiss_fft, libsndfile

;;; Commentary:

;; this example shows how we can use the fft functions to detect
;; note/event onsets (especially noisy ones like drum hits).

;;; Code:

;; need to create the context before loading the graphics library
(define ctx (gl:make-ctx ":0.0" #f 0.0 0.0 1080.0 720.0))

;; load the libraries we need
(load "libs/core/audio_dsp.xtm")
(load "libs/core/math.xtm")
(load "libs/external/sndfile.xtm")
(load "libs/external/fft.xtm")
(load "libs/external/opengl.xtm")

(bind-val buff_len_default i64 4096)

;; add sum of L and R channels into real component
;; of time_buffer (which is a buffer of complex values)
(bind-func preprocess_audio 100000
  (let ((window_buffer:double* (zalloc buff_len_default))
        (refresh_window:i64 1)
        (out:cpxd* (zalloc buff_len_default))
        (i:i64 0))
    (lambda (in_stereo:double* len)
      (if (= refresh_window 1)
          (begin (window_hanning window_buffer len)
                 (set! refresh_window 0)))
      (dotimes (i len)
        ;; set processed values into the real part of the 'out'
        ;; complex buffer
	(tset! (pref-ptr out i) 0
	       (* (+ (pref in_stereo (* 2 i))         ; L channel
		     (pref in_stereo (+ 1 (* 2 i))))  ; R channel
		  (pref window_buffer i))))
      out)))

(bind-func rectified_difference 100000
  (let ((prev_spectrum:double* (zalloc buff_len_default)))
   (lambda (spectrum:cpxd* len)
     (let ((i:i64 0)
           (sum 0.0))
       ;; the spectrum is real (it will be symmetrical) so we only have
       ;; to sum over the first half
       (dotimes (i (/ len 2))
         (let ((magnitude (magnitude_cpxd (pref-ptr spectrum i)))
               (diff (* (- magnitude (pref prev_spectrum i))
                        ;; weight diffs by frequency
                        (i64tod i))))
           (pset! prev_spectrum i magnitude)
           ;; only take the positive differences
           (if (> diff 0.0) (set! sum (+ sum diff)))))
       sum))))

(bind-func onset_detection 100000
  (let ((max_val 0.0))
    (lambda (value)
      ;; basic ringbuffer
      ;; (set! sum (+ sum  (- value (pref dbuf (modulo dbuf_offset dbuf_length)))))
      ;; (set! dbuf_offset (modulo (+ dbuf_offset 1) dbuf_length))
      ;; (pset! dbuf dbuf_offset value)
      ;; (if (> value (* (/ sum (i64tod dbuf_length))
      ;;                 threshold))
      (if (> value max_val)
          (set! max_val value))
      (if (> value (* 0.1 max_val))
          1 0))))

;; set up the type alias for our dsp function
(bind-alias DSP [double,double,double,double,double*]*)
;; dsp function - this will play the sound file.  Remember to
;; change the file path to an audio file on your system
(bind-func dsp:DSP 100000000 ; make sure we allocate enough memory
  (let ((fft_len 256)
        (freq_buffer:cpxd* (zalloc buff_len_default))
        (audio (make_audio_closure "/Users/ben/Music/samples/drums.wav" 0 0))
        (onset_flag 0)
        (playhead null))
    (lambda (in time chan dat)
      (set! playhead (audio))
      (if (and (= (modulo (dtoi64 time) fft_len) 0)
               (= chan 0.0))
          ;; have to let-bind the audio ptr, because we need to use it
          ;; twice (once for the fft, once for playback) but we don't
          ;; want to increment the audio playhead twice!
          (begin (fft_cpxd (preprocess_audio playhead fft_len)
                           freq_buffer fft_len)
                 (set! onset_flag
                       (+ onset_flag
                          (onset_detection (rectified_difference freq_buffer
                                                                 fft_len))))))
      (pref playhead 0))))

(dsp:set! dsp)

(bind-func gl_draw
  (let ((i 0.0)
        (len (/ SAMPLERATE 30.0)))
    (lambda (ptr:double* onset_flag:i64)
      (glClear (+ GL_COLOR_BUFFER_BIT GL_DEPTH_BUFFER_BIT))
      (glLoadIdentity)
      (glTranslated -1.0 0.0 0.0)
      (glBegin GL_LINES)
      (if (> onset_flag 0)
          (dotimes (i len)
            (begin (glColor3d (/ i len) 0.0 0.3)
                   (glVertex2d (* 2.0 (/ i len))
                               (pref ptr (dtoi64 i))))))
      (glEnd))))

;; the animation callback - remember this is in scheme, not xtlang
(define beat-visualisation
  (lambda (time fps)
    (gl_draw (dsp.playhead) (dsp.onset_flag))
    (gl:swap-buffers ctx)
    (dsp.onset_flag 0)
    (callback (+ time (* 0.5 (/ *samplerate* fps)))
              'beat-visualisation
              (+ time (/ *samplerate* fps))
              fps)))

(beat-visualisation (now) 60)
