;;; sampler.xtm -- how to use the builtin sampler

;; Author: Andrew Sorensen, Ben Swift
;; Keywords: extempore
;; Required dylibs: libsndfile

;;; Commentary:

;; NOTE at the moment compiling in a secondary thread is a little
;; flaky. I'm working on this so in the mean time you'll just have to
;; put up with the audio delays while compiling

;;; Code:

;; First, load the library where the sampler infrastructure is
;; located.  Have a look at this file in your editor to see how the
;; sampler works.

(load "libs/external/instruments.xtm")

;; Now define the sampler instrument and DSP callback function (in
;; this case, it just calls the sampler closure)

(define-sampler sampler sampler-note-hermite sampler-fx)

(bind-func dsp:DSP
  (lambda (in time chan dat)
    (cond ((< chan 2.0)
	   (sampler in time chan dat))
	  (else 0.0))))

(dsp:set! dsp)

;; Find a stereo audio file of some kind (not mp3 or aac)
;; ogg, wav or aif should all be fine

;; then load up a few excerpts from the file
;; set-sampler-index takes 5 arguments:
;; 1) the instrument to load into (in the example above, it's 'sampler')
;; 2) the audio file to load from
;; 3) an index (from 0-127) to load into. This should be the base
;; frequency of the sample, e.g. a middle C sample should be loaded into 60.
;; 4) an offset in samples (frames without channels)
;; 5) a duration or length in samples to read

;; first let's just read in one sample
;; we'll choose an index of 60 - the midi note number for middle C
;; make sure your audio file is long enough for the params below!!
(set-sampler-index sampler "/Users/ben/Desktop/peg.wav" 60 0 0)

;; playing back at 60 should playback without pitch shift
(play-note (now) sampler 60 80 100000)

;; anything else will pitch shift
;; floating point is OK
(play-note (now) sampler 67.25 80 100000)

;; a loop
(define loop
  (lambda (beat dur)
    (play sampler (random 48 72) 80 dur)
    (callback (*metro* (+ beat (* .5 dur))) 'loop
              (+ beat dur)
              dur)))

;; start loop
(loop (*metro* 'get-beat 4) 8)


;; Now, let's load a whole 'instrument' worth of samples in to the sampler.
;; There are lots of sample libraries available on the net these days,
;; both free ones and ones that cost money.  There are some good free
;; piano samples avaliable at 
;; http://theremin.music.uiowa.edu/MISpiano.html

;; Now, you can load the samples for each individual note in manually,
;; choosing the appropriate index for the differently pitched notes.
;; However, it's handy to be able to automatically load a whole
;; directory of different samples into the right slots in the sampler.
;; This requires some way of determining from the filenames which
;; index to load the sample into. Luckily, the instruments.xtm library
;; file we loaded earlier contains a helper macro called
;; `load-sampler'.

;; The load-sampler macro takes 5 arguments (just like
;; set-sampler-index):
;; 1) the sampler instrument to load the audio data into
;; 2) the (full or relative) path to the directory where the files are
;; 3) the name parser function (see below)
;; 4) an offset for the samples (or list of offsets)
;; 5) a length for the samples (or list of lengths)

;; So, say the files are stored in a directory like
;; A0.aiff
;; A1.aiff
;; Ab1.aiff
;; Ab2.aiff
;; B0.aiff
;; B1.aiff
;; etc.
;; then we need to parse the note names A, Ab (A-flat), B and octaves
;; (the number after the note name) from the filename and figure out
;; which sampler index (that is, which midi note number) to put the
;; audio data into.  Because there are heaps of different naming
;; conventions which a sample library might use for their files,
;; `load-sampler' instead asks you to provide a function which it will
;; apply to each filename, and this function should return a list with
;; the filename and the appropriate sample index.  As an example, this
;; function will work for files named with the A0.aiff shown above

(define parse-sample-name-2
  (lambda (fname)
    (let ((result (regex:matched fname "^.*([ABCDEFG])([#b])?([0-9]).*\.(wav|aif|aiff|ogg)$")))
        (if (null? result)
            (begin (println "Error: cannot parse filename: " fname)
                   #f)
            (let ((offset (+ 12 (* (string->number (cadddr result)) 12)))
                  (pc (case (modulo (- (modulo (char->integer (car (string->list (cadr result)))) 16) 3) 7)
                        ((0) 0) ((1) 2) ((2) 4) ((3) 5) ((4) 7) ((5) 9) ((6) 11))))
              (list fname (+ offset pc
                             (cond ((string=? (caddr result) "#") 1)
                                   ((string=? (caddr result) "b") -1)
                                   (else 0)))))))))

;; if we call `parse-sample-name-2' with the filename Eb3.aiff, for
;; instance

(println (parse-sample-name-2 "Eb3.aiff"))

;; see how the function returns ("Eb3.aiff" 51), a list with the
;; filename as first element and the index number as the second
;; element.

;; The MIS piano samples available from
;; http://theremin.music.uiowa.edu/MISpiano.html use this convention:
;; Piano.mf.A2.aiff is a medium-loud (mf) sample of the note A2. So,
;; if we wanted to load all the mf samples in the directory, we could
;; use:

(define parse-MIS-piano-mf
  (lambda (fname)
    ;; map from letter note names into numbers as above
    (let ((result (parse-sample-name-2 fname)))
      (and result
           ;; only include the mf samples
           (and (regex:match? (car result) ".*\.mf\..*")
                result)))))

;; So, to load all the mf samples into the sampler:

(load-sampler sampler
              "path/to/MIS-piano-samples"
              parse-MIS-piano-mf
              0 0)

;; the final two arguments (offset and length) are zero, meaning that
;; the samper should use an offset of zero and the full length of the
;; sample (the 'default' behaviour)

;; There are other parse-filename functions provided in the
;; libs/external/instruments.xtm file.  If you're having trouble, see
;; if you can use (or adapt) one of those to make sense of the
;; filenames you're trying to load into the sampler.

;; Now, back to making music: loop2 requires pc_ivl-lib
(load "libs/core/pc_ivl.xtm")

(define loop2
  (lambda (beat dur root)
    (play 3 sampler 36 100 dur)
    (for-each (lambda (p offset)
                (play (+ offset) sampler p 100 dur))
              (pc:make-chord 40 84 7
                             (pc:chord root (if (member root '(10 8))
                                                '^7
                                                '-7)))
              '(1/3 1 3/2 1 2 3 13/3))
    (callback (*metro* (+ beat (* .5 dur))) 'loop2 (+ beat dur)
              dur
              (if (member root '(0 8))
                  (random '(2 7 10))
                  (random '(0 8))))))


(loop2 (*metro* 'get-beat 4) 4 0)

;; make some more samplers
(define-sampler sampler2 sampler-note sampler-fx)
(define-sampler sampler3 sampler-note sampler-fx)

;; add new samplers to dsp
(bind-func dsp:DSP
  (lambda (in time chan dat)
    (cond ((< chan 2.0) (+ (synth in time chan dat)
			   (sampler in time chan dat)
			   (sampler2 in time chan dat)
			   (sampler3 in time chan dat)))
	  (else 0.0))))

;; load new samplers etc..
